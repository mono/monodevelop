<?xml version="1.0"?>
<xs:schema xmlns:nant="http://nant.sf.net/release/0.85/nant.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://nant.sf.net/release/0.85/nant.xsd" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation>NAnt schema written by Hannes Kuppelwieser &lt;hannes.kuppelwieser@rolmail.net&gt;</xs:documentation>
	</xs:annotation>
	<xs:complexType name="NAnt.Core.TaskContainer">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="updateAssemblyVersion" type="nant:Boo.NAnt.UpdateAssemblyVersionTask"/>
				<xs:element name="insertLicense" type="nant:Boo.NAnt.InsertLicenseTask"/>
				<xs:element name="booc" type="nant:Boo.NAnt.BoocTask">
					<xs:annotation>
						<xs:documentation>Compiles boo programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="boo" type="nant:Boo.NAnt.BooTask">
					<xs:annotation>
						<xs:documentation>Runs embedded boo programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="gunzip" type="nant:NAnt.Compression.Tasks.GUnzip">
					<xs:annotation>
						<xs:documentation>Expands a file packed using GZip compression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tar" type="nant:NAnt.Compression.Tasks.TarTask">
					<xs:annotation>
						<xs:documentation>Creates a tar file from the specified filesets.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="unzip" type="nant:NAnt.Compression.Tasks.UnZipTask">
					<xs:annotation>
						<xs:documentation>Extracts files from a zip file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="zip" type="nant:NAnt.Compression.Tasks.ZipTask">
					<xs:annotation>
						<xs:documentation>Creates a zip file from the specified filesets.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="asminfo" type="nant:NAnt.DotNet.Tasks.AssemblyInfoTask">
					<xs:annotation>
						<xs:documentation>Generates an AssemblyInfo file using the attributes given.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="al" type="nant:NAnt.DotNet.Tasks.AssemblyLinkerTask">
					<xs:annotation>
						<xs:documentation>Wraps al.exe, the assembly linker for Mono.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="csc" type="nant:NAnt.DotNet.Tasks.CscTask">
					<xs:annotation>
						<xs:documentation>Compiles C# programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="delay-sign" type="nant:NAnt.DotNet.Tasks.DelaySignTask">
					<xs:annotation>
						<xs:documentation>Signs delay-signed Mono Assemblies, or re-signs existing assemblies.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ilasm" type="nant:NAnt.DotNet.Tasks.IlasmTask">
					<xs:annotation>
						<xs:documentation>Compiles ILASM programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="jsc" type="nant:NAnt.DotNet.Tasks.JscTask">
					<xs:annotation>
						<xs:documentation>Compiles JScript.NET programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="license" type="nant:NAnt.DotNet.Tasks.LicenseTask">
					<xs:annotation>
						<xs:documentation>Generates a .licence file from a .licx file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ndoc" type="nant:NAnt.DotNet.Tasks.NDocTask">
					<xs:annotation>
						<xs:documentation>Runs NDoc V1.3.1 to create documentation.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="regsvcs" type="nant:NAnt.DotNet.Tasks.RegsvcsTask">
					<xs:annotation>
						<xs:documentation>Installs or removes Mono Services.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="resgen" type="nant:NAnt.DotNet.Tasks.ResGenTask">
					<xs:annotation>
						<xs:documentation>Converts files from one resource format to another.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="script" type="nant:NAnt.DotNet.Tasks.ScriptTask">
					<xs:annotation>
						<xs:documentation>Executes the code contained within the task. This code can include custom extension function definitions. Once the script task has executed those custom functions will be available for use in the buildfile.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="vbc" type="nant:NAnt.DotNet.Tasks.VbcTask">
					<xs:annotation>
						<xs:documentation>Compiles Visual Basic.NET programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="vjc" type="nant:NAnt.DotNet.Tasks.VjcTask">
					<xs:annotation>
						<xs:documentation>Compiles Visual J# programs using vjc, Microsoft's J# compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nunit" type="nant:NAnt.NUnit1.Tasks.NUnitTask">
					<xs:annotation>
						<xs:documentation>Runs tests using the NUnit V1.0 framework.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nunit2" type="nant:NAnt.NUnit2.Tasks.NUnit2Task">
					<xs:annotation>
						<xs:documentation>Runs tests using the NUnit V2.2 framework.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-changelog" type="nant:NAnt.SourceControl.Tasks.ChangeLogTask">
					<xs:annotation>
						<xs:documentation>Produces an XML report that represents the cvs changes from the given start day, to a given end date.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-checkout" type="nant:NAnt.SourceControl.Tasks.CheckoutTask">
					<xs:annotation>
						<xs:documentation>Checks out a CVS module to the required directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-pass" type="nant:NAnt.SourceControl.Tasks.CvsPass">
					<xs:annotation>
						<xs:documentation>Executes the cvs login command which appends or updates an entry to the specified .cvspass file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs" type="nant:NAnt.SourceControl.Tasks.CvsTask">
					<xs:annotation>
						<xs:documentation>Executes the cvs command specified by the command attribute.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-export" type="nant:NAnt.SourceControl.Tasks.ExportTask">
					<xs:annotation>
						<xs:documentation>Exports a cvs module in preperation for a release (i.e. the CVS version folders are not exported).</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-rtag" type="nant:NAnt.SourceControl.Tasks.RTagTask">
					<xs:annotation>
						<xs:documentation>Tags all sources in the remote repository with a given tag.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-tag" type="nant:NAnt.SourceControl.Tasks.TagTask">
					<xs:annotation>
						<xs:documentation>Tags all local sources with the specified tag.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-update" type="nant:NAnt.SourceControl.Tasks.UpdateTask">
					<xs:annotation>
						<xs:documentation>Updates a CVS module in a local working directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cl" type="nant:NAnt.VisualCpp.Tasks.ClTask">
					<xs:annotation>
						<xs:documentation>Compiles C/C++ programs using cl.exe, Microsoft's C/C++ compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="lib" type="nant:NAnt.VisualCpp.Tasks.LibTask">
					<xs:annotation>
						<xs:documentation>Run lib.exe, Microsoft's Library Manager.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="link" type="nant:NAnt.VisualCpp.Tasks.LinkTask">
					<xs:annotation>
						<xs:documentation>Links files using link.exe, Microsoft's Incremental Linker.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mc" type="nant:NAnt.VisualCpp.Tasks.McTask">
					<xs:annotation>
						<xs:documentation>Compiles messages using mc.exe, Microsoft's Win32 message compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="midl" type="nant:NAnt.VisualCpp.Tasks.MidlTask">
					<xs:annotation>
						<xs:documentation>This tasks allows you to run MIDL.exe.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="rc" type="nant:NAnt.VisualCpp.Tasks.RcTask">
					<xs:annotation>
						<xs:documentation>Compiles resources using rc.exe, Microsoft's Win32 resource compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ncc" type="nant:Nemerle.Tools.NAntTasks.NccTask">
					<xs:annotation>
						<xs:documentation>Compiles nemerle programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="attrib" type="nant:NAnt.Core.Tasks.AttribTask">
					<xs:annotation>
						<xs:documentation>Changes the file attributes of a file or set of files and directories.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="available" type="nant:NAnt.Core.Tasks.AvailableTask">
					<xs:annotation>
						<xs:documentation>(Deprecated) Checks if a resource is available at runtime.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="call" type="nant:NAnt.Core.Tasks.CallTask">
					<xs:annotation>
						<xs:documentation>Calls a NAnt target in the current project.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="copy" type="nant:NAnt.Core.Tasks.CopyTask">
					<xs:annotation>
						<xs:documentation>Copies a file or set of files to a new file or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="delete" type="nant:NAnt.Core.Tasks.DeleteTask">
					<xs:annotation>
						<xs:documentation>Deletes a file, fileset or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="description" type="nant:NAnt.Core.Tasks.DescriptionTask">
					<xs:annotation>
						<xs:documentation>An empty task that allows a build file to contain a description.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="echo" type="nant:NAnt.Core.Tasks.EchoTask">
					<xs:annotation>
						<xs:documentation>Writes a message to the build log or a specified file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="exec" type="nant:NAnt.Core.Tasks.ExecTask">
					<xs:annotation>
						<xs:documentation>Executes a system command.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="fail" type="nant:NAnt.Core.Tasks.FailTask">
					<xs:annotation>
						<xs:documentation>Exits the current build by throwing a BuildException, optionally printing additional information.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="get" type="nant:NAnt.Core.Tasks.GetTask">
					<xs:annotation>
						<xs:documentation>Gets a particular file from a URL source.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="if" type="nant:NAnt.Core.Tasks.IfTask">
					<xs:annotation>
						<xs:documentation>Checks the conditional attributes and executes the children if true.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ifnot" type="nant:NAnt.Core.Tasks.IfNotTask">
					<xs:annotation>
						<xs:documentation>(Deprecated) The opposite of the if task.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="include" type="nant:NAnt.Core.Tasks.IncludeTask">
					<xs:annotation>
						<xs:documentation>Includes an external build file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="loadfile" type="nant:NAnt.Core.Tasks.LoadFileTask">
					<xs:annotation>
						<xs:documentation>Load a text file into a single property.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="loadtasks" type="nant:NAnt.Core.Tasks.LoadTasksTask">
					<xs:annotation>
						<xs:documentation>Loads tasks form a given assembly or all assemblies in a given directory or 'fileset'.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="foreach" type="nant:NAnt.Core.Tasks.LoopTask">
					<xs:annotation>
						<xs:documentation>Loops over a set of items.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mail" type="nant:NAnt.Core.Tasks.MailTask">
					<xs:annotation>
						<xs:documentation>Sends an SMTP message.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mkdir" type="nant:NAnt.Core.Tasks.MkDirTask">
					<xs:annotation>
						<xs:documentation>Creates a directory and any non-existent parent directory if necessary.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="move" type="nant:NAnt.Core.Tasks.MoveTask">
					<xs:annotation>
						<xs:documentation>Moves a file or set of files to a new file or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nantschema" type="nant:NAnt.Core.Tasks.NAntSchemaTask">
					<xs:annotation>
						<xs:documentation>Creates an XSD File for all available tasks.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nant" type="nant:NAnt.Core.Tasks.NAntTask">
					<xs:annotation>
						<xs:documentation>Runs NAnt on a supplied build file, or a set of build files.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="property" type="nant:NAnt.Core.Tasks.PropertyTask">
					<xs:annotation>
						<xs:documentation>Sets a property in the current project.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="regex" type="nant:NAnt.Core.Tasks.RegexTask">
					<xs:annotation>
						<xs:documentation>Sets project properties based on the evaluatuion of a regular expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="setenv" type="nant:NAnt.Core.Tasks.SetEnvTask">
					<xs:annotation>
						<xs:documentation>Sets an environment variable or a whole collection of them. Use an empty value attribute to clear a variable.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="sleep" type="nant:NAnt.Core.Tasks.SleepTask">
					<xs:annotation>
						<xs:documentation>A task for sleeping a specified period of time, useful when a build or deployment process requires an interval between tasks.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="style" type="nant:NAnt.Core.Tasks.StyleTask">
					<xs:annotation>
						<xs:documentation>Processes a document via XSLT.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="sysinfo" type="nant:NAnt.Core.Tasks.SysInfoTask">
					<xs:annotation>
						<xs:documentation>Sets properties with system information.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tstamp" type="nant:NAnt.Core.Tasks.TStampTask">
					<xs:annotation>
						<xs:documentation>Sets properties with the current date and time.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="touch" type="nant:NAnt.Core.Tasks.TouchTask">
					<xs:annotation>
						<xs:documentation>Touches a file or set of files -- corresponds to the Unix touch command.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="uptodate" type="nant:NAnt.Core.Tasks.UpToDateTask">
					<xs:annotation>
						<xs:documentation>Check modification dates on groups of files.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="xmlpeek" type="nant:NAnt.Core.Tasks.XmlPeekTask">
					<xs:annotation>
						<xs:documentation>Extracts text from an XML file at the location specified by an XPath expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="xmlpoke" type="nant:NAnt.Core.Tasks.XmlPokeTask">
					<xs:annotation>
						<xs:documentation>Replaces text in an XML file at the location specified by an XPath expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
				<xs:any namespace="##local" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.FileSet-Include">
		<xs:attribute name="asis" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the file name will be added to the 'fileset' without pattern matching or checking if the file exists. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="frompath" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the file will be searched for on the path. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>The pattern or file name to include.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the pattern will be included; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the pattern will be included; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.FileSet-Exclude">
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>The pattern or file name to exclude.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the pattern will be excluded; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the pattern will be excluded; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.FileSet-IncludesFile">
		<xs:annotation>
			<xs:documentation>The files from which a list of patterns or files to include should be obtained.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="asis" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the patterns in the include file will be added to the 'fileset' without pattern matching or checking if the file exists. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="frompath" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the patterns in the include file will be searched for on the path. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the patterns will be included; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the patterns will be included; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>The name of a file; each line of this file is taken to be a pattern.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.FileSet-ExcludesFile">
		<xs:annotation>
			<xs:documentation>The files from which a list of patterns or files to exclude should be obtained.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the patterns will be excluded; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the patterns will be excluded; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>The name of a file; each line of this file is taken to be a pattern.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Compression.Types.TarFileSet">
		<xs:annotation>
			<xs:documentation>A 'tarfileset' is a 'fileset' with extra attributes useful in the context of the 'tar' task.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="includes" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="include" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludes" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="exclude" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesList" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesfile" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludesfile" type="nant:NAnt.Core.Types.FileSet-ExcludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to exclude should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="filemode" use="optional">
			<xs:annotation>
				<xs:documentation>A 3 digit octal string, specify the user, group and other modes in the standard Unix fashion. Only applies to plain files. The default is 644.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dirmode" use="optional">
			<xs:annotation>
				<xs:documentation>A 3 digit octal string, specify the user, group and other modes in the standard Unix fashion. Only applies to directories. The default is 755.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="username" use="optional">
			<xs:annotation>
				<xs:documentation>The username for the tar entry.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="uid" use="optional">
			<xs:annotation>
				<xs:documentation>The user identifier (UID) for the tar entry.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="groupname" use="optional">
			<xs:annotation>
				<xs:documentation>The groupname for the tar entry.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="gid" use="optional">
			<xs:annotation>
				<xs:documentation>The group identifier (GID) for the tar entry.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="prefix" use="optional">
			<xs:annotation>
				<xs:documentation>The top level directory prefix. If set, all file and directory paths in the fileset will have this value prepended. Can either be a single directory name or a "/" separated path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonempty" use="optional">
			<xs:annotation>
				<xs:documentation>When set to true, causes the fileset element to throw a ValidationException when no files match the includes and excludes criteria. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="defaultexcludes" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether default excludes should be used or not. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="basedir" use="optional">
			<xs:annotation>
				<xs:documentation>The base of the directory of this fileset. The default is the project base directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Compression.Types.ZipFileSet">
		<xs:annotation>
			<xs:documentation>A 'zipfileset' is a 'fileset' with extra attributes useful in the context of the 'zip' task.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="includes" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="include" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludes" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="exclude" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesList" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesfile" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludesfile" type="nant:NAnt.Core.Types.FileSet-ExcludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to exclude should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="prefix" use="optional">
			<xs:annotation>
				<xs:documentation>The top level directory prefix. If set, all file and directory paths in the fileset will have this value prepended. Can either be a single directory name or a "/" separated path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonempty" use="optional">
			<xs:annotation>
				<xs:documentation>When set to true, causes the fileset element to throw a ValidationException when no files match the includes and excludes criteria. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="defaultexcludes" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether default excludes should be used or not. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="basedir" use="optional">
			<xs:annotation>
				<xs:documentation>The base of the directory of this fileset. The default is the project base directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Types.LibDirectorySet">
		<xs:annotation>
			<xs:documentation>Additional directories to search in for assembly references.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="includes" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="include" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludes" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="exclude" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesList" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesfile" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludesfile" type="nant:NAnt.Core.Types.FileSet-ExcludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to exclude should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="failonempty" use="optional">
			<xs:annotation>
				<xs:documentation>When set to true, causes the fileset element to throw a ValidationException when no files match the includes and excludes criteria. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="defaultexcludes" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether default excludes should be used or not. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Types.AssemblyFileSet">
		<xs:annotation>
			<xs:documentation>Specialized 'fileset' class for managing assembly files.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="lib" type="nant:NAnt.DotNet.Types.LibDirectorySet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Additional directories to search in for assembly references.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includes" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="include" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludes" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="exclude" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesList" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesfile" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludesfile" type="nant:NAnt.Core.Types.FileSet-ExcludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to exclude should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="failonempty" use="optional">
			<xs:annotation>
				<xs:documentation>When set to true, causes the fileset element to throw a ValidationException when no files match the includes and excludes criteria. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="defaultexcludes" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether default excludes should be used or not. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="basedir" use="optional">
			<xs:annotation>
				<xs:documentation>The base of the directory of this fileset. The default is the project base directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Types.NamespaceImport">
		<xs:attribute name="name" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The name of the namespace to import.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="namespace" use="optional">
			<xs:annotation>
				<xs:documentation>The name of the namespace to import.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the import should be generated.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the import should be not generated.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Types.NamespaceImportCollection">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="import" type="nant:NAnt.DotNet.Types.NamespaceImport" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Adds a NamespaceImport to the end of the collection.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Types.ResourceFileSet">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="includes" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="include" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludes" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="exclude" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesList" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesfile" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludesfile" type="nant:NAnt.Core.Types.FileSet-ExcludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to exclude should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="prefix" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates the prefix to prepend to the actual resource. This is usually the default namspace of the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dynamicprefix" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates that prefixes should be dynamically generated by taking the path of the resource relative to the basedir and appending it to the specified prefix.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonempty" use="optional">
			<xs:annotation>
				<xs:documentation>When set to true, causes the fileset element to throw a ValidationException when no files match the includes and excludes criteria. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="defaultexcludes" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether default excludes should be used or not. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="basedir" use="optional">
			<xs:annotation>
				<xs:documentation>The base of the directory of this fileset. The default is the project base directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Types.CompilerWarning">
		<xs:attribute name="number" use="required">
			<xs:annotation>
				<xs:documentation>A warning number, or comma-separated list of warnings, that you want the compiler to suppress or report.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the element will be processed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the element will be skipped; otherwise, processed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Types.WarningAsError">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="include" type="nant:NAnt.DotNet.Types.CompilerWarning" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies a list of warnings that the compiler should treat as errors. This overrides the warnaserror attribute. Only supported when targeting Mono 2.0 or higher.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="exclude" type="nant:NAnt.DotNet.Types.CompilerWarning" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies a list of warnings that the compiler should NOT treat as errors. This is only useful if warnaserror is true. Only supported when targeting Mono 2.0 or higher.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.NUnit2.Types.Category">
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>A name of a category, or comma-separated list of names.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the category will be processed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the category will be skipped; otherwise, processed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.NUnit2.Types.Categories">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="include" type="nant:NAnt.NUnit2.Types.Category" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies a list of categories to include.

Represents a certain group of test cases or fixtures. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="exclude" type="nant:NAnt.NUnit2.Types.Category" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies a list of categories to exclude.

Represents a certain group of test cases or fixtures. </xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.SourceControl.Types.CvsFileSet">
		<xs:annotation>
			<xs:documentation>A 'cvsfileset' is a 'fileset' with extra attributes useful in the context of the 'cvs' task.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="includes" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="include" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludes" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="exclude" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesList" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesfile" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludesfile" type="nant:NAnt.Core.Types.FileSet-ExcludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to exclude should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="usecvsignore" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether the entires in the .cvsignore should be used to limit the file list; true to exclude files in .cvsignore, otherwise false. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonempty" use="optional">
			<xs:annotation>
				<xs:documentation>When set to true, causes the fileset element to throw a ValidationException when no files match the includes and excludes criteria. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="defaultexcludes" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether default excludes should be used or not. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="basedir" use="optional">
			<xs:annotation>
				<xs:documentation>The base of the directory of this fileset. The default is the project base directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Filters.Filter">
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the filter will be used; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the filter will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Filters.FilterChain">
		<xs:annotation>
			<xs:documentation>Represent a chain of NAnt filters that can be applied to a Task.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="filter" type="nant:NAnt.Core.Filters.Filter" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The filters to apply.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="encoding" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The encoding to assume when filter-copying files. The default is system's current ANSI code page.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.Credential">
		<xs:attribute name="domain" use="optional">
			<xs:annotation>
				<xs:documentation>The domain or computer name that verifies the credentials.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="password" use="optional">
			<xs:annotation>
				<xs:documentation>The password for the user name associated with the credentials.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="username" use="optional">
			<xs:annotation>
				<xs:documentation>The user name associated with the credentials.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the credentials should be used to provide authentication information to the external resource. If true then the credentials will be passed; otherwise, not. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the credentials should not be used to provide authentication information to the external resource. If false then the credentials will be passed; otherwise, not. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.FileSet">
		<xs:annotation>
			<xs:documentation>Filesets are groups of files. These files can be found in a directory tree starting in a base directory and are matched by patterns taken from a number of patterns.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="includes" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="include" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludes" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="exclude" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesList" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesfile" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludesfile" type="nant:NAnt.Core.Types.FileSet-ExcludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to exclude should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="failonempty" use="optional">
			<xs:annotation>
				<xs:documentation>When set to true, causes the fileset element to throw a ValidationException when no files match the includes and excludes criteria. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="defaultexcludes" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether default excludes should be used or not. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="basedir" use="optional">
			<xs:annotation>
				<xs:documentation>The base of the directory of this fileset. The default is the project base directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.DirSet">
		<xs:annotation>
			<xs:documentation>A specialized 'fileset' used for specifying a set of directories.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="includes" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="include" type="nant:NAnt.Core.Types.FileSet-Include" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to include in the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludes" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="exclude" type="nant:NAnt.Core.Types.FileSet-Exclude" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The items to exclude from the fileset.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesList" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includesfile" type="nant:NAnt.Core.Types.FileSet-IncludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to include should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="excludesfile" type="nant:NAnt.Core.Types.FileSet-ExcludesFile" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The files from which a list of patterns or files to exclude should be obtained.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="failonempty" use="optional">
			<xs:annotation>
				<xs:documentation>When set to true, causes the fileset element to throw a ValidationException when no files match the includes and excludes criteria. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="defaultexcludes" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether default excludes should be used or not. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="basedir" use="optional">
			<xs:annotation>
				<xs:documentation>The base of the directory of this fileset. The default is the project base directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.PathElement">
		<xs:attribute name="file" use="optional">
			<xs:annotation>
				<xs:documentation>The name of a file to add to the path. Will be replaced with the absolute path of the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dir" use="optional">
			<xs:annotation>
				<xs:documentation>The name of a directory to add to the path. Will be replaced with the absolute path of the directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="path" use="optional">
			<xs:annotation>
				<xs:documentation>A string that will be treated as a path-like string. You can use : or ; as path separators and NAnt will convert it to the platform's local conventions, while resolving references to environment variables.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the entry will be added to the path; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the entry will be added to the path; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.PathSet">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="path" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Defines a set of path elements to add to the current path.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="pathelement" type="nant:NAnt.Core.Types.PathElement" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Defines a path element to add to the current path.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.Proxy">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="credentials" type="nant:NAnt.Core.Types.Credential" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The credentials to submit to the proxy server for authentication.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="host" use="required">
			<xs:annotation>
				<xs:documentation>The name of the proxy host.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="port" use="required">
			<xs:annotation>
				<xs:documentation>The port number on host to use.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="bypassonlocal" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether to bypass the proxy server for local addresses. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the proxy should be used to connect to the external resource. If true then the proxy will be used; otherwise, not. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the proxy should not be used to connect to the external resource. If false then the proxy will be used; otherwise, not. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" use="optional">
			<xs:annotation>
				<xs:documentation>The ID used to be referenced later.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="refid" use="optional">
			<xs:annotation>
				<xs:documentation>The ID to use as the reference.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Compression.Tasks.GUnzip">
		<xs:attribute name="src" use="required">
			<xs:annotation>
				<xs:documentation>The file to expand.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dest" use="required">
			<xs:annotation>
				<xs:documentation>The destination file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Compression.Tasks.TarTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.Compression.Types.TarFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The set of files to be included in the archive.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="destfile" use="required">
			<xs:annotation>
				<xs:documentation>The tar file to create.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="includeemptydirs" use="optional">
			<xs:annotation>
				<xs:documentation>Include empty directories in the generated tar file. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="compression" use="optional">
			<xs:annotation>
				<xs:documentation>The compression method. The default is None.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="BZip2">
						<xs:annotation>
							<xs:documentation>BZIP2 compression.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="GZip">
						<xs:annotation>
							<xs:documentation>GZIP compression.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="None">
						<xs:annotation>
							<xs:documentation>No compression.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Compression.Tasks.UnZipTask">
		<xs:attribute name="zipfile" use="required">
			<xs:annotation>
				<xs:documentation>The archive file to expand.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="todir" use="optional">
			<xs:annotation>
				<xs:documentation>The directory where the expanded files should be stored. The default is the project base directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="encoding" use="optional">
			<xs:annotation>
				<xs:documentation>The character encoding that has been used for filenames inside the zip file. The default is the system's OEM code page.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Compression.Tasks.ZipTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.Compression.Types.ZipFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The set of files to be included in the archive.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="zipfile" use="required">
			<xs:annotation>
				<xs:documentation>The zip file to create.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="comment" use="optional">
			<xs:annotation>
				<xs:documentation>The comment for the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stampdatetime" use="optional">
			<xs:annotation>
				<xs:documentation>Date/time stamp for the files in the format MM/DD/YYYY HH:MM:SS.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ziplevel" use="optional">
			<xs:annotation>
				<xs:documentation>Desired level of compression. Possible values are 0 (STORE only) to 9 (highest). The default is 6.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="includeemptydirs" use="optional">
			<xs:annotation>
				<xs:documentation>Include empty directories in the generated zip file. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="duplicate" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the behaviour when a duplicate file is found. The default is Add.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="Add">
						<xs:annotation>
							<xs:documentation>Overwrite existing entry with same name.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Fail">
						<xs:annotation>
							<xs:documentation>Report failure when two entries have the same name.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Preserve">
						<xs:annotation>
							<xs:documentation>Preserve existing entry with the same name.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="encoding" use="optional">
			<xs:annotation>
				<xs:documentation>The character encoding to use for filenames and comment inside the zip file. The default is the system's OEM code page.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.Argument">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="path" type="nant:NAnt.Core.Types.PathSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Sets a single command-line argument and treats it like a PATH - ensures the right separator for the local platform is used.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="value" use="optional">
			<xs:annotation>
				<xs:documentation>A single command-line argument; can contain space characters.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="file" use="optional">
			<xs:annotation>
				<xs:documentation>The name of a file as a single command-line argument; will be replaced with the absolute filename of the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dir" use="optional">
			<xs:annotation>
				<xs:documentation>The value for a directory-based command-line argument; will be replaced with the absolute path of the directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="path" use="optional">
			<xs:annotation>
				<xs:documentation>The value for a PATH-like command-line argument; you can use : or ; as path separators and NAnt will convert it to the platform's local conventions, while resolving references to environment variables.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="line" use="optional">
			<xs:annotation>
				<xs:documentation>List of command-line arguments; will be passed to the executable as is.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the argument should be passed to the external program. If true then the argument will be passed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the argument should not be passed to the external program. If false then the argument will be passed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.Option">
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>Name of the option.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value" use="optional">
			<xs:annotation>
				<xs:documentation>Value of the option. The default is a null reference (Nothing in Visual Basic).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the option should be passed to the task. If true then the option will be passed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the option should not be passed to the task. If false then the option will be passed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.PropertyTask">
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>The name of the NAnt property to set.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value" use="required">
			<xs:annotation>
				<xs:documentation>The value to assign to the NAnt property.

This attribute's properties will not be automatically expanded! </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readonly" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether the property is read-only or not. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dynamic" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether references to other properties should not be expanded when the value of the property is set, but expanded when the property is actually used. By default, properties will be expanded when set.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="overwrite" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether the value of a property should be overwritten if the property already exists (unless the property is read-only). The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Types.AssemblyAttribute">
		<xs:attribute name="type" use="required">
			<xs:annotation>
				<xs:documentation>Typename of the assembly-level attribute.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value" use="optional">
			<xs:annotation>
				<xs:documentation>Value of the attribute.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="asis" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the value of the attribute will be set as is, without actually looking for a matching constructor or named properties. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the attribute should be generated.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the attribute should be not generated.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.AssemblyInfoTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="attributes" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The assembly-level attributes to generate.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="attribute" type="nant:NAnt.DotNet.Types.AssemblyAttribute">
							<xs:annotation>
								<xs:documentation>Represents an assembly-level attribute.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="imports" type="nant:NAnt.DotNet.Types.NamespaceImportCollection" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The namespaces to import.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="references" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Assembly files used to locate the types of the specified attributes.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="output" use="required">
			<xs:annotation>
				<xs:documentation>Name of the AssemblyInfo file to generate.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="language" use="required">
			<xs:annotation>
				<xs:documentation>The code language in which the AssemblyInfo file should be generated.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.AssemblyLinkerTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="sources" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The set of resources to embed.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="algid" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies an algorithm (in hexadecimal) to hash all files in a multifile assembly except the file that contains the assembly manifest. The default algorithm is CALG_SHA1.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="company" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a string for the Company field in the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="configuration" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a string for the Configuration field in the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="copyright" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a string for the Copyright field in the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="culture" use="optional">
			<xs:annotation>
				<xs:documentation>The culture string associated with the output assembly. The string must be in RFC 1766 format, such as "en-US".</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="delaysign" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether the assembly should be partially signed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="description" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a string for the Description field in the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="evidence" use="optional">
			<xs:annotation>
				<xs:documentation>Security evidence file to embed.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="fileversion" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a string for the File Version field in the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="flags" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a value (in hexadecimal) for the Flags field in the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keycontainer" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a container that holds a key pair.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keyfile" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a file (filename) that contains a key pair or just a public key to sign an assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="main" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the fully-qualified name (class.method) of the method to use as an entry point when converting a module to an executable file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" use="required">
			<xs:annotation>
				<xs:documentation>The name of the output file for the assembly manifest.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="target" use="required">
			<xs:annotation>
				<xs:documentation>The target type (one of lib, exe, or winexe).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="product" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a string for the Product field in the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="productversion" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a string for the Product Version field in the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="template" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies an assembly from which to get all options except the culture field.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="title" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a string for the Title field in the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="trademark" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a string for the Trademark field in the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="version" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies version information for the assembly. The format of the version string is major.minor.build.revision.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="win32icon" use="optional">
			<xs:annotation>
				<xs:documentation>Icon to associate with the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="win32res" use="optional">
			<xs:annotation>
				<xs:documentation>Inserts a Win32 resource (.res file) in the output file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Types.Package">
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>Name of the package to reference. Multiple package can be specified with a single element as a semi-colon separated list of package names.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the package should be passed to the task. If true then the package will be passed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the package should not be passed to the task. If false then the package will be passed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.CscTask">
		<xs:annotation>
			<xs:documentation>Task to compile C# programs.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="warnaserror" type="nant:NAnt.DotNet.Types.WarningAsError" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Controls which warnings should be reported as errors.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nowarn" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies a list of warnings that you want the compiler to suppress.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="warning" type="nant:NAnt.DotNet.Types.CompilerWarning">
							<xs:annotation>
								<xs:documentation>Represents a compiler warning.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="lib" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. Additional directories to search in for assembly references.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="references" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Reference metadata from the specified assembly files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="pkg-references" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies list of packages to reference.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="package" type="nant:NAnt.DotNet.Types.Package">
							<xs:annotation>
								<xs:documentation>Specifies list of packages to reference.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="resources" type="nant:NAnt.DotNet.Types.ResourceFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Resources to embed.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="modules" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Link the specified modules into this assembly.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="sources" type="nant:NAnt.Core.Types.FileSet">
				<xs:annotation>
					<xs:documentation>The set of source files for compilation.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="baseaddress" use="optional">
			<xs:annotation>
				<xs:documentation>The preferred base address at which to load a DLL. The default base address for a DLL is set by the Mono common language runtime.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="debug" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the type of debugging information generated by the compiler. The default is None.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="true">
						<xs:annotation>
							<xs:documentation>Corresponding Enable</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="false">
						<xs:annotation>
							<xs:documentation>Corresponding None</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Enable">
						<xs:annotation>
							<xs:documentation>Enable attaching a debugger to the running program.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Full">
						<xs:annotation>
							<xs:documentation>Enable attaching a debugger to the running program.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="None">
						<xs:annotation>
							<xs:documentation>Create no debug information.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="PdbOnly">
						<xs:annotation>
							<xs:documentation>Only display assembler when the running program is attached to the debugger.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="doc" use="optional">
			<xs:annotation>
				<xs:documentation>The name of the XML documentation file to generate.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="filealign" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the size of sections in the output file. Valid values are 512, 1024, 2048, 4096, and 8192.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="nostdlib" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler not to import mscorlib.dll. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="noconfig" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler not to use implicit references to assemblies. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="checked" use="optional">
			<xs:annotation>
				<xs:documentation> 	 Specifies whether an integer arithmetic statement that is not in the scope of the checked or unchecked keywords and that results in a value outside the range of the data type should cause a run-time exception. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unsafe" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to allow code that uses the unsafe keyword. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="langversion" use="optional">
			<xs:annotation>
				<xs:documentation>Causes the compiler to only accept syntax that is included in a given specification.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="optimize" type="nant:NAnt.Core.boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether the compiler should perform optimizations to the make output files smaller, faster, and more effecient. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="platform" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies which platform version of common language runtime (CLR) can run the output file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="warninglevel" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to allow code that uses the unsafe keyword. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:byte">
					<xs:enumeration value="0"/>
					<xs:enumeration value="1"/>
					<xs:enumeration value="2"/>
					<xs:enumeration value="3"/>
					<xs:enumeration value="4"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="codepage" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the code page to use for all source code files in the compilation.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" use="required">
			<xs:annotation>
				<xs:documentation>The output file created by the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="target" type="nant:NAnt.Core.Targets" use="required">
			<xs:annotation>
				<xs:documentation>Output type. Possible values are exe, winexe, library or module.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="define" use="optional">
			<xs:annotation>
				<xs:documentation>Define conditional compilation symbol(s).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="win32icon" use="optional">
			<xs:annotation>
				<xs:documentation>Icon to associate with the application.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="warnaserror" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to treat all warnings as errors. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="nowarn" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Specifies a comma-separated list of warnings that should be suppressed by the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="rebuild" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs NAnt to recompile the output file regardless of the file timestamps.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="main" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies which type contains the Main method that you want to use as the entry point into the program.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keycontainer" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the key pair container used to strongname the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keyfile" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a strong name key file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.DelaySignTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="targets" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>List of assemblies/executables to sign.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="keyfile" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the filesystem path to the signing key.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keycontainer" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the key container.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.IlasmTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="sources" type="nant:NAnt.Core.Types.FileSet">
				<xs:annotation>
					<xs:documentation>Specifies the set of source files to compile.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="clock" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether or not the compiler should measure and report the compilation times.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="debug" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether or not the compiler should generate debug information.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="error" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether or not the compiler should attempt to create a PE file even if compilation errors have been reported.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="rebuild" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs NAnt to recompile the output file regardless of the file timestamps.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="listing" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether or not the compiler should type a formatted listing of the compilation result.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="alignment" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to set the FileAlignment value in the PE header.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="base" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to set the ImageBase value in the PE header.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="flags" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to set the Flags value in the CLR header.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="subsystem" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to set the Subsystem value in the PE header.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="target" use="required">
			<xs:annotation>
				<xs:documentation>Specifies which output type should be generated.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keysource" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to generate a strong signature of the PE file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keyfile" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to generate a strong signature of the PE file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the name of the output file created by the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="resourcefile" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to link the specified unmanaged resource file into the resulting PE file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.JscTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="lib" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. Additional directories to search in for assembly references.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="references" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Reference metadata from the specified assembly files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="pkg-references" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies list of packages to reference.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="package" type="nant:NAnt.DotNet.Types.Package">
							<xs:annotation>
								<xs:documentation>Represents a package.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="resources" type="nant:NAnt.DotNet.Types.ResourceFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Resources to embed.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="sources" type="nant:NAnt.Core.Types.FileSet">
				<xs:annotation>
					<xs:documentation>The set of source files for compilation.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="platform" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies which platform version of common language runtime (CLR) can run the output file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="warninglevel" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the warning level for the compiler to display. Valid values are 0-4. The default is 4.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:byte">
					<xs:enumeration value="0"/>
					<xs:enumeration value="1"/>
					<xs:enumeration value="2"/>
					<xs:enumeration value="3"/>
					<xs:enumeration value="4"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="codepage" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the code page to use for all source code files in the compilation.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="debug" use="optional">
			<xs:annotation>
				<xs:documentation>Generate debug output. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" use="required">
			<xs:annotation>
				<xs:documentation>The output file created by the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="target" use="required">
			<xs:annotation>
				<xs:documentation>Output type. Possible values are exe, winexe, library or module.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="exe"/>
					<xs:enumeration value="library"/>
					<xs:enumeration value="module"/>
					<xs:enumeration value="winexe"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="define" use="optional">
			<xs:annotation>
				<xs:documentation>Define conditional compilation symbol(s).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="win32icon" use="optional">
			<xs:annotation>
				<xs:documentation>Icon to associate with the application.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="warnaserror" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to treat all warnings as errors. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="rebuild" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs NAnt to recompile the output file regardless of the file timestamps.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="main" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies which type contains the Main method that you want to use as the entry point into the program.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.LicenseTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="assemblies" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Names of the references to scan for the licensed component.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="input" use="required">
			<xs:annotation>
				<xs:documentation>Input file to process.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" use="optional">
			<xs:annotation>
				<xs:documentation>Name of the license file to output.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="licensetarget" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Specifies the executable for which the .licenses file is generated.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="target" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the executable for which the .licenses file is generated.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.RawXml">
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.NDocTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="assemblies" type="nant:NAnt.DotNet.Types.AssemblyFileSet">
				<xs:annotation>
					<xs:documentation>The set of assemblies to document.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="summaries" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The set of namespace summary files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="documenters" type="nant:NAnt.Core.Types.RawXml">
				<xs:annotation>
					<xs:documentation>Specifies the formats in which the documentation should be generated.

Represents an element of which the XML is processed by its parent task or type. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="referencepaths" type="nant:NAnt.Core.Types.DirSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Collection of additional directories to search for referenced assemblies.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.RegsvcsTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="action" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the action to take with the assembly. The default is FindOrCreate.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="Create">
						<xs:annotation>
							<xs:documentation>Creates the target application.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="FindOrCreate">
						<xs:annotation>
							<xs:documentation>Finds or creates the target application.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Uninstall">
						<xs:annotation>
							<xs:documentation>Uninstalls the target application.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="assembly" use="required">
			<xs:annotation>
				<xs:documentation>The source assembly file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tlb" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the type library file to install.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="existingtlb" use="optional">
			<xs:annotation>
				<xs:documentation>Uses an existing type library. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="noreconfig" use="optional">
			<xs:annotation>
				<xs:documentation>Do not reconfigure an existing target application. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="componentsonly" use="optional">
			<xs:annotation>
				<xs:documentation>Configures components only; ignores methods and interfaces. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="existingapp" use="optional">
			<xs:annotation>
				<xs:documentation>Expect an existing application. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="application" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the name of the COM+ application to either find or create.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="partition" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the name or id of the COM+ application to either find or create.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.ResGenTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="resources" type="nant:NAnt.DotNet.Types.ResourceFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Takes a list of .resx or .txt files to convert to .resources files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="assemblies" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Reference metadata from the specified assembly files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="input" use="optional">
			<xs:annotation>
				<xs:documentation>Input file to process.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" use="optional">
			<xs:annotation>
				<xs:documentation>The resource file to output.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="target" use="optional">
			<xs:annotation>
				<xs:documentation>The target type. The default is resources.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="todir" use="optional">
			<xs:annotation>
				<xs:documentation>The directory to which outputs will be stored.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="usesourcepath" use="optional">
			<xs:annotation>
				<xs:documentation>Use each source file's directory as the current directory for resolving relative file paths. The default is false. Only supported when targeting Mono 2.0 (or higher).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.ScriptTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="references" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Any required references.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="imports" type="nant:NAnt.DotNet.Types.NamespaceImportCollection" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The namespaces to import.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="code" type="nant:NAnt.Core.Types.RawXml">
				<xs:annotation>
					<xs:documentation>The code to execute.

Represents an element of which the XML is processed by its parent task or type. </xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="language" use="required">
			<xs:annotation>
				<xs:documentation>The language of the script block. Possible values are "VB", "vb", "VISUALBASIC", "C#", "c#", "CSHARP". "JS", "js", "JSCRIPT" "VJS", "vjs", "JSHARP" or a fully-qualified name for a class implementing CodeDomProvider.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="mainclass" use="optional">
			<xs:annotation>
				<xs:documentation>The name of the main class containing the static ScriptMain entry point.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="prefix" use="optional">
			<xs:annotation>
				<xs:documentation>The namespace prefix for any custom functions defined in the script. If ommitted the prefix will default to 'script'</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.VbcTask">
		<xs:annotation>
			<xs:documentation>Task to compile VisualBasic.NET programs.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="imports" type="nant:NAnt.DotNet.Types.NamespaceImportCollection" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The namespaces to import.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="warnaserror" type="nant:NAnt.DotNet.Types.WarningAsError" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Controls which warnings should be reported as errors.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nowarn" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies a list of warnings that you want the compiler to suppress.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="warning" type="nant:NAnt.DotNet.Types.CompilerWarning">
							<xs:annotation>
								<xs:documentation>Represents a compiler warning.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="lib" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. Additional directories to search in for assembly references.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="references" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Reference metadata from the specified assembly files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="pkg-references" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies list of packages to reference.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="package" type="nant:NAnt.DotNet.Types.Package">
							<xs:annotation>
								<xs:documentation>Specifies list of packages to reference.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="resources" type="nant:NAnt.DotNet.Types.ResourceFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Resources to embed.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="modules" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Link the specified modules into this assembly.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="sources" type="nant:NAnt.Core.Types.FileSet">
				<xs:annotation>
					<xs:documentation>The set of source files for compilation.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="baseaddress" use="optional">
			<xs:annotation>
				<xs:documentation>The preferred base address at which to load a DLL. The default base address for a DLL is set by the Mono common language runtime.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="debug" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the type of debugging information generated by the compiler. The default is None</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="true">
						<xs:annotation>
							<xs:documentation>Corresponding Enable</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="false">
						<xs:annotation>
							<xs:documentation>Corresponding None</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Enable">
						<xs:annotation>
							<xs:documentation>Enable attaching a debugger to the running program.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Full">
						<xs:annotation>
							<xs:documentation>Enable attaching a debugger to the running program.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="None">
						<xs:annotation>
							<xs:documentation>Create no debug information.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="PdbOnly">
						<xs:annotation>
							<xs:documentation>Only display assembler when the running program is attached to the debugger.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="doc" use="optional">
			<xs:annotation>
				<xs:documentation>The name of the XML documentation file to generate. Only supported when targeting Mono 2.0 (or higher).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="imports" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Specifies whether the /imports option gets passed to the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="nostdlib" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler not to reference standard libraries (system.dll and VBC.RSP). The default is false. Only supported when targeting Mono 2.0 (or higher).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="optioncompare" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether /optioncompare option gets passed to the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="optionexplicit" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether the /optionexplicit option gets passed to the compiler. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="optionoptimize" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether the /optimize option gets passed to the compiler. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="optionstrict" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether the /optionstrict option gets passed to the compiler. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="platform" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies which platform version of common language runtime (CLR) can run the output file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="removeintchecks" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether the /removeintchecks option gets passed to the compiler. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="rootnamespace" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether the /rootnamespace option gets passed to the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" use="required">
			<xs:annotation>
				<xs:documentation>The output file created by the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="target" type="nant:NAnt.Core.Targets" use="required">
			<xs:annotation>
				<xs:documentation>Output type. Possible values are exe, winexe, library or module.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="define" use="optional">
			<xs:annotation>
				<xs:documentation>Define conditional compilation symbol(s).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="win32icon" use="optional">
			<xs:annotation>
				<xs:documentation>Icon to associate with the application.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="warnaserror" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to treat all warnings as errors. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="nowarn" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Specifies a comma-separated list of warnings that should be suppressed by the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="rebuild" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs NAnt to recompile the output file regardless of the file timestamps.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="main" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies which type contains the Main method that you want to use as the entry point into the program.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keycontainer" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the key pair container used to strongname the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keyfile" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a strong name key file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.DotNet.Tasks.VjcTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="nowarn" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies a list of warnings that you want the compiler to suppress.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="warning" type="nant:NAnt.DotNet.Types.CompilerWarning">
							<xs:annotation>
								<xs:documentation>Represents a compiler warning.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="lib" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. Additional directories to search in for assembly references.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="references" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Reference metadata from the specified assembly files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="resources" type="nant:NAnt.DotNet.Types.ResourceFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Resources to embed.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="sources" type="nant:NAnt.Core.Types.FileSet">
				<xs:annotation>
					<xs:documentation>The set of source files for compilation.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="debug" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the type of debugging information generated by the compiler. The default is None.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="true">
						<xs:annotation>
							<xs:documentation>Corresponding Enable</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="false">
						<xs:annotation>
							<xs:documentation>Corresponding None</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Enable">
						<xs:annotation>
							<xs:documentation>Enable attaching a debugger to the running program.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Full">
						<xs:annotation>
							<xs:documentation>Enable attaching a debugger to the running program.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="None">
						<xs:annotation>
							<xs:documentation>Create no debug information.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="PdbOnly">
						<xs:annotation>
							<xs:documentation>Only display assembler when the running program is attached to the debugger.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="securescoping" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether package-scoped members are accessible outside of the assembly. In other words, package scope is treated as assembly scope when emitting metadata. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="x" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether to disable language extensions.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="libpath" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the location of assemblies referenced by way of the /reference flag.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="jcpa" use="optional">
			<xs:annotation>
				<xs:documentation>Associate Java-language/COM package names.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="codepage" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the code page to use for all source code files in the compilation.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="warninglevel" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the warning level for the compiler to display. Valid values are 0-4. The default is 4.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:byte">
					<xs:enumeration value="0"/>
					<xs:enumeration value="1"/>
					<xs:enumeration value="2"/>
					<xs:enumeration value="3"/>
					<xs:enumeration value="4"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="output" use="required">
			<xs:annotation>
				<xs:documentation>The output file created by the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="target" type="nant:NAnt.Core.Targets" use="required">
			<xs:annotation>
				<xs:documentation>Output type. Possible values are exe, winexe, library or module.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="define" use="optional">
			<xs:annotation>
				<xs:documentation>Define conditional compilation symbol(s).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="win32icon" use="optional">
			<xs:annotation>
				<xs:documentation>Icon to associate with the application.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="warnaserror" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to treat all warnings as errors. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="nowarn" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Specifies a comma-separated list of warnings that should be suppressed by the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="rebuild" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs NAnt to recompile the output file regardless of the file timestamps.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="main" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies which type contains the Main method that you want to use as the entry point into the program.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keycontainer" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the key pair container used to strongname the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keyfile" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a strong name key file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.NUnit1.Types.NUnitTest">
		<xs:attribute name="outfile" use="optional">
			<xs:annotation>
				<xs:documentation>Base name of the test result. The full filename is determined by this attribute and the extension of formatter.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="todir" use="optional">
			<xs:annotation>
				<xs:documentation>Directory to write the reports to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="class" use="required">
			<xs:annotation>
				<xs:documentation>Class name of the test.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="assembly" use="required">
			<xs:annotation>
				<xs:documentation>Assembly to load the test from.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="fork" use="optional">
			<xs:annotation>
				<xs:documentation>Run the tests in a separate AppDomain.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="haltonerror" use="optional">
			<xs:annotation>
				<xs:documentation>Stop the build process if an error occurs during the test run.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="haltonfailure" use="optional">
			<xs:annotation>
				<xs:documentation>Stop the build process if a test fails (errors are considered failures as well).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="appconfig" use="optional">
			<xs:annotation>
				<xs:documentation>The application configuration file to use for the NUnit test domain.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.NUnit.Types.FormatterElement">
		<xs:attribute name="type" use="required">
			<xs:annotation>
				<xs:documentation>Type of formatter.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="Plain">
						<xs:annotation>
							<xs:documentation>A plaintext formatter.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Xml">
						<xs:annotation>
							<xs:documentation>An XML formatter.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="extension" use="optional">
			<xs:annotation>
				<xs:documentation>Extension to append to the output filename.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="usefile" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether output should be persisted to a file. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="outputdir" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the directory where the output file should be written to, if usefile is true. If not specified, the output file will be written to the directory where the test module is located.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.NUnit1.Tasks.NUnitTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="test" type="nant:NAnt.NUnit1.Types.NUnitTest" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Tests to run.

Represents a test element of an 'nunit' task. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="formatter" type="nant:NAnt.NUnit.Types.FormatterElement" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="haltonerror" use="optional">
			<xs:annotation>
				<xs:documentation>Stops running tests when a test causes an error. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="haltonfailure" use="optional">
			<xs:annotation>
				<xs:documentation>Stops running tests if a test fails (errors are considered failures as well). The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>Cancel the individual tests if they do not finish in the specified time (measured in milliseconds). Ignored if fork is disabled.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.NUnit2.Types.NUnit2Test">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="assemblies" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Assemblies to include in test.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="categories" type="nant:NAnt.NUnit2.Types.Categories" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Categories of test cases to include or exclude.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="assemblyname" use="optional">
			<xs:annotation>
				<xs:documentation>Name of the assembly to search for tests.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="testname" use="optional">
			<xs:annotation>
				<xs:documentation>Name of a specific testfixture to run. If not specified then all testfixtures are run.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="haltonfailure" use="optional">
			<xs:annotation>
				<xs:documentation>Build fails on failure. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="transformfile" use="optional">
			<xs:annotation>
				<xs:documentation>XSLT transform file to use when using the Plain formatter.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="appconfig" use="optional">
			<xs:annotation>
				<xs:documentation>The application configuration file to use for the NUnit test domain. If not specified, NAnt will try to use a configuration name matching the file name of the assembly with extension ".config".</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.NUnit2.Tasks.NUnit2Task">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="test" type="nant:NAnt.NUnit2.Types.NUnit2Test" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Tests to run.

Represents a test element of an 'nunit2' task. </xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="formatter" type="nant:NAnt.NUnit.Types.FormatterElement" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Formatters to output results of unit tests.

Represents the FormatterElement of the NUnit task.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="haltonfailure" use="optional">
			<xs:annotation>
				<xs:documentation>Stop the test run if a test fails. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.SourceControl.Tasks.ChangeLogTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.SourceControl.Types.CvsFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Used to specify the version control system (VCS) files that are going to be acted on.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="xmlfile" use="required">
			<xs:annotation>
				<xs:documentation>Name of the xml file that will contain the cvs log information.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="start" use="required">
			<xs:annotation>
				<xs:documentation>The earliest change to use in the cvs log command.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="end" use="required">
			<xs:annotation>
				<xs:documentation>The latest date to use in the cvs log command.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsroot" use="optional">
			<xs:annotation>
				<xs:documentation> The cvs root variable has the following components:

[protocol]:[username]@[servername]:[server path]

    * protocol: ext, pserver, ssh (sharpcvslib); if you are not using sharpcvslib consult your cvs documentation.
    * username: [username]
    * servername: cvs.sourceforge.net
    * server path: /cvsroot/nant

If the cvsroot is not specified then the directory specified by the destination attribute is searched for CVS\Root. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsfullpath" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cvs binary used. The cvs tasks will attempt to "guess" the location of your cvs binary based on your path. If the task is unable to resolve the location, or resolves it incorrectly this can be used to manually specify the path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="module" use="optional">
			<xs:annotation>
				<xs:documentation>The module to perform an operation on.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsrsh" use="optional">
			<xs:annotation>
				<xs:documentation>The executable to use for ssh communication.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="quiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be supressed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="reallyquiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be stopped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readonly" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read only mode. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readwrite" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read/write mode. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="compressionlevel" use="optional">
			<xs:annotation>
				<xs:documentation>Compression level to use for all net traffic. This should be a value from 1-9.

NOTE: This is not available on sharpcvslib.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="destination" use="optional">
			<xs:annotation>
				<xs:documentation>Destination directory for the local sandbox. If destination is not specified then the current directory is used.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="password" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The password for logging in to the repository.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="passfile" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cached password file. If not specified then the environment variables are used to try and locate the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="commandline" use="optional">
			<xs:annotation>
				<xs:documentation>Command-line arguments for the program. The command line arguments are used to specify any cvs command options that are not available as attributes. These are appended after the command itself and are additive to whatever attributes are currently specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.SourceControl.Tasks.CheckoutTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.SourceControl.Types.CvsFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Used to specify the version control system (VCS) files that are going to be acted on.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="revision" use="optional">
			<xs:annotation>
				<xs:documentation>Specify the revision to checkout. This corresponds to the "sticky-tag" of the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="sticky-tag" use="optional">
			<xs:annotation>
				<xs:documentation>Sticky tag or revision to checkout.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="date" use="optional">
			<xs:annotation>
				<xs:documentation>Specify the revision date to checkout. The date specified is validated and then passed to the cvs binary in a standard format recognized by cvs.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="overridedir" use="optional">
			<xs:annotation>
				<xs:documentation>Specify a directory name to replace the module name. Valid names include any valid filename, excluding path information.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="override-directory" use="optional">
			<xs:annotation>
				<xs:documentation>Specify a directory name to replace the module name. Valid names include any valid filename, excluding path information.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsfullpath" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cvs binary used. The cvs tasks will attempt to "guess" the location of your cvs binary based on your path. If the task is unable to resolve the location, or resolves it incorrectly this can be used to manually specify the path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsroot" use="optional">
			<xs:annotation>
				<xs:documentation> The cvs root variable has the following components:

[protocol]:[username]@[servername]:[server path]

    * protocol: ext, pserver, ssh (sharpcvslib); if you are not using sharpcvslib consult your cvs documentation.
    * username: [username]
    * servername: cvs.sourceforge.net
    * server path: /cvsroot/nant</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="module" use="optional">
			<xs:annotation>
				<xs:documentation>The module to perform an operation on.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="usesharpcvslib" use="optional">
			<xs:annotation>
				<xs:documentation> true if the SharpCvsLib binaries that come bundled with NAnt should be used to perform the cvs commands, false otherwise.

You may also specify an override value for all cvs tasks instead of specifying a value for each. To do this set the property sourcecontrol.usesharpcvslib to false.
If you choose not to use SharpCvsLib to checkout from cvs you will need to include a cvs.exe binary in your path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsrsh" use="optional">
			<xs:annotation>
				<xs:documentation>The executable to use for ssh communication.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="quiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be supressed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="reallyquiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be stopped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readonly" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read only mode. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readwrite" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read/write mode. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="compressionlevel" use="optional">
			<xs:annotation>
				<xs:documentation>Compression level to use for all net traffic. This should be a value from 1-9.

NOTE: This is not available on sharpcvslib.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="destination" use="optional">
			<xs:annotation>
				<xs:documentation>Destination directory for the local sandbox. If destination is not specified then the current directory is used.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="password" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The password for logging in to the repository.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="passfile" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cached password file. If not specified then the environment variables are used to try and locate the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="commandline" use="optional">
			<xs:annotation>
				<xs:documentation>Command-line arguments for the program. The command line arguments are used to specify any cvs command options that are not available as attributes. These are appended after the command itself and are additive to whatever attributes are currently specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.SourceControl.Tasks.CvsPass">
		<xs:attribute name="password" use="required">
			<xs:annotation>
				<xs:documentation>Password to append or update to the .cvspass file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="passfile" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the .cvspass file. The default is ~/.cvspass.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsroot" use="optional">
			<xs:annotation>
				<xs:documentation>The repository root string.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.SourceControl.Tasks.CvsTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.SourceControl.Types.CvsFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Used to specify the version control system (VCS) files that are going to be acted on.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="command" use="required">
			<xs:annotation>
				<xs:documentation>The cvs command to execute.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsfullpath" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cvs binary used. The cvs tasks will attempt to "guess" the location of your cvs binary based on your path. If the task is unable to resolve the location, or resolves it incorrectly this can be used to manually specify the path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsroot" use="optional">
			<xs:annotation>
				<xs:documentation> The cvs root variable has the following components:

[protocol]:[username]@[servername]:[server path]

    * protocol: ext, pserver, ssh (sharpcvslib); if you are not using sharpcvslib consult your cvs documentation.
    * username: [username]
    * servername: cvs.sourceforge.net
    * server path: /cvsroot/nant</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="module" use="optional">
			<xs:annotation>
				<xs:documentation>The module to perform an operation on.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="usesharpcvslib" use="optional">
			<xs:annotation>
				<xs:documentation> true if the SharpCvsLib binaries that come bundled with NAnt should be used to perform the cvs commands, false otherwise.

You may also specify an override value for all cvs tasks instead of specifying a value for each. To do this set the property sourcecontrol.usesharpcvslib to false.
If you choose not to use SharpCvsLib to checkout from cvs you will need to include a cvs.exe binary in your path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsrsh" use="optional">
			<xs:annotation>
				<xs:documentation>The executable to use for ssh communication.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="quiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be supressed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="reallyquiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be stopped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readonly" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read only mode. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readwrite" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read/write mode. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="compressionlevel" use="optional">
			<xs:annotation>
				<xs:documentation>Compression level to use for all net traffic. This should be a value from 1-9.

NOTE: This is not available on sharpcvslib.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="destination" use="optional">
			<xs:annotation>
				<xs:documentation>Destination directory for the local sandbox. If destination is not specified then the current directory is used.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="password" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The password for logging in to the repository.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="passfile" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cached password file. If not specified then the environment variables are used to try and locate the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="commandline" use="optional">
			<xs:annotation>
				<xs:documentation>Command-line arguments for the program. The command line arguments are used to specify any cvs command options that are not available as attributes. These are appended after the command itself and are additive to whatever attributes are currently specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.SourceControl.Tasks.ExportTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.SourceControl.Types.CvsFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Used to specify the version control system (VCS) files that are going to be acted on.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="no-shortening" use="optional">
			<xs:annotation>
				<xs:documentation>No shortening. Do not shorten module paths if -d specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="force-head" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether the head revision should be used if the revison specified by revision or the date tags are not found. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="recursive" use="optional">
			<xs:annotation>
				<xs:documentation>If a directory is specified indicates whether sub-directories should also be processed.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="revision" use="optional">
			<xs:annotation>
				<xs:documentation>Specify the revision to update the file to. This corresponds to the "sticky-tag" of the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="date" use="optional">
			<xs:annotation>
				<xs:documentation>Specify the revision date to update to. The version of the file that existed at the date specified is retrieved.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="overridedir" use="optional">
			<xs:annotation>
				<xs:documentation>Specify a directory name to replace the module name. Valid names include any valid filename, excluding path information.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsfullpath" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cvs binary used. The cvs tasks will attempt to "guess" the location of your cvs binary based on your path. If the task is unable to resolve the location, or resolves it incorrectly this can be used to manually specify the path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsroot" use="optional">
			<xs:annotation>
				<xs:documentation> The cvs root variable has the following components:

[protocol]:[username]@[servername]:[server path]

    * protocol: ext, pserver, ssh (sharpcvslib); if you are not using sharpcvslib consult your cvs documentation.
    * username: [username]
    * servername: cvs.sourceforge.net
    * server path: /cvsroot/nant</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="module" use="optional">
			<xs:annotation>
				<xs:documentation>The module to perform an operation on.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="usesharpcvslib" use="optional">
			<xs:annotation>
				<xs:documentation> true if the SharpCvsLib binaries that come bundled with NAnt should be used to perform the cvs commands, false otherwise.

You may also specify an override value for all cvs tasks instead of specifying a value for each. To do this set the property sourcecontrol.usesharpcvslib to false.
If you choose not to use SharpCvsLib to checkout from cvs you will need to include a cvs.exe binary in your path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsrsh" use="optional">
			<xs:annotation>
				<xs:documentation>The executable to use for ssh communication.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="quiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be supressed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="reallyquiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be stopped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readonly" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read only mode. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readwrite" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read/write mode. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="compressionlevel" use="optional">
			<xs:annotation>
				<xs:documentation>Compression level to use for all net traffic. This should be a value from 1-9.

NOTE: This is not available on sharpcvslib.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="destination" use="optional">
			<xs:annotation>
				<xs:documentation>Destination directory for the local sandbox. If destination is not specified then the current directory is used.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="password" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The password for logging in to the repository.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="passfile" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cached password file. If not specified then the environment variables are used to try and locate the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="commandline" use="optional">
			<xs:annotation>
				<xs:documentation>Command-line arguments for the program. The command line arguments are used to specify any cvs command options that are not available as attributes. These are appended after the command itself and are additive to whatever attributes are currently specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.SourceControl.Tasks.RTagTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.SourceControl.Types.CvsFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Used to specify the version control system (VCS) files that are going to be acted on.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="tag" use="required">
			<xs:annotation>
				<xs:documentation>The name of the tag to assign or remove.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="remove" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether the tag specified in tag should be removed or not.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="move-if-exists" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether the tag specified in tag should be moved to the current file revision. If the tag does not exist then it is created.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="recursive" use="optional">
			<xs:annotation>
				<xs:documentation>If a directory is specified indicates whether sub-directories should also be processed.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="act-on-tag" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates the repository tag that is acted on for the tag command. Note if move-if-exists is true then the tag specified is moved to the revision of the file on the HEAD of the branch specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="act-on-date" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates the revision date of the file that the tag should be applied to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="force-head" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether the head revision should be used if the act-on-tag or the act-on-date tags are not found.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsfullpath" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cvs binary used. The cvs tasks will attempt to "guess" the location of your cvs binary based on your path. If the task is unable to resolve the location, or resolves it incorrectly this can be used to manually specify the path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsroot" use="optional">
			<xs:annotation>
				<xs:documentation> The cvs root variable has the following components:

[protocol]:[username]@[servername]:[server path]

    * protocol: ext, pserver, ssh (sharpcvslib); if you are not using sharpcvslib consult your cvs documentation.
    * username: [username]
    * servername: cvs.sourceforge.net
    * server path: /cvsroot/nant</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="module" use="optional">
			<xs:annotation>
				<xs:documentation>The module to perform an operation on.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="usesharpcvslib" use="optional">
			<xs:annotation>
				<xs:documentation> true if the SharpCvsLib binaries that come bundled with NAnt should be used to perform the cvs commands, false otherwise.

You may also specify an override value for all cvs tasks instead of specifying a value for each. To do this set the property sourcecontrol.usesharpcvslib to false.
If you choose not to use SharpCvsLib to checkout from cvs you will need to include a cvs.exe binary in your path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsrsh" use="optional">
			<xs:annotation>
				<xs:documentation>The executable to use for ssh communication.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="quiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be supressed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="reallyquiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be stopped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readonly" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read only mode. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readwrite" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read/write mode. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="compressionlevel" use="optional">
			<xs:annotation>
				<xs:documentation>Compression level to use for all net traffic. This should be a value from 1-9.

NOTE: This is not available on sharpcvslib.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="destination" use="optional">
			<xs:annotation>
				<xs:documentation>Destination directory for the local sandbox. If destination is not specified then the current directory is used.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="password" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The password for logging in to the repository.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="passfile" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cached password file. If not specified then the environment variables are used to try and locate the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="commandline" use="optional">
			<xs:annotation>
				<xs:documentation>Command-line arguments for the program. The command line arguments are used to specify any cvs command options that are not available as attributes. These are appended after the command itself and are additive to whatever attributes are currently specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.SourceControl.Tasks.TagTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.SourceControl.Types.CvsFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Used to specify the version control system (VCS) files that are going to be acted on.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="tag" use="required">
			<xs:annotation>
				<xs:documentation>The name of the tag to assign or remove.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="remove" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether the tag specified in tag should be removed or not.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="move-if-exists" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether the tag specified in tag should be moved to the current file revision. If the tag does not exist then it is created.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="recursive" use="optional">
			<xs:annotation>
				<xs:documentation>If a directory is specified indicates whether sub-directories should also be processed.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="act-on-tag" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates the repository tag that is acted on for the tag command. Note if move-if-exists is true then the tag specified is moved to the revision of the file on the HEAD of the branch specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="act-on-date" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates the revision date of the file that the tag should be applied to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="force-head" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether the head revision should be used if the revision specified by act-on-tag or the act-on-date tags are not found.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="fail-if-modified" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates whether the head revision should be used if the act-on-tag or the act-on-date tags are not found.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsfullpath" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cvs binary used. The cvs tasks will attempt to "guess" the location of your cvs binary based on your path. If the task is unable to resolve the location, or resolves it incorrectly this can be used to manually specify the path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsroot" use="optional">
			<xs:annotation>
				<xs:documentation> The cvs root variable has the following components:

[protocol]:[username]@[servername]:[server path]

    * protocol: ext, pserver, ssh (sharpcvslib); if you are not using sharpcvslib consult your cvs documentation.
    * username: [username]
    * servername: cvs.sourceforge.net
    * server path: /cvsroot/nant</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="usesharpcvslib" use="optional">
			<xs:annotation>
				<xs:documentation> true if the SharpCvsLib binaries that come bundled with NAnt should be used to perform the cvs commands, false otherwise.

You may also specify an override value for all cvs tasks instead of specifying a value for each. To do this set the property sourcecontrol.usesharpcvslib to false.
If you choose not to use SharpCvsLib to checkout from cvs you will need to include a cvs.exe binary in your path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsrsh" use="optional">
			<xs:annotation>
				<xs:documentation>The executable to use for ssh communication.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="quiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be supressed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="reallyquiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be stopped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readonly" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read only mode. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readwrite" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read/write mode. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="compressionlevel" use="optional">
			<xs:annotation>
				<xs:documentation>Compression level to use for all net traffic. This should be a value from 1-9.

NOTE: This is not available on sharpcvslib.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="destination" use="optional">
			<xs:annotation>
				<xs:documentation>Destination directory for the local sandbox. If destination is not specified then the current directory is used.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="password" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The password for logging in to the repository.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="passfile" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cached password file. If not specified then the environment variables are used to try and locate the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="commandline" use="optional">
			<xs:annotation>
				<xs:documentation>Command-line arguments for the program. The command line arguments are used to specify any cvs command options that are not available as attributes. These are appended after the command itself and are additive to whatever attributes are currently specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.SourceControl.Tasks.UpdateTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.SourceControl.Types.CvsFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Used to specify the version control system (VCS) files that are going to be acted on.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="builddirs" use="optional">
			<xs:annotation>
				<xs:documentation>If true. new directories will be created on the local sandbox. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pruneempty" use="optional">
			<xs:annotation>
				<xs:documentation>If true empty directories copied down from the remote repository will be removed from the local sandbox. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="overwritelocal" use="optional">
			<xs:annotation>
				<xs:documentation>If true the local copy of the file will be overwritten with the copy from the remote repository. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="recursive" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies if the command should be executed recursively. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="revision" use="optional">
			<xs:annotation>
				<xs:documentation>Specify the revision to update the file to. This corresponds to the "sticky-tag" of the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="sticky-tag" use="optional">
			<xs:annotation>
				<xs:documentation>Sticky tag or revision to update the local file to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="date" use="optional">
			<xs:annotation>
				<xs:documentation>Specify the revision date to update to. The version of the file that existed at the date specified is retrieved.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsfullpath" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cvs binary used. The cvs tasks will attempt to "guess" the location of your cvs binary based on your path. If the task is unable to resolve the location, or resolves it incorrectly this can be used to manually specify the path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsroot" use="optional">
			<xs:annotation>
				<xs:documentation> The cvs root variable has the following components:

[protocol]:[username]@[servername]:[server path]

    * protocol: ext, pserver, ssh (sharpcvslib); if you are not using sharpcvslib consult your cvs documentation.
    * username: [username]
    * servername: cvs.sourceforge.net
    * server path: /cvsroot/nant</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="module" use="optional">
			<xs:annotation>
				<xs:documentation>The module to perform an operation on.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="usesharpcvslib" use="optional">
			<xs:annotation>
				<xs:documentation> true if the SharpCvsLib binaries that come bundled with NAnt should be used to perform the cvs commands, false otherwise.

You may also specify an override value for all cvs tasks instead of specifying a value for each. To do this set the property sourcecontrol.usesharpcvslib to false.
If you choose not to use SharpCvsLib to checkout from cvs you will need to include a cvs.exe binary in your path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cvsrsh" use="optional">
			<xs:annotation>
				<xs:documentation>The executable to use for ssh communication.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="quiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be supressed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="reallyquiet" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the output from the cvs command should be stopped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readonly" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read only mode. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readwrite" use="optional">
			<xs:annotation>
				<xs:documentation>true if the sandbox files should be checked out in read/write mode. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="compressionlevel" use="optional">
			<xs:annotation>
				<xs:documentation>Compression level to use for all net traffic. This should be a value from 1-9.

NOTE: This is not available on sharpcvslib.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="destination" use="optional">
			<xs:annotation>
				<xs:documentation>Destination directory for the local sandbox. If destination is not specified then the current directory is used.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="password" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The password for logging in to the repository.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="passfile" use="optional">
			<xs:annotation>
				<xs:documentation>The full path to the cached password file. If not specified then the environment variables are used to try and locate the file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="commandline" use="optional">
			<xs:annotation>
				<xs:documentation>Command-line arguments for the program. The command line arguments are used to specify any cvs command options that are not available as attributes. These are appended after the command itself and are additive to whatever attributes are currently specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.VisualCpp.Tasks.ClTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="sources" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The list of files to compile.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="includedirs" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The list of directories in which to search for include files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="metadataincludedirs" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Directories that the compiler will search to resolve file references passed to the #using directive</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="forcedusingfiles" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies metadata files to reference in this compilation as an alternative to passing a file name to #using in source code.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="defines" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Macro definitions to pass to cl.exe. Each entry will generate a /D</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="define" type="nant:NAnt.Core.Types.Option">
							<xs:annotation>
								<xs:documentation>Represents an option.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="undefines" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Macro undefines (/U) to pass to cl.exe.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="undefine" type="nant:NAnt.Core.Types.Option">
							<xs:annotation>
								<xs:documentation>Represents an option.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="outputdir" use="required">
			<xs:annotation>
				<xs:documentation>Directory where all output files are placed.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pchfile" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the path and/or name of the generated precompiled header file - given either relative to outputdir or as an absolute path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pchthroughfile" use="optional">
			<xs:annotation>
				<xs:documentation>The path of the boundary file when generating/using the specified pchfile. If a precompiled header file is not specified then this attribute is ignored.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pchmode" use="optional">
			<xs:annotation>
				<xs:documentation>The mode in which the specified pchfile (if any) is used. The default is Use.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="managedextensions" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether Managed Extensions for C++ should be enabled. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="characterset" use="optional">
			<xs:annotation>
				<xs:documentation>Tells the compiler to use the specified character set.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="options" use="optional">
			<xs:annotation>
				<xs:documentation>Options to pass to the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="objectfile" use="optional">
			<xs:annotation>
				<xs:documentation>A name to override the default object file name; can be either a file or directory name. The default is the output directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pdbfile" use="optional">
			<xs:annotation>
				<xs:documentation>A name for the compiler-generated PDB file; can be either a file or directory name. The default is the output directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.VisualCpp.Types.Symbol">
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>The name of the symbol.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the element will be processed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the element will be skipped; otherwise, processed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.VisualCpp.Types.Library">
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>The name of the library.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the element will be processed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the element will be skipped; otherwise, processed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.VisualCpp.Tasks.LibTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="sources" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The list of files to combine into the output file.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="symbols" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Symbols to add to the symbol table.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="symbol" type="nant:NAnt.VisualCpp.Types.Symbol">
							<xs:annotation>
								<xs:documentation>Represents a symbol.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ignorelibraries" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Names of default libraries to ignore.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="library" type="nant:NAnt.VisualCpp.Types.Library">
							<xs:annotation>
								<xs:documentation>Represents a library.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="libdirs" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The list of additional library directories to search.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="options" use="optional">
			<xs:annotation>
				<xs:documentation>Options to pass to the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" use="required">
			<xs:annotation>
				<xs:documentation>The output file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="moduledefinition" use="optional">
			<xs:annotation>
				<xs:documentation>The module definition file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.VisualCpp.Tasks.LinkTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="delayloaded" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specified DLLs for delay loading.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="sources" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The list of files to combine into the output file.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="libdirs" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The list of additional library directories to search.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="modules" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Link the specified modules into this assembly.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="embeddedresources" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Embed the specified resources into this assembly.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="symbols" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Symbols to add to the symbol table.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="symbol" type="nant:NAnt.VisualCpp.Types.Symbol">
							<xs:annotation>
								<xs:documentation>Represents a symbol.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ignorelibraries" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Names of libraries that you want the linker to ignore when it resolves external references.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="library" type="nant:NAnt.VisualCpp.Types.Library">
							<xs:annotation>
								<xs:documentation>Represents a library.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="options" use="optional">
			<xs:annotation>
				<xs:documentation>Options to pass to the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" use="required">
			<xs:annotation>
				<xs:documentation>The output file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pdbfile" use="optional">
			<xs:annotation>
				<xs:documentation>A user-specified name for the program database (PDB) that the linker creates. The default file name for the PDB has the base name of the output and the extension .pdb.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.VisualCpp.Tasks.McTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="options" use="optional">
			<xs:annotation>
				<xs:documentation>Options to pass to the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="headerpath" use="optional">
			<xs:annotation>
				<xs:documentation>Path to store header file. The default is the project base directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="rcpath" use="optional">
			<xs:annotation>
				<xs:documentation>Path to store RC file. The default is the project base directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="mcfile" use="required">
			<xs:annotation>
				<xs:documentation>Input filename.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.VisualCpp.Tasks.MidlTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="options" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Additional options to pass to midl.exe.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="option" type="nant:NAnt.Core.Types.Option">
							<xs:annotation>
								<xs:documentation>Represents an option.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="defines" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Macro definitions to pass to mdil.exe. Each entry will generate a /D</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="define" type="nant:NAnt.Core.Types.Option">
							<xs:annotation>
								<xs:documentation>Represents an option.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="undefines" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Macro undefines (/U) to pass to mdil.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="undefine" type="nant:NAnt.Core.Types.Option">
							<xs:annotation>
								<xs:documentation>Represents an option.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="includedirs" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The list of directories in which to search for include files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="acf" use="optional">
			<xs:annotation>
				<xs:documentation>The /acf switch allows the user to supply an explicit ACF file name. The switch also allows the use of different interface names in the IDL and ACF files.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="align" use="optional">
			<xs:annotation>
				<xs:documentation>The /align switch is functionally the same as the MIDL /Zp option and is recognized by the MIDL compiler solely for backward compatibility with MkTypLib.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="app_config" use="optional">
			<xs:annotation>
				<xs:documentation>The /app_config switch selects application-configuration mode, which allows you to use some ACF keywords in the IDL file. With this MIDL compiler switch, you can omit the ACF and specify an interface in a single IDL file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="char" use="optional">
			<xs:annotation>
				<xs:documentation>The /char switch helps to ensure that the MIDL compiler and C compiler operate together correctly for all char and small types.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="client" use="optional">
			<xs:annotation>
				<xs:documentation>The /client switch directs the MIDL compiler to generate client-side C source files for an RPC interface.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cstub" use="optional">
			<xs:annotation>
				<xs:documentation>The /cstub switch specifies the name of the client stub file for an RPC interface.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dlldata" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the file name for the generated dlldata file for a proxy DLL. The default file name Dlldata.c is used if dlldata is not specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="env" use="optional">
			<xs:annotation>
				<xs:documentation>The /env switch selects the environment in which the application runs.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Oi" use="optional">
			<xs:annotation>
				<xs:documentation>The /Oi switch directs the MIDL compiler to use a fully-interpreted marshaling method. The /Oic and /Oicf switches provide additional performance enhancements.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tlb" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a file name for the type library generated by the MIDL compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="header" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the name of the header file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="iid" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the name of the interface identifier file for a COM interface, overriding the default name obtained by adding _i.c to the IDL file name.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="proxy" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the name of the interface proxy file for a COM interface.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="filename" use="required">
			<xs:annotation>
				<xs:documentation>Name of .IDL file to process.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:boolean"/>
			</xs:simpleType>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.VisualCpp.Tasks.RcTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="includedirs" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The list of directories in which to search for include files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="defines" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Macro definitions to pass to rc.exe. Each entry will generate a /d</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="define" type="nant:NAnt.Core.Types.Option">
							<xs:annotation>
								<xs:documentation>Represents an option.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="options" use="optional">
			<xs:annotation>
				<xs:documentation>Options to pass to the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" use="optional">
			<xs:annotation>
				<xs:documentation>Output file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="rcfile" use="required">
			<xs:annotation>
				<xs:documentation>The resource file to compile.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="langid" use="optional">
			<xs:annotation>
				<xs:documentation>Default language ID.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.VSNet.Types.WebMap">
		<xs:attribute name="url" use="required">
			<xs:annotation>
				<xs:documentation>Specifies the URL of the project file, or a URL fragment to match.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="path" use="required">
			<xs:annotation>
				<xs:documentation>Specifies the actual path to the project file, or the path fragment to replace.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="casesensitive" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether the mapping is case-sensitive or not.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the URL of the project file should be mapped.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the URL of the project file should not be mapped.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="Nemerle.Tools.NAntTasks.NccTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="warnaserror" type="nant:NAnt.DotNet.Types.WarningAsError" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Controls which warnings should be reported as errors.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nowarn" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies a list of warnings that you want the compiler to suppress.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="warning" type="nant:NAnt.DotNet.Types.CompilerWarning">
							<xs:annotation>
								<xs:documentation>Represents a compiler warning.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="lib" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. Additional directories to search in for assembly references.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="references" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Reference metadata from the specified assembly files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="pkg-references" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies list of packages to reference.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="package" type="nant:NAnt.DotNet.Types.Package">
							<xs:annotation>
								<xs:documentation>Specifies list of packages to reference.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="resources" type="nant:NAnt.DotNet.Types.ResourceFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Resources to embed.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="modules" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Link the specified modules into this assembly.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="sources" type="nant:NAnt.Core.Types.FileSet">
				<xs:annotation>
					<xs:documentation>The set of source files for compilation.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="doc" use="optional">
			<xs:annotation>
				<xs:documentation>The name of the XML documentation file to generate.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="nostdlib" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler not to import mscorlib.dll. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="optimize" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether the compiler should perform optimizations to the make output files smaller, faster, and more effecient. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="debug" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the type of debugging information generated by the compiler. The default is None.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" use="required">
			<xs:annotation>
				<xs:documentation>The output file created by the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="target" type="nant:NAnt.Core.Targets" use="required">
			<xs:annotation>
				<xs:documentation>Output type. Possible values are exe, winexe, library or module.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="define" use="optional">
			<xs:annotation>
				<xs:documentation>Define conditional compilation symbol(s).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="win32icon" use="optional">
			<xs:annotation>
				<xs:documentation>Icon to associate with the application.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="warnaserror" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to treat all warnings as errors. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="nowarn" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Specifies a comma-separated list of warnings that should be suppressed by the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="rebuild" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs NAnt to recompile the output file regardless of the file timestamps.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="main" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies which type contains the Main method that you want to use as the entry point into the program.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keycontainer" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the key pair container used to strongname the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keyfile" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a strong name key file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.AttribTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>All the matching files and directories in this fileset will have their attributes set.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="file" use="optional">
			<xs:annotation>
				<xs:documentation>The name of the file which will have its attributes set. This is provided as an alternate to using the task's fileset.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="archive" use="optional">
			<xs:annotation>
				<xs:documentation>Set the archive attribute. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hidden" use="optional">
			<xs:annotation>
				<xs:documentation>Set the hidden attribute. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="normal" use="optional">
			<xs:annotation>
				<xs:documentation>Set the normal file attributes. This attribute is only valid if used alone. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="readonly" use="optional">
			<xs:annotation>
				<xs:documentation>Set the read-only attribute. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="system" use="optional">
			<xs:annotation>
				<xs:documentation>Set the system attribute. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.AvailableTask">
		<xs:attribute name="resource" use="required">
			<xs:annotation>
				<xs:documentation>The resource which must be available.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" use="required">
			<xs:annotation>
				<xs:documentation>The type of resource which must be present.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="property" use="required">
			<xs:annotation>
				<xs:documentation>The property that must be set if the resource is available.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.CallTask">
		<xs:attribute name="target" use="required">
			<xs:annotation>
				<xs:documentation>NAnt target to call.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="force" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Force an execute even if the target has already been executed. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cascade" use="optional">
			<xs:annotation>
				<xs:documentation>Execute the specified targets dependencies -- even if they have been previously executed. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation> 	 Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.CopyTask">
		<xs:annotation>
			<xs:documentation>Copies a file or set of files to a new file or directory.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Used to select the files to copy. To use a 'fileset', the todir attribute must be set.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="filterchain" type="nant:NAnt.Core.Filters.FilterChain" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Chain of filters used to alter the file's content as it is copied.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="file" use="optional">
			<xs:annotation>
				<xs:documentation>The file to copy.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tofile" use="optional">
			<xs:annotation>
				<xs:documentation>The file to copy to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="todir" use="optional">
			<xs:annotation>
				<xs:documentation>The directory to copy to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="overwrite" use="optional">
			<xs:annotation>
				<xs:documentation>Overwrite existing files even if the destination files are newer. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="flatten" use="optional">
			<xs:annotation>
				<xs:documentation>Ignore directory structure of source directory, copy all files into a single directory, specified by the todir attribute. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="includeemptydirs" use="optional">
			<xs:annotation>
				<xs:documentation>Copy any empty directories included in the 'fileset'. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="inputencoding" use="optional">
			<xs:annotation>
				<xs:documentation>The encoding to use when reading files. The default is the system's current ANSI code page.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="outputencoding" use="optional">
			<xs:annotation>
				<xs:documentation>The encoding to use when writing the files. The default is the encoding of the input file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.DeleteTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>All the files in the file set will be deleted.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="file" use="optional">
			<xs:annotation>
				<xs:documentation>The file to delete.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dir" use="optional">
			<xs:annotation>
				<xs:documentation>The directory to delete.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="includeemptydirs" use="optional">
			<xs:annotation>
				<xs:documentation>Remove any empty directories included in the 'fileset'. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Controls whether to show the name of each deleted file or directory. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.DescriptionTask">
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.EchoTask">
		<xs:annotation>
			<xs:documentation>Writes a message to the build log or a specified file.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="message" use="optional">
			<xs:annotation>
				<xs:documentation>The message to output.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="file" use="optional">
			<xs:annotation>
				<xs:documentation>The file to write the message to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="append" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the 'echo' task should append to the file, or overwrite it. By default, the file will be overwritten.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="level" use="optional">
			<xs:annotation>
				<xs:documentation>The logging level with which the message should be output. The default is Info.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.EnvironmentVariable">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="path" type="nant:NAnt.Core.Types.PathSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Sets a single environment variable and treats it like a PATH - ensures the right separator for the local platform is used.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>The name of the environment variable.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value" use="optional">
			<xs:annotation>
				<xs:documentation>The literal value for the environment variable.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="file" use="optional">
			<xs:annotation>
				<xs:documentation>The value for a file-based environment variable. NAnt will convert it to an absolute filename.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dir" use="optional">
			<xs:annotation>
				<xs:documentation>The value for a directory-based environment variable. NAnt will convert it to an absolute path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="path" use="optional">
			<xs:annotation>
				<xs:documentation>The value for a PATH like environment variable. You can use : or ; as path separators and NAnt will convert it to the platform's local conventions.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the environment variable should be passed to the external program. If true then the environment variable will be passed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the environment variable should not be passed to the external program. If false then the environment variable will be passed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.EnvironmentSet">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="option" type="nant:NAnt.Core.Types.Option" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. Environment variable to pass to a program.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="variable" type="nant:NAnt.Core.Types.EnvironmentVariable" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Environment variable to pass to a program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.ExecTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="environment" type="nant:NAnt.Core.Types.EnvironmentSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Environment variables to pass to the program.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="program" use="required">
			<xs:annotation>
				<xs:documentation>The program to execute without command arguments.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="commandline" use="optional">
			<xs:annotation>
				<xs:documentation>The command-line arguments for the program.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="workingdir" use="optional">
			<xs:annotation>
				<xs:documentation>The directory in which the command will be executed.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="resultproperty" use="optional">
			<xs:annotation>
				<xs:documentation>The name of a property in which the exit code of the program should be stored. Only of interest if failonerror is false.

If the exit code of the program is "-1000" then the program could not be started, or did not exit (in time). </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="useruntimeengine" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether the external program should be executed using a runtime engine, if configured. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="basedir" use="optional">
			<xs:annotation>
				<xs:documentation>The directory the program is in.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output" use="optional">
			<xs:annotation>
				<xs:documentation>The file to which the standard output will be redirected.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="append" use="optional">
			<xs:annotation>
				<xs:documentation>Gets or sets a value indicating whether output should be appended to the output file. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.FailTask">
		<xs:attribute name="message" use="optional">
			<xs:annotation>
				<xs:documentation>A message giving further information on why the build exited.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.GetTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="proxy" type="nant:NAnt.Core.Types.Proxy" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The network proxy to use to access the Internet resource.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="credentials" type="nant:NAnt.Core.Types.Credential" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The network credentials used for authenticating the request with the Internet resource.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="certificates" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The security certificates to associate with the request.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="src" use="required">
			<xs:annotation>
				<xs:documentation>The URL from which to retrieve a file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dest" use="required">
			<xs:annotation>
				<xs:documentation>The file where to store the retrieved file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="httpproxy" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. If inside a firewall, proxy server/port information Format: {proxy server name}:{port number} Example: proxy.mycompany.com:8080</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ignoreerrors" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Log errors but don't treat as fatal. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="usetimestamp" use="optional">
			<xs:annotation>
				<xs:documentation>Conditionally download a file based on the timestamp of the local copy. HTTP only. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The length of time, in milliseconds, until the request times out. The default is 100000 milliseconds.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.IfTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="comparefiles" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The 'fileset' that contains the comparison files for the uptodatefile(s) check.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="uptodatefiles" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The 'fileset' that contains the uptodate files for the comparefile(s) check.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="updateAssemblyVersion" type="nant:Boo.NAnt.UpdateAssemblyVersionTask"/>
				<xs:element name="insertLicense" type="nant:Boo.NAnt.InsertLicenseTask"/>
				<xs:element name="booc" type="nant:Boo.NAnt.BoocTask">
					<xs:annotation>
						<xs:documentation>Compiles boo programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="boo" type="nant:Boo.NAnt.BooTask">
					<xs:annotation>
						<xs:documentation>Runs embedded boo programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="gunzip" type="nant:NAnt.Compression.Tasks.GUnzip">
					<xs:annotation>
						<xs:documentation>Expands a file packed using GZip compression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tar" type="nant:NAnt.Compression.Tasks.TarTask">
					<xs:annotation>
						<xs:documentation>Creates a tar file from the specified filesets.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="unzip" type="nant:NAnt.Compression.Tasks.UnZipTask">
					<xs:annotation>
						<xs:documentation>Extracts files from a zip file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="zip" type="nant:NAnt.Compression.Tasks.ZipTask">
					<xs:annotation>
						<xs:documentation>Creates a zip file from the specified filesets.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="asminfo" type="nant:NAnt.DotNet.Tasks.AssemblyInfoTask">
					<xs:annotation>
						<xs:documentation>Generates an AssemblyInfo file using the attributes given.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="al" type="nant:NAnt.DotNet.Tasks.AssemblyLinkerTask">
					<xs:annotation>
						<xs:documentation>Wraps al.exe, the assembly linker for Mono.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="csc" type="nant:NAnt.DotNet.Tasks.CscTask">
					<xs:annotation>
						<xs:documentation>Compiles C# programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="delay-sign" type="nant:NAnt.DotNet.Tasks.DelaySignTask">
					<xs:annotation>
						<xs:documentation>Signs delay-signed Mono Assemblies, or re-signs existing assemblies.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ilasm" type="nant:NAnt.DotNet.Tasks.IlasmTask">
					<xs:annotation>
						<xs:documentation>Compiles ILASM programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="jsc" type="nant:NAnt.DotNet.Tasks.JscTask">
					<xs:annotation>
						<xs:documentation>Compiles JScript.NET programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="license" type="nant:NAnt.DotNet.Tasks.LicenseTask">
					<xs:annotation>
						<xs:documentation>Generates a .licence file from a .licx file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ndoc" type="nant:NAnt.DotNet.Tasks.NDocTask">
					<xs:annotation>
						<xs:documentation>Runs NDoc V1.3.1 to create documentation.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="regsvcs" type="nant:NAnt.DotNet.Tasks.RegsvcsTask">
					<xs:annotation>
						<xs:documentation>Installs or removes Mono Services.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="resgen" type="nant:NAnt.DotNet.Tasks.ResGenTask">
					<xs:annotation>
						<xs:documentation>Converts files from one resource format to another.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="script" type="nant:NAnt.DotNet.Tasks.ScriptTask">
					<xs:annotation>
						<xs:documentation>Executes the code contained within the task. This code can include custom extension function definitions. Once the script task has executed those custom functions will be available for use in the buildfile.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="vbc" type="nant:NAnt.DotNet.Tasks.VbcTask">
					<xs:annotation>
						<xs:documentation>Compiles Visual Basic.NET programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="vjc" type="nant:NAnt.DotNet.Tasks.VjcTask">
					<xs:annotation>
						<xs:documentation>Compiles Visual J# programs using vjc, Microsoft's J# compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nunit" type="nant:NAnt.NUnit1.Tasks.NUnitTask">
					<xs:annotation>
						<xs:documentation>Runs tests using the NUnit V1.0 framework.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nunit2" type="nant:NAnt.NUnit2.Tasks.NUnit2Task">
					<xs:annotation>
						<xs:documentation>Runs tests using the NUnit V2.2 framework.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-changelog" type="nant:NAnt.SourceControl.Tasks.ChangeLogTask">
					<xs:annotation>
						<xs:documentation>Produces an XML report that represents the cvs changes from the given start day, to a given end date.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-checkout" type="nant:NAnt.SourceControl.Tasks.CheckoutTask">
					<xs:annotation>
						<xs:documentation>Checks out a CVS module to the required directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-pass" type="nant:NAnt.SourceControl.Tasks.CvsPass">
					<xs:annotation>
						<xs:documentation>Executes the cvs login command which appends or updates an entry to the specified .cvspass file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs" type="nant:NAnt.SourceControl.Tasks.CvsTask">
					<xs:annotation>
						<xs:documentation>Executes the cvs command specified by the command attribute.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-export" type="nant:NAnt.SourceControl.Tasks.ExportTask">
					<xs:annotation>
						<xs:documentation>Exports a cvs module in preperation for a release (i.e. the CVS version folders are not exported).</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-rtag" type="nant:NAnt.SourceControl.Tasks.RTagTask">
					<xs:annotation>
						<xs:documentation>Tags all sources in the remote repository with a given tag.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-tag" type="nant:NAnt.SourceControl.Tasks.TagTask">
					<xs:annotation>
						<xs:documentation>Tags all local sources with the specified tag.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-update" type="nant:NAnt.SourceControl.Tasks.UpdateTask">
					<xs:annotation>
						<xs:documentation>Updates a CVS module in a local working directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cl" type="nant:NAnt.VisualCpp.Tasks.ClTask">
					<xs:annotation>
						<xs:documentation>Compiles C/C++ programs using cl.exe, Microsoft's C/C++ compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="lib" type="nant:NAnt.VisualCpp.Tasks.LibTask">
					<xs:annotation>
						<xs:documentation>Run lib.exe, Microsoft's Library Manager.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="link" type="nant:NAnt.VisualCpp.Tasks.LinkTask">
					<xs:annotation>
						<xs:documentation>Links files using link.exe, Microsoft's Incremental Linker.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mc" type="nant:NAnt.VisualCpp.Tasks.McTask">
					<xs:annotation>
						<xs:documentation>Compiles messages using mc.exe, Microsoft's Win32 message compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="midl" type="nant:NAnt.VisualCpp.Tasks.MidlTask">
					<xs:annotation>
						<xs:documentation>This tasks allows you to run MIDL.exe.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="rc" type="nant:NAnt.VisualCpp.Tasks.RcTask">
					<xs:annotation>
						<xs:documentation>Compiles resources using rc.exe, Microsoft's Win32 resource compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ncc" type="nant:Nemerle.Tools.NAntTasks.NccTask">
					<xs:annotation>
						<xs:documentation>Compiles nemerle programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="attrib" type="nant:NAnt.Core.Tasks.AttribTask">
					<xs:annotation>
						<xs:documentation>Changes the file attributes of a file or set of files and directories.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="available" type="nant:NAnt.Core.Tasks.AvailableTask">
					<xs:annotation>
						<xs:documentation>(Deprecated) Checks if a resource is available at runtime.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="call" type="nant:NAnt.Core.Tasks.CallTask">
					<xs:annotation>
						<xs:documentation>Calls a NAnt target in the current project.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="copy" type="nant:NAnt.Core.Tasks.CopyTask">
					<xs:annotation>
						<xs:documentation>Copies a file or set of files to a new file or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="delete" type="nant:NAnt.Core.Tasks.DeleteTask">
					<xs:annotation>
						<xs:documentation>Deletes a file, fileset or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="description" type="nant:NAnt.Core.Tasks.DescriptionTask">
					<xs:annotation>
						<xs:documentation>An empty task that allows a build file to contain a description.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="echo" type="nant:NAnt.Core.Tasks.EchoTask">
					<xs:annotation>
						<xs:documentation>Writes a message to the build log or a specified file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="exec" type="nant:NAnt.Core.Tasks.ExecTask">
					<xs:annotation>
						<xs:documentation>Executes a system command.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="fail" type="nant:NAnt.Core.Tasks.FailTask">
					<xs:annotation>
						<xs:documentation>Exits the current build by throwing a BuildException, optionally printing additional information.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="get" type="nant:NAnt.Core.Tasks.GetTask">
					<xs:annotation>
						<xs:documentation>Gets a particular file from a URL source.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="if" type="nant:NAnt.Core.Tasks.IfTask">
					<xs:annotation>
						<xs:documentation>Checks the conditional attributes and executes the children if true.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ifnot" type="nant:NAnt.Core.Tasks.IfNotTask">
					<xs:annotation>
						<xs:documentation>(Deprecated) The opposite of the if task.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="include" type="nant:NAnt.Core.Tasks.IncludeTask">
					<xs:annotation>
						<xs:documentation>Includes an external build file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="loadfile" type="nant:NAnt.Core.Tasks.LoadFileTask">
					<xs:annotation>
						<xs:documentation>Load a text file into a single property.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="loadtasks" type="nant:NAnt.Core.Tasks.LoadTasksTask">
					<xs:annotation>
						<xs:documentation>Loads tasks form a given assembly or all assemblies in a given directory or 'fileset'.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="foreach" type="nant:NAnt.Core.Tasks.LoopTask">
					<xs:annotation>
						<xs:documentation>Loops over a set of items.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mail" type="nant:NAnt.Core.Tasks.MailTask">
					<xs:annotation>
						<xs:documentation>Sends an SMTP message.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mkdir" type="nant:NAnt.Core.Tasks.MkDirTask">
					<xs:annotation>
						<xs:documentation>Creates a directory and any non-existent parent directory if necessary.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="move" type="nant:NAnt.Core.Tasks.MoveTask">
					<xs:annotation>
						<xs:documentation>Moves a file or set of files to a new file or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nantschema" type="nant:NAnt.Core.Tasks.NAntSchemaTask">
					<xs:annotation>
						<xs:documentation>Creates an XSD File for all available tasks.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nant" type="nant:NAnt.Core.Tasks.NAntTask">
					<xs:annotation>
						<xs:documentation>Runs NAnt on a supplied build file, or a set of build files.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="property" type="nant:NAnt.Core.Tasks.PropertyTask">
					<xs:annotation>
						<xs:documentation>Sets a property in the current project.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="regex" type="nant:NAnt.Core.Tasks.RegexTask">
					<xs:annotation>
						<xs:documentation>Sets project properties based on the evaluatuion of a regular expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="setenv" type="nant:NAnt.Core.Tasks.SetEnvTask">
					<xs:annotation>
						<xs:documentation>Sets an environment variable or a whole collection of them. Use an empty value attribute to clear a variable.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="sleep" type="nant:NAnt.Core.Tasks.SleepTask">
					<xs:annotation>
						<xs:documentation>A task for sleeping a specified period of time, useful when a build or deployment process requires an interval between tasks.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="style" type="nant:NAnt.Core.Tasks.StyleTask">
					<xs:annotation>
						<xs:documentation>Processes a document via XSLT.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="sysinfo" type="nant:NAnt.Core.Tasks.SysInfoTask">
					<xs:annotation>
						<xs:documentation>Sets properties with system information.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tstamp" type="nant:NAnt.Core.Tasks.TStampTask">
					<xs:annotation>
						<xs:documentation>Sets properties with the current date and time.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="touch" type="nant:NAnt.Core.Tasks.TouchTask">
					<xs:annotation>
						<xs:documentation>Touches a file or set of files -- corresponds to the Unix touch command.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="uptodate" type="nant:NAnt.Core.Tasks.UpToDateTask">
					<xs:annotation>
						<xs:documentation>Check modification dates on groups of files.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="xmlpeek" type="nant:NAnt.Core.Tasks.XmlPeekTask">
					<xs:annotation>
						<xs:documentation>Extracts text from an XML file at the location specified by an XPath expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="xmlpoke" type="nant:NAnt.Core.Tasks.XmlPokeTask">
					<xs:annotation>
						<xs:documentation>Replaces text in an XML file at the location specified by an XPath expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
				<xs:any namespace="##local" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="uptodatefile" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The file to compare if uptodate.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="comparefile" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The file to check against for the uptodate file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="propertytrue" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Used to test whether a property is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="propertyexists" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Used to test whether a property exists.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="targetexists" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Used to test whether a target exists.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="test" use="optional">
			<xs:annotation>
				<xs:documentation>Used to test arbitrary boolean expression.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.IfNotTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="comparefiles" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The 'fileset' that contains the comparison files for the uptodatefile(s) check.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="uptodatefiles" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. The 'fileset' that contains the uptodate files for the comparefile(s) check.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="updateAssemblyVersion" type="nant:Boo.NAnt.UpdateAssemblyVersionTask"/>
				<xs:element name="insertLicense" type="nant:Boo.NAnt.InsertLicenseTask"/>
				<xs:element name="booc" type="nant:Boo.NAnt.BoocTask">
					<xs:annotation>
						<xs:documentation>Compiles boo programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="boo" type="nant:Boo.NAnt.BooTask">
					<xs:annotation>
						<xs:documentation>Runs embedded boo programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="gunzip" type="nant:NAnt.Compression.Tasks.GUnzip">
					<xs:annotation>
						<xs:documentation>Expands a file packed using GZip compression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tar" type="nant:NAnt.Compression.Tasks.TarTask">
					<xs:annotation>
						<xs:documentation>Creates a tar file from the specified filesets.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="unzip" type="nant:NAnt.Compression.Tasks.UnZipTask">
					<xs:annotation>
						<xs:documentation>Extracts files from a zip file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="zip" type="nant:NAnt.Compression.Tasks.ZipTask">
					<xs:annotation>
						<xs:documentation>Creates a zip file from the specified filesets.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="asminfo" type="nant:NAnt.DotNet.Tasks.AssemblyInfoTask">
					<xs:annotation>
						<xs:documentation>Generates an AssemblyInfo file using the attributes given.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="al" type="nant:NAnt.DotNet.Tasks.AssemblyLinkerTask">
					<xs:annotation>
						<xs:documentation>Wraps al.exe, the assembly linker for Mono.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="csc" type="nant:NAnt.DotNet.Tasks.CscTask">
					<xs:annotation>
						<xs:documentation>Compiles C# programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="delay-sign" type="nant:NAnt.DotNet.Tasks.DelaySignTask">
					<xs:annotation>
						<xs:documentation>Signs delay-signed Mono Assemblies, or re-signs existing assemblies.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ilasm" type="nant:NAnt.DotNet.Tasks.IlasmTask">
					<xs:annotation>
						<xs:documentation>Compiles ILASM programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="jsc" type="nant:NAnt.DotNet.Tasks.JscTask">
					<xs:annotation>
						<xs:documentation>Compiles JScript.NET programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="license" type="nant:NAnt.DotNet.Tasks.LicenseTask">
					<xs:annotation>
						<xs:documentation>Generates a .licence file from a .licx file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ndoc" type="nant:NAnt.DotNet.Tasks.NDocTask">
					<xs:annotation>
						<xs:documentation>Runs NDoc V1.3.1 to create documentation.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="regsvcs" type="nant:NAnt.DotNet.Tasks.RegsvcsTask">
					<xs:annotation>
						<xs:documentation>Installs or removes Mono Services.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="resgen" type="nant:NAnt.DotNet.Tasks.ResGenTask">
					<xs:annotation>
						<xs:documentation>Converts files from one resource format to another.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="script" type="nant:NAnt.DotNet.Tasks.ScriptTask">
					<xs:annotation>
						<xs:documentation>Executes the code contained within the task. This code can include custom extension function definitions. Once the script task has executed those custom functions will be available for use in the buildfile.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="vbc" type="nant:NAnt.DotNet.Tasks.VbcTask">
					<xs:annotation>
						<xs:documentation>Compiles Visual Basic.NET programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="vjc" type="nant:NAnt.DotNet.Tasks.VjcTask">
					<xs:annotation>
						<xs:documentation>Compiles Visual J# programs using vjc, Microsoft's J# compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nunit" type="nant:NAnt.NUnit1.Tasks.NUnitTask">
					<xs:annotation>
						<xs:documentation>Runs tests using the NUnit V1.0 framework.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nunit2" type="nant:NAnt.NUnit2.Tasks.NUnit2Task">
					<xs:annotation>
						<xs:documentation>Runs tests using the NUnit V2.2 framework.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-changelog" type="nant:NAnt.SourceControl.Tasks.ChangeLogTask">
					<xs:annotation>
						<xs:documentation>Produces an XML report that represents the cvs changes from the given start day, to a given end date.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-checkout" type="nant:NAnt.SourceControl.Tasks.CheckoutTask">
					<xs:annotation>
						<xs:documentation>Checks out a CVS module to the required directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-pass" type="nant:NAnt.SourceControl.Tasks.CvsPass">
					<xs:annotation>
						<xs:documentation>Executes the cvs login command which appends or updates an entry to the specified .cvspass file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs" type="nant:NAnt.SourceControl.Tasks.CvsTask">
					<xs:annotation>
						<xs:documentation>Executes the cvs command specified by the command attribute.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-export" type="nant:NAnt.SourceControl.Tasks.ExportTask">
					<xs:annotation>
						<xs:documentation>Exports a cvs module in preperation for a release (i.e. the CVS version folders are not exported).</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-rtag" type="nant:NAnt.SourceControl.Tasks.RTagTask">
					<xs:annotation>
						<xs:documentation>Tags all sources in the remote repository with a given tag.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-tag" type="nant:NAnt.SourceControl.Tasks.TagTask">
					<xs:annotation>
						<xs:documentation>Tags all local sources with the specified tag.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-update" type="nant:NAnt.SourceControl.Tasks.UpdateTask">
					<xs:annotation>
						<xs:documentation>Updates a CVS module in a local working directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cl" type="nant:NAnt.VisualCpp.Tasks.ClTask">
					<xs:annotation>
						<xs:documentation>Compiles C/C++ programs using cl.exe, Microsoft's C/C++ compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="lib" type="nant:NAnt.VisualCpp.Tasks.LibTask">
					<xs:annotation>
						<xs:documentation>Run lib.exe, Microsoft's Library Manager.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="link" type="nant:NAnt.VisualCpp.Tasks.LinkTask">
					<xs:annotation>
						<xs:documentation>Links files using link.exe, Microsoft's Incremental Linker.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mc" type="nant:NAnt.VisualCpp.Tasks.McTask">
					<xs:annotation>
						<xs:documentation>Compiles messages using mc.exe, Microsoft's Win32 message compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="midl" type="nant:NAnt.VisualCpp.Tasks.MidlTask">
					<xs:annotation>
						<xs:documentation>This tasks allows you to run MIDL.exe.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="rc" type="nant:NAnt.VisualCpp.Tasks.RcTask">
					<xs:annotation>
						<xs:documentation>Compiles resources using rc.exe, Microsoft's Win32 resource compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ncc" type="nant:Nemerle.Tools.NAntTasks.NccTask">
					<xs:annotation>
						<xs:documentation>Compiles nemerle programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="attrib" type="nant:NAnt.Core.Tasks.AttribTask">
					<xs:annotation>
						<xs:documentation>Changes the file attributes of a file or set of files and directories.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="available" type="nant:NAnt.Core.Tasks.AvailableTask">
					<xs:annotation>
						<xs:documentation>(Deprecated) Checks if a resource is available at runtime.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="call" type="nant:NAnt.Core.Tasks.CallTask">
					<xs:annotation>
						<xs:documentation>Calls a NAnt target in the current project.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="copy" type="nant:NAnt.Core.Tasks.CopyTask">
					<xs:annotation>
						<xs:documentation>Copies a file or set of files to a new file or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="delete" type="nant:NAnt.Core.Tasks.DeleteTask">
					<xs:annotation>
						<xs:documentation>Deletes a file, fileset or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="description" type="nant:NAnt.Core.Tasks.DescriptionTask">
					<xs:annotation>
						<xs:documentation>An empty task that allows a build file to contain a description.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="echo" type="nant:NAnt.Core.Tasks.EchoTask">
					<xs:annotation>
						<xs:documentation>Writes a message to the build log or a specified file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="exec" type="nant:NAnt.Core.Tasks.ExecTask">
					<xs:annotation>
						<xs:documentation>Executes a system command.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="fail" type="nant:NAnt.Core.Tasks.FailTask">
					<xs:annotation>
						<xs:documentation>Exits the current build by throwing a BuildException, optionally printing additional information.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="get" type="nant:NAnt.Core.Tasks.GetTask">
					<xs:annotation>
						<xs:documentation>Gets a particular file from a URL source.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="if" type="nant:NAnt.Core.Tasks.IfTask">
					<xs:annotation>
						<xs:documentation>Checks the conditional attributes and executes the children if true.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ifnot" type="nant:NAnt.Core.Tasks.IfNotTask">
					<xs:annotation>
						<xs:documentation>(Deprecated) The opposite of the if task.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="include" type="nant:NAnt.Core.Tasks.IncludeTask">
					<xs:annotation>
						<xs:documentation>Includes an external build file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="loadfile" type="nant:NAnt.Core.Tasks.LoadFileTask">
					<xs:annotation>
						<xs:documentation>Load a text file into a single property.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="loadtasks" type="nant:NAnt.Core.Tasks.LoadTasksTask">
					<xs:annotation>
						<xs:documentation>Loads tasks form a given assembly or all assemblies in a given directory or 'fileset'.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="foreach" type="nant:NAnt.Core.Tasks.LoopTask">
					<xs:annotation>
						<xs:documentation>Loops over a set of items.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mail" type="nant:NAnt.Core.Tasks.MailTask">
					<xs:annotation>
						<xs:documentation>Sends an SMTP message.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mkdir" type="nant:NAnt.Core.Tasks.MkDirTask">
					<xs:annotation>
						<xs:documentation>Creates a directory and any non-existent parent directory if necessary.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="move" type="nant:NAnt.Core.Tasks.MoveTask">
					<xs:annotation>
						<xs:documentation>Moves a file or set of files to a new file or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nantschema" type="nant:NAnt.Core.Tasks.NAntSchemaTask">
					<xs:annotation>
						<xs:documentation>Creates an XSD File for all available tasks.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nant" type="nant:NAnt.Core.Tasks.NAntTask">
					<xs:annotation>
						<xs:documentation>Runs NAnt on a supplied build file, or a set of build files.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="property" type="nant:NAnt.Core.Tasks.PropertyTask">
					<xs:annotation>
						<xs:documentation>Sets a property in the current project.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="regex" type="nant:NAnt.Core.Tasks.RegexTask">
					<xs:annotation>
						<xs:documentation>Sets project properties based on the evaluatuion of a regular expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="setenv" type="nant:NAnt.Core.Tasks.SetEnvTask">
					<xs:annotation>
						<xs:documentation>Sets an environment variable or a whole collection of them. Use an empty value attribute to clear a variable.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="sleep" type="nant:NAnt.Core.Tasks.SleepTask">
					<xs:annotation>
						<xs:documentation>A task for sleeping a specified period of time, useful when a build or deployment process requires an interval between tasks.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="style" type="nant:NAnt.Core.Tasks.StyleTask">
					<xs:annotation>
						<xs:documentation>Processes a document via XSLT.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="sysinfo" type="nant:NAnt.Core.Tasks.SysInfoTask">
					<xs:annotation>
						<xs:documentation>Sets properties with system information.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tstamp" type="nant:NAnt.Core.Tasks.TStampTask">
					<xs:annotation>
						<xs:documentation>Sets properties with the current date and time.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="touch" type="nant:NAnt.Core.Tasks.TouchTask">
					<xs:annotation>
						<xs:documentation>Touches a file or set of files -- corresponds to the Unix touch command.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="uptodate" type="nant:NAnt.Core.Tasks.UpToDateTask">
					<xs:annotation>
						<xs:documentation>Check modification dates on groups of files.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="xmlpeek" type="nant:NAnt.Core.Tasks.XmlPeekTask">
					<xs:annotation>
						<xs:documentation>Extracts text from an XML file at the location specified by an XPath expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="xmlpoke" type="nant:NAnt.Core.Tasks.XmlPokeTask">
					<xs:annotation>
						<xs:documentation>Replaces text in an XML file at the location specified by an XPath expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
				<xs:any namespace="##local" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="uptodatefile" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The file to compare if uptodate.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="comparefile" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. The file to check against for the uptodate file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="propertytrue" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Used to test whether a property is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="propertyexists" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Used to test whether a property exists.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="targetexists" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Used to test whether a target exists.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="test" use="optional">
			<xs:annotation>
				<xs:documentation>Used to test arbitrary boolean expression.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.IncludeTask">
		<xs:attribute name="buildfile" use="required">
			<xs:annotation>
				<xs:documentation>Build file to include.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.LoadFileTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="filterchain" type="nant:NAnt.Core.Filters.FilterChain" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The filterchain definition to use.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="file" use="required">
			<xs:annotation>
				<xs:documentation>The file to load.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="property" use="required">
			<xs:annotation>
				<xs:documentation>The name of the property to save the content to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="encoding" use="optional">
			<xs:annotation>
				<xs:documentation>The encoding to use when loading the file. The default is the encoding associated with the system's current ANSI code page.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.LoadTasksTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Used to select which directories or individual assemblies to scan.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="assembly" use="optional">
			<xs:annotation>
				<xs:documentation>An assembly to load tasks from.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="path" use="optional">
			<xs:annotation>
				<xs:documentation>A directory to scan for task assemblies.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.InElement">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="items" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>A fileset with the source of the iteration.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.LoopTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="in" type="nant:NAnt.Core.Tasks.InElement" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Stuff to operate in. Just like the in attribute, but supports more complicated things like a 'fileset' and such.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="do" type="nant:NAnt.Core.TaskContainer" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Tasks to execute for each matching item.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="updateAssemblyVersion" type="nant:Boo.NAnt.UpdateAssemblyVersionTask"/>
				<xs:element name="insertLicense" type="nant:Boo.NAnt.InsertLicenseTask"/>
				<xs:element name="booc" type="nant:Boo.NAnt.BoocTask">
					<xs:annotation>
						<xs:documentation>Compiles boo programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="boo" type="nant:Boo.NAnt.BooTask">
					<xs:annotation>
						<xs:documentation>Runs embedded boo programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="gunzip" type="nant:NAnt.Compression.Tasks.GUnzip">
					<xs:annotation>
						<xs:documentation>Expands a file packed using GZip compression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tar" type="nant:NAnt.Compression.Tasks.TarTask">
					<xs:annotation>
						<xs:documentation>Creates a tar file from the specified filesets.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="unzip" type="nant:NAnt.Compression.Tasks.UnZipTask">
					<xs:annotation>
						<xs:documentation>Extracts files from a zip file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="zip" type="nant:NAnt.Compression.Tasks.ZipTask">
					<xs:annotation>
						<xs:documentation>Creates a zip file from the specified filesets.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="asminfo" type="nant:NAnt.DotNet.Tasks.AssemblyInfoTask">
					<xs:annotation>
						<xs:documentation>Generates an AssemblyInfo file using the attributes given.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="al" type="nant:NAnt.DotNet.Tasks.AssemblyLinkerTask">
					<xs:annotation>
						<xs:documentation>Wraps al.exe, the assembly linker for Mono.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="csc" type="nant:NAnt.DotNet.Tasks.CscTask">
					<xs:annotation>
						<xs:documentation>Compiles C# programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="delay-sign" type="nant:NAnt.DotNet.Tasks.DelaySignTask">
					<xs:annotation>
						<xs:documentation>Signs delay-signed Mono Assemblies, or re-signs existing assemblies.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ilasm" type="nant:NAnt.DotNet.Tasks.IlasmTask">
					<xs:annotation>
						<xs:documentation>Compiles ILASM programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="jsc" type="nant:NAnt.DotNet.Tasks.JscTask">
					<xs:annotation>
						<xs:documentation>Compiles JScript.NET programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="license" type="nant:NAnt.DotNet.Tasks.LicenseTask">
					<xs:annotation>
						<xs:documentation>Generates a .licence file from a .licx file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ndoc" type="nant:NAnt.DotNet.Tasks.NDocTask">
					<xs:annotation>
						<xs:documentation>Runs NDoc V1.3.1 to create documentation.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="regsvcs" type="nant:NAnt.DotNet.Tasks.RegsvcsTask">
					<xs:annotation>
						<xs:documentation>Installs or removes Mono Services.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="resgen" type="nant:NAnt.DotNet.Tasks.ResGenTask">
					<xs:annotation>
						<xs:documentation>Converts files from one resource format to another.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="script" type="nant:NAnt.DotNet.Tasks.ScriptTask">
					<xs:annotation>
						<xs:documentation>Executes the code contained within the task. This code can include custom extension function definitions. Once the script task has executed those custom functions will be available for use in the buildfile.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="vbc" type="nant:NAnt.DotNet.Tasks.VbcTask">
					<xs:annotation>
						<xs:documentation>Compiles Visual Basic.NET programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="vjc" type="nant:NAnt.DotNet.Tasks.VjcTask">
					<xs:annotation>
						<xs:documentation>Compiles Visual J# programs using vjc, Microsoft's J# compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nunit" type="nant:NAnt.NUnit1.Tasks.NUnitTask">
					<xs:annotation>
						<xs:documentation>Runs tests using the NUnit V1.0 framework.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nunit2" type="nant:NAnt.NUnit2.Tasks.NUnit2Task">
					<xs:annotation>
						<xs:documentation>Runs tests using the NUnit V2.2 framework.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-changelog" type="nant:NAnt.SourceControl.Tasks.ChangeLogTask">
					<xs:annotation>
						<xs:documentation>Produces an XML report that represents the cvs changes from the given start day, to a given end date.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-checkout" type="nant:NAnt.SourceControl.Tasks.CheckoutTask">
					<xs:annotation>
						<xs:documentation>Checks out a CVS module to the required directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-pass" type="nant:NAnt.SourceControl.Tasks.CvsPass">
					<xs:annotation>
						<xs:documentation>Executes the cvs login command which appends or updates an entry to the specified .cvspass file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs" type="nant:NAnt.SourceControl.Tasks.CvsTask">
					<xs:annotation>
						<xs:documentation>Executes the cvs command specified by the command attribute.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-export" type="nant:NAnt.SourceControl.Tasks.ExportTask">
					<xs:annotation>
						<xs:documentation>Exports a cvs module in preperation for a release (i.e. the CVS version folders are not exported).</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-rtag" type="nant:NAnt.SourceControl.Tasks.RTagTask">
					<xs:annotation>
						<xs:documentation>Tags all sources in the remote repository with a given tag.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-tag" type="nant:NAnt.SourceControl.Tasks.TagTask">
					<xs:annotation>
						<xs:documentation>Tags all local sources with the specified tag.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-update" type="nant:NAnt.SourceControl.Tasks.UpdateTask">
					<xs:annotation>
						<xs:documentation>Updates a CVS module in a local working directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cl" type="nant:NAnt.VisualCpp.Tasks.ClTask">
					<xs:annotation>
						<xs:documentation>Compiles C/C++ programs using cl.exe, Microsoft's C/C++ compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="lib" type="nant:NAnt.VisualCpp.Tasks.LibTask">
					<xs:annotation>
						<xs:documentation>Run lib.exe, Microsoft's Library Manager.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="link" type="nant:NAnt.VisualCpp.Tasks.LinkTask">
					<xs:annotation>
						<xs:documentation>Links files using link.exe, Microsoft's Incremental Linker.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mc" type="nant:NAnt.VisualCpp.Tasks.McTask">
					<xs:annotation>
						<xs:documentation>Compiles messages using mc.exe, Microsoft's Win32 message compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="midl" type="nant:NAnt.VisualCpp.Tasks.MidlTask">
					<xs:annotation>
						<xs:documentation>This tasks allows you to run MIDL.exe.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="rc" type="nant:NAnt.VisualCpp.Tasks.RcTask">
					<xs:annotation>
						<xs:documentation>Compiles resources using rc.exe, Microsoft's Win32 resource compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ncc" type="nant:Nemerle.Tools.NAntTasks.NccTask">
					<xs:annotation>
						<xs:documentation>Compiles nemerle programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="attrib" type="nant:NAnt.Core.Tasks.AttribTask">
					<xs:annotation>
						<xs:documentation>Changes the file attributes of a file or set of files and directories.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="available" type="nant:NAnt.Core.Tasks.AvailableTask">
					<xs:annotation>
						<xs:documentation>(Deprecated) Checks if a resource is available at runtime.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="call" type="nant:NAnt.Core.Tasks.CallTask">
					<xs:annotation>
						<xs:documentation>Calls a NAnt target in the current project.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="copy" type="nant:NAnt.Core.Tasks.CopyTask">
					<xs:annotation>
						<xs:documentation>Copies a file or set of files to a new file or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="delete" type="nant:NAnt.Core.Tasks.DeleteTask">
					<xs:annotation>
						<xs:documentation>Deletes a file, fileset or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="description" type="nant:NAnt.Core.Tasks.DescriptionTask">
					<xs:annotation>
						<xs:documentation>An empty task that allows a build file to contain a description.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="echo" type="nant:NAnt.Core.Tasks.EchoTask">
					<xs:annotation>
						<xs:documentation>Writes a message to the build log or a specified file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="exec" type="nant:NAnt.Core.Tasks.ExecTask">
					<xs:annotation>
						<xs:documentation>Executes a system command.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="fail" type="nant:NAnt.Core.Tasks.FailTask">
					<xs:annotation>
						<xs:documentation>Exits the current build by throwing a BuildException, optionally printing additional information.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="get" type="nant:NAnt.Core.Tasks.GetTask">
					<xs:annotation>
						<xs:documentation>Gets a particular file from a URL source.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="if" type="nant:NAnt.Core.Tasks.IfTask">
					<xs:annotation>
						<xs:documentation>Checks the conditional attributes and executes the children if true.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ifnot" type="nant:NAnt.Core.Tasks.IfNotTask">
					<xs:annotation>
						<xs:documentation>(Deprecated) The opposite of the if task.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="include" type="nant:NAnt.Core.Tasks.IncludeTask">
					<xs:annotation>
						<xs:documentation>Includes an external build file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="loadfile" type="nant:NAnt.Core.Tasks.LoadFileTask">
					<xs:annotation>
						<xs:documentation>Load a text file into a single property.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="loadtasks" type="nant:NAnt.Core.Tasks.LoadTasksTask">
					<xs:annotation>
						<xs:documentation>Loads tasks form a given assembly or all assemblies in a given directory or 'fileset'.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="foreach" type="nant:NAnt.Core.Tasks.LoopTask">
					<xs:annotation>
						<xs:documentation>Loops over a set of items.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mail" type="nant:NAnt.Core.Tasks.MailTask">
					<xs:annotation>
						<xs:documentation>Sends an SMTP message.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mkdir" type="nant:NAnt.Core.Tasks.MkDirTask">
					<xs:annotation>
						<xs:documentation>Creates a directory and any non-existent parent directory if necessary.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="move" type="nant:NAnt.Core.Tasks.MoveTask">
					<xs:annotation>
						<xs:documentation>Moves a file or set of files to a new file or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nantschema" type="nant:NAnt.Core.Tasks.NAntSchemaTask">
					<xs:annotation>
						<xs:documentation>Creates an XSD File for all available tasks.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nant" type="nant:NAnt.Core.Tasks.NAntTask">
					<xs:annotation>
						<xs:documentation>Runs NAnt on a supplied build file, or a set of build files.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="property" type="nant:NAnt.Core.Tasks.PropertyTask">
					<xs:annotation>
						<xs:documentation>Sets a property in the current project.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="regex" type="nant:NAnt.Core.Tasks.RegexTask">
					<xs:annotation>
						<xs:documentation>Sets project properties based on the evaluatuion of a regular expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="setenv" type="nant:NAnt.Core.Tasks.SetEnvTask">
					<xs:annotation>
						<xs:documentation>Sets an environment variable or a whole collection of them. Use an empty value attribute to clear a variable.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="sleep" type="nant:NAnt.Core.Tasks.SleepTask">
					<xs:annotation>
						<xs:documentation>A task for sleeping a specified period of time, useful when a build or deployment process requires an interval between tasks.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="style" type="nant:NAnt.Core.Tasks.StyleTask">
					<xs:annotation>
						<xs:documentation>Processes a document via XSLT.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="sysinfo" type="nant:NAnt.Core.Tasks.SysInfoTask">
					<xs:annotation>
						<xs:documentation>Sets properties with system information.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tstamp" type="nant:NAnt.Core.Tasks.TStampTask">
					<xs:annotation>
						<xs:documentation>Sets properties with the current date and time.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="touch" type="nant:NAnt.Core.Tasks.TouchTask">
					<xs:annotation>
						<xs:documentation>Touches a file or set of files -- corresponds to the Unix touch command.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="uptodate" type="nant:NAnt.Core.Tasks.UpToDateTask">
					<xs:annotation>
						<xs:documentation>Check modification dates on groups of files.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="xmlpeek" type="nant:NAnt.Core.Tasks.XmlPeekTask">
					<xs:annotation>
						<xs:documentation>Extracts text from an XML file at the location specified by an XPath expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="xmlpoke" type="nant:NAnt.Core.Tasks.XmlPokeTask">
					<xs:annotation>
						<xs:documentation>Replaces text in an XML file at the location specified by an XPath expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
				<xs:any namespace="##local" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="property" use="required">
			<xs:annotation>
				<xs:documentation>The NAnt property name(s) that should be used for the current iterated item.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="item" use="required">
			<xs:annotation>
				<xs:documentation>The type of iteration that should be done.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="trim" use="optional">
			<xs:annotation>
				<xs:documentation>The type of whitespace trimming that should be done. The default is None.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="in" use="optional">
			<xs:annotation>
				<xs:documentation>The source of the iteration.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="delim" use="optional">
			<xs:annotation>
				<xs:documentation>The deliminator char.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.MailTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="files" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Files that are transmitted as part of the body of the email message.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="attachments" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Attachments that are transmitted with the message.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="from" use="required">
			<xs:annotation>
				<xs:documentation>Email address of sender.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tolist" use="optional">
			<xs:annotation>
				<xs:documentation>Semicolon-separated list of recipient email addresses.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cclist" use="optional">
			<xs:annotation>
				<xs:documentation>Semicolon-separated list of CC: recipient email addresses.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="bcclist" use="optional">
			<xs:annotation>
				<xs:documentation>Semicolon-separated list of BCC: recipient email addresses.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="mailhost" use="optional">
			<xs:annotation>
				<xs:documentation>Host name of mail server. The default is localhost.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="message" use="optional">
			<xs:annotation>
				<xs:documentation>Text to send in body of email message.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="subject" use="optional">
			<xs:annotation>
				<xs:documentation>Text to send in subject line of email message.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="format" use="optional">
			<xs:annotation>
				<xs:documentation>Format of the message. The default is Text.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.MkDirTask">
		<xs:annotation>
			<xs:documentation>Task to create directories.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="dir" use="required">
			<xs:annotation>
				<xs:documentation>The directory to create.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.MoveTask">
		<xs:annotation>
			<xs:documentation>Task to move files or directories.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Used to select the files to move. To use a 'fileset', the todir attribute must be set.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="filterchain" type="nant:NAnt.Core.Filters.FilterChain" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Chain of filters used to alter the file's content as it is moved.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="file" use="optional">
			<xs:annotation>
				<xs:documentation>The file to move.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tofile" use="optional">
			<xs:annotation>
				<xs:documentation>The file to move to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="todir" use="optional">
			<xs:annotation>
				<xs:documentation>The directory to move to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="flatten" use="optional">
			<xs:annotation>
				<xs:documentation>Ignore directory structure of source directory, move all files into a single directory, specified by the todir attribute. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="overwrite" use="optional">
			<xs:annotation>
				<xs:documentation>Overwrite existing files even if the destination files are newer. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="includeemptydirs" use="optional">
			<xs:annotation>
				<xs:documentation>Copy any empty directories included in the 'fileset'. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="inputencoding" use="optional">
			<xs:annotation>
				<xs:documentation>The encoding to use when reading files. The default is the system's current ANSI code page.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="outputencoding" use="optional">
			<xs:annotation>
				<xs:documentation>The encoding to use when writing the files. The default is the encoding of the input file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.NAntSchemaTask">
		<xs:attribute name="output" use="required">
			<xs:annotation>
				<xs:documentation>The name of the output file to which the XSD should be written.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="target-ns" use="optional">
			<xs:annotation>
				<xs:documentation>The target namespace for the output. Defaults to "http://tempuri.org/nant-donotuse.xsd"</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="class" use="optional">
			<xs:annotation>
				<xs:documentation>The Type for which an XSD should be created. If not specified, an XSD will be created for all available tasks.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.NAntTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="buildfiles" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Used to specify a set of build files to process.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="properties" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies a collection of properties that should be created in the executed project. Note, existing properties with identical names that are not read-only will be overwritten.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="property" type="nant:NAnt.Core.Tasks.PropertyTask">
							<xs:annotation>
								<xs:documentation> Sets a property in the current project.

Note: NAnt uses a number of predefined properties.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="buildfile" use="optional">
			<xs:annotation>
				<xs:documentation>The build file to build.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="target" use="optional">
			<xs:annotation>
				<xs:documentation>The target to execute. To specify more than one target seperate targets with a space. Targets are executed in order if possible. The default is to use target specified in the project's default attribute.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="inheritall" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether current property values should be inherited by the executed project. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="inheritrefs" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies whether all references will be copied to the new project. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.RegexTask">
		<xs:attribute name="pattern" use="required">
			<xs:annotation>
				<xs:documentation>Represents the regular expression to be evalued.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="options" use="optional">
			<xs:annotation>
				<xs:documentation>A comma separated list of options to pass to the regex engine. The default is None.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="input" use="required">
			<xs:annotation>
				<xs:documentation>Represents the input for the regular expression.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.SetEnvTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="variable" type="nant:NAnt.Core.Types.EnvironmentVariable" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Represents an environment variable.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="name" use="optional">
			<xs:annotation>
				<xs:documentation>The name of a single Environment variable to set</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value" use="optional">
			<xs:annotation>
				<xs:documentation>The literal value for the environment variable.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="file" use="optional">
			<xs:annotation>
				<xs:documentation>The value for a file-based environment variable. NAnt will convert it to an absolute filename.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="dir" use="optional">
			<xs:annotation>
				<xs:documentation>The value for a directory-based environment variable. NAnt will convert it to an absolute path.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="path" use="optional">
			<xs:annotation>
				<xs:documentation>The value for a PATH like environment variable. You can use : or ; as path separators and NAnt will convert it to the platform's local conventions.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.SleepTask">
		<xs:attribute name="hours" use="optional">
			<xs:annotation>
				<xs:documentation>Hours to add to the sleep time.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="minutes" use="optional">
			<xs:annotation>
				<xs:documentation>Minutes to add to the sleep time.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="seconds" use="optional">
			<xs:annotation>
				<xs:documentation>Seconds to add to the sleep time.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="milliseconds" use="optional">
			<xs:annotation>
				<xs:documentation>Milliseconds to add to the sleep time.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.XsltParameter">
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>The name of the XSLT parameter.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="namespaceuri" use="optional">
			<xs:annotation>
				<xs:documentation>The namespace URI to associate with the parameter.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value" use="required">
			<xs:annotation>
				<xs:documentation>The value of the XSLT parameter.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the parameter should be added to the XSLT argument list. If true then the parameter will be added; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the parameter should not be added to the XSLT argument list. If false then the parameter will be added; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.XsltExtensionObject">
		<xs:attribute name="namespaceuri" use="optional">
			<xs:annotation>
				<xs:documentation>The namespace URI to associate with the extension object.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="typename" use="required">
			<xs:annotation>
				<xs:documentation>The full type name of the XSLT extension object.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="assembly" use="required">
			<xs:annotation>
				<xs:documentation>The assembly which contains the XSLT extension object.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the extension object should be added to the XSLT argument list. If true then the extension object will be added; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the extension object should not be added to the XSLT argument list. If false then the extension object will be added; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.StyleTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="infiles" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies a group of input files to which to apply the stylesheet.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="parameters" minOccurs="0">
				<xs:annotation>
					<xs:documentation>XSLT parameters to be passed to the XSLT transformation.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="parameter" type="nant:NAnt.Core.Types.XsltParameter">
							<xs:annotation>
								<xs:documentation>Represents an XSLT parameter.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="extensionobjects" minOccurs="0">
				<xs:annotation>
					<xs:documentation>XSLT extension objects to be passed to the XSLT transformation.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="extensionobject" type="nant:NAnt.Core.Types.XsltExtensionObject">
							<xs:annotation>
								<xs:documentation>Represents an XSLT extension object. The object should have a default parameterless constructor and the return value should be one of the four basic XPath data types of number, string, Boolean or node set.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="proxy" type="nant:NAnt.Core.Types.Proxy" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The network proxy to use to access the Internet resource.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="destdir" use="optional">
			<xs:annotation>
				<xs:documentation>Directory in which to store the results. The default is the project base directory.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="extension" use="optional">
			<xs:annotation>
				<xs:documentation>Desired file extension to be used for the targets. The default is html</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="style" use="required">
			<xs:annotation>
				<xs:documentation>URI or path that points to the stylesheet to use. If given as path, it can be relative to the project's basedir or absolute.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="in" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a single XML document to be styled. Should be used with the out attribute.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="out" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the output name for the styled result from the in attribute.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.SysInfoTask">
		<xs:attribute name="prefix" use="optional">
			<xs:annotation>
				<xs:documentation>The string to prefix the property names with. The default is "sys.".</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.Formatter">
		<xs:attribute name="property" use="required">
			<xs:annotation>
				<xs:documentation>The name of the NAnt property to set.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pattern" use="required">
			<xs:annotation>
				<xs:documentation>The string pattern to use to format the property.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the formatter should be used to format the timestamp. If true then the formatter will be used; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the formatter should be not used to format the timestamp. If false then the formatter will be used; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.TStampTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="formatter" type="nant:NAnt.Core.Types.Formatter" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Set a number of additional properties with the exact same date and time</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="property" use="optional">
			<xs:annotation>
				<xs:documentation>The property to receive the date/time string in the given pattern.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pattern" use="optional">
			<xs:annotation>
				<xs:documentation>The date/time pattern to be used.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.TouchTask">
		<xs:annotation>
			<xs:documentation>Task to create files.</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Used to select files that should be touched.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="file" use="optional">
			<xs:annotation>
				<xs:documentation>The file to touch.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="millis" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the new modification time of the file(s) in milliseconds since midnight Jan 1 1970.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="datetime" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the new modification time of the file in the format MM/DD/YYYY HH:MM:SS.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.UpToDateTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="sourcefiles" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The 'fileset' that contains list of source files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="targetfiles" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The 'fileset' that contains list of target files.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="property" use="required">
			<xs:annotation>
				<xs:documentation>Property that will be set to true or false depending on the result of the date check.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Types.XmlNamespace">
		<xs:attribute name="prefix" use="required">
			<xs:annotation>
				<xs:documentation>The prefix to associate with the namespace.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="uri" use="required">
			<xs:annotation>
				<xs:documentation>The associated XML namespace URI.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the namespace should be added to the XmlNamespaceManager. If true then the namespace will be added; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates if the namespace should not be added to the XmlNamespaceManager. list. If false then the parameter will be added; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.XmlPeekTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="namespaces" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Namespace definitions to resolve prefixes in the XPath expression.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="namespace" type="nant:NAnt.Core.Types.XmlNamespace">
							<xs:annotation>
								<xs:documentation>Represents an XML namespace.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="file" use="required">
			<xs:annotation>
				<xs:documentation>The name of the file that contains the XML document that is going to be peeked at.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="nodeindex" use="optional">
			<xs:annotation>
				<xs:documentation>The index of the node that gets its text returned when the query returns multiple nodes.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="property" use="required">
			<xs:annotation>
				<xs:documentation>The property that receives the text representation of the XML inside the node returned from the XPath expression.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="xpath" use="required">
			<xs:annotation>
				<xs:documentation>The XPath expression used to select which node to read.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="NAnt.Core.Tasks.XmlPokeTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="namespaces" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Namespace definitions to resolve prefixes in the XPath expression.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="namespace" type="nant:NAnt.Core.Types.XmlNamespace">
							<xs:annotation>
								<xs:documentation>Represents an XML namespace.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="file" use="required">
			<xs:annotation>
				<xs:documentation>The name of the file that contains the XML document that is going to be poked.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="xpath" use="required">
			<xs:annotation>
				<xs:documentation>The XPath expression used to select which nodes are to be modified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value" use="required">
			<xs:annotation>
				<xs:documentation>The value that replaces the contents of the selected nodes.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="Boo.NAnt.UpdateAssemblyVersionTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.Core.Types.FileSet"/>
		</xs:sequence>
		<xs:attribute name="version" use="optional"/>
		<xs:attribute name="copyright" use="optional"/>
		<xs:attribute name="failonerror" use="optional"/>
		<xs:attribute name="verbose" use="optional"/>
		<xs:attribute name="if" use="optional"/>
		<xs:attribute name="unless" use="optional"/>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="Boo.NAnt.InsertLicenseTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="fileset" type="nant:NAnt.Core.Types.FileSet"/>
		</xs:sequence>
		<xs:attribute name="license" use="required"/>
		<xs:attribute name="failonerror" use="optional"/>
		<xs:attribute name="verbose" use="optional"/>
		<xs:attribute name="if" use="optional"/>
		<xs:attribute name="unless" use="optional"/>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="Boo.NAnt.BoocTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="warnaserror" type="nant:NAnt.DotNet.Types.WarningAsError" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Controls which warnings should be reported as errors.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nowarn" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies a list of warnings that you want the compiler to suppress.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="warning" type="nant:NAnt.DotNet.Types.CompilerWarning">
							<xs:annotation>
								<xs:documentation>Represents a compiler warning.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="lib" type="nant:NAnt.Core.Types.FileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Deprecated. Additional directories to search in for assembly references.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="references" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Assembly references.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="pkg-references" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies list of packages to reference.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="package" type="nant:NAnt.DotNet.Types.Package">
							<xs:annotation>
								<xs:documentation>Specifies list of packages to reference.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="resources" type="nant:NAnt.DotNet.Types.ResourceFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Embedded resources.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="modules" type="nant:NAnt.DotNet.Types.AssemblyFileSet" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Link the specified modules into this assembly.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="sources" type="nant:NAnt.Core.Types.FileSet">
				<xs:annotation>
					<xs:documentation>The set of source files for compilation.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="arg" type="nant:NAnt.Core.Types.Argument" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The command-line arguments for the external program.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="exename" use="optional"/>
		<xs:attribute name="useruntimeengine" use="optional"/>
		<xs:attribute name="debug" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the type of debugging information generated by the compiler. The default is None.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="true">
						<xs:annotation>
							<xs:documentation>Corresponding Enable</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="false">
						<xs:annotation>
							<xs:documentation>Corresponding None</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Enable">
						<xs:annotation>
							<xs:documentation>Enable attaching a debugger to the running program.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Full">
						<xs:annotation>
							<xs:documentation>Enable attaching a debugger to the running program.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="None">
						<xs:annotation>
							<xs:documentation>Create no debug information.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="PdbOnly">
						<xs:annotation>
							<xs:documentation>Only display assembler when the running program is attached to the debugger.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="pipeline" use="optional">
			<xs:annotation>
				<xs:documentation>AssemblyQualifiedName for the CompilerPipeline type to use. Optional.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="noconfig" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler not to use implicit references to assemblies. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="nostdlib" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler not to import mscorlib.dll. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="wsa" use="optional"/>
		<xs:attribute name="ducky" use="optional"/>
		<xs:attribute name="output" use="required">
			<xs:annotation>
				<xs:documentation>The output assembly. Required.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="target" type="nant:NAnt.Core.Targets" use="required">
			<xs:annotation>
				<xs:documentation>Output type, one of library, exe, winexe. Optional. Default: exe.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="define" use="optional">
			<xs:annotation>
				<xs:documentation>Define conditional compilation symbol(s).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="win32icon" use="optional">
			<xs:annotation>
				<xs:documentation>Icon to associate with the application.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="warnaserror" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs the compiler to treat all warnings as errors. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="nowarn" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated. Specifies a comma-separated list of warnings that should be suppressed by the compiler.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="rebuild" use="optional">
			<xs:annotation>
				<xs:documentation>Instructs NAnt to recompile the output file regardless of the file timestamps.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="main" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies which type contains the Main method that you want to use as the entry point into the program.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keycontainer" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies the key pair container used to strongname the assembly.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="keyfile" use="optional">
			<xs:annotation>
				<xs:documentation>Specifies a strong name key file.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="timeout" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum amount of time the application is allowed to execute, expressed in milliseconds. Defaults to no time-out.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="failonerror" use="optional">
			<xs:annotation>
				<xs:documentation>Determines if task failure stops the build, or is just reported. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="verbose" use="optional">
			<xs:annotation>
				<xs:documentation>Determines whether the task should report detailed build log messages. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>If true then the task will be executed; otherwise, skipped. The default is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>Opposite of if. If false then the task will be executed; otherwise, skipped. The default is false.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:complexType name="Boo.NAnt.BooTask">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element name="references" type="nant:NAnt.Core.Types.FileSet" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="src" use="optional"/>
		<xs:attribute name="pipeline" use="optional"/>
		<xs:attribute name="failonerror" use="optional"/>
		<xs:attribute name="verbose" use="optional"/>
		<xs:attribute name="if" use="optional"/>
		<xs:attribute name="unless" use="optional"/>
		<xs:anyAttribute namespace="##other" processContents="skip"/>
	</xs:complexType>
	<xs:simpleType name="NAnt.Core.Targets">
		<xs:restriction base="xs:string">
			<xs:enumeration value="exe"/>
			<xs:enumeration value="winexe"/>
			<xs:enumeration value="library"/>
			<xs:enumeration value="module"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="NAnt.Core.boolean">
		<xs:restriction base="xs:string">
			<xs:enumeration value="true">
				<xs:annotation>
					<xs:documentation/>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="false">
				<xs:annotation>
					<xs:documentation/>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="Target">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="updateAssemblyVersion" type="nant:Boo.NAnt.UpdateAssemblyVersionTask"/>
			<xs:element name="insertLicense" type="nant:Boo.NAnt.InsertLicenseTask"/>
			<xs:element name="booc" type="nant:Boo.NAnt.BoocTask">
				<xs:annotation>
					<xs:documentation>Compiles boo programs.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="boo" type="nant:Boo.NAnt.BooTask">
				<xs:annotation>
					<xs:documentation>Runs embedded boo programs.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="gunzip" type="nant:NAnt.Compression.Tasks.GUnzip">
				<xs:annotation>
					<xs:documentation>Expands a file packed using GZip compression.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="tar" type="nant:NAnt.Compression.Tasks.TarTask">
				<xs:annotation>
					<xs:documentation>Creates a tar file from the specified filesets.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="unzip" type="nant:NAnt.Compression.Tasks.UnZipTask">
				<xs:annotation>
					<xs:documentation>Extracts files from a zip file.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="zip" type="nant:NAnt.Compression.Tasks.ZipTask">
				<xs:annotation>
					<xs:documentation>Creates a zip file from the specified filesets.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="asminfo" type="nant:NAnt.DotNet.Tasks.AssemblyInfoTask">
				<xs:annotation>
					<xs:documentation>Generates an AssemblyInfo file using the attributes given.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="al" type="nant:NAnt.DotNet.Tasks.AssemblyLinkerTask">
				<xs:annotation>
					<xs:documentation>Wraps al.exe, the assembly linker for Mono.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="csc" type="nant:NAnt.DotNet.Tasks.CscTask">
				<xs:annotation>
					<xs:documentation>Compiles C# programs.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="delay-sign" type="nant:NAnt.DotNet.Tasks.DelaySignTask">
				<xs:annotation>
					<xs:documentation>Signs delay-signed Mono Assemblies, or re-signs existing assemblies.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="ilasm" type="nant:NAnt.DotNet.Tasks.IlasmTask">
				<xs:annotation>
					<xs:documentation>Compiles ILASM programs.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="jsc" type="nant:NAnt.DotNet.Tasks.JscTask">
				<xs:annotation>
					<xs:documentation>Compiles JScript.NET programs.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="license" type="nant:NAnt.DotNet.Tasks.LicenseTask">
				<xs:annotation>
					<xs:documentation>Generates a .licence file from a .licx file.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="ndoc" type="nant:NAnt.DotNet.Tasks.NDocTask">
				<xs:annotation>
					<xs:documentation>Runs NDoc V1.3.1 to create documentation.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="regsvcs" type="nant:NAnt.DotNet.Tasks.RegsvcsTask">
				<xs:annotation>
					<xs:documentation>Installs or removes Mono Services.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="resgen" type="nant:NAnt.DotNet.Tasks.ResGenTask">
				<xs:annotation>
					<xs:documentation>Converts files from one resource format to another.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="script" type="nant:NAnt.DotNet.Tasks.ScriptTask">
				<xs:annotation>
					<xs:documentation>Executes the code contained within the task. This code can include custom extension function definitions. Once the script task has executed those custom functions will be available for use in the buildfile.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="vbc" type="nant:NAnt.DotNet.Tasks.VbcTask">
				<xs:annotation>
					<xs:documentation>Compiles Visual Basic.NET programs.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="vjc" type="nant:NAnt.DotNet.Tasks.VjcTask">
				<xs:annotation>
					<xs:documentation>Compiles Visual J# programs using vjc, Microsoft's J# compiler.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nunit" type="nant:NAnt.NUnit1.Tasks.NUnitTask">
				<xs:annotation>
					<xs:documentation>Runs tests using the NUnit V1.0 framework.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nunit2" type="nant:NAnt.NUnit2.Tasks.NUnit2Task">
				<xs:annotation>
					<xs:documentation>Runs tests using the NUnit V2.2 framework.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="cvs-changelog" type="nant:NAnt.SourceControl.Tasks.ChangeLogTask">
				<xs:annotation>
					<xs:documentation>Produces an XML report that represents the cvs changes from the given start day, to a given end date.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="cvs-checkout" type="nant:NAnt.SourceControl.Tasks.CheckoutTask">
				<xs:annotation>
					<xs:documentation>Checks out a CVS module to the required directory.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="cvs-pass" type="nant:NAnt.SourceControl.Tasks.CvsPass">
				<xs:annotation>
					<xs:documentation>Executes the cvs login command which appends or updates an entry to the specified .cvspass file.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="cvs" type="nant:NAnt.SourceControl.Tasks.CvsTask">
				<xs:annotation>
					<xs:documentation>Executes the cvs command specified by the command attribute.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="cvs-export" type="nant:NAnt.SourceControl.Tasks.ExportTask">
				<xs:annotation>
					<xs:documentation>Exports a cvs module in preperation for a release (i.e. the CVS version folders are not exported).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="cvs-rtag" type="nant:NAnt.SourceControl.Tasks.RTagTask">
				<xs:annotation>
					<xs:documentation>Tags all sources in the remote repository with a given tag.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="cvs-tag" type="nant:NAnt.SourceControl.Tasks.TagTask">
				<xs:annotation>
					<xs:documentation>Tags all local sources with the specified tag.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="cvs-update" type="nant:NAnt.SourceControl.Tasks.UpdateTask">
				<xs:annotation>
					<xs:documentation>Updates a CVS module in a local working directory.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="cl" type="nant:NAnt.VisualCpp.Tasks.ClTask">
				<xs:annotation>
					<xs:documentation>Compiles C/C++ programs using cl.exe, Microsoft's C/C++ compiler.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="lib" type="nant:NAnt.VisualCpp.Tasks.LibTask">
				<xs:annotation>
					<xs:documentation>Run lib.exe, Microsoft's Library Manager.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="link" type="nant:NAnt.VisualCpp.Tasks.LinkTask">
				<xs:annotation>
					<xs:documentation>Links files using link.exe, Microsoft's Incremental Linker.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="mc" type="nant:NAnt.VisualCpp.Tasks.McTask">
				<xs:annotation>
					<xs:documentation>Compiles messages using mc.exe, Microsoft's Win32 message compiler.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="midl" type="nant:NAnt.VisualCpp.Tasks.MidlTask">
				<xs:annotation>
					<xs:documentation>This tasks allows you to run MIDL.exe.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="rc" type="nant:NAnt.VisualCpp.Tasks.RcTask">
				<xs:annotation>
					<xs:documentation>Compiles resources using rc.exe, Microsoft's Win32 resource compiler.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="ncc" type="nant:Nemerle.Tools.NAntTasks.NccTask">
				<xs:annotation>
					<xs:documentation>Compiles nemerle programs.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="attrib" type="nant:NAnt.Core.Tasks.AttribTask">
				<xs:annotation>
					<xs:documentation>Changes the file attributes of a file or set of files and directories.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="available" type="nant:NAnt.Core.Tasks.AvailableTask">
				<xs:annotation>
					<xs:documentation>(Deprecated) Checks if a resource is available at runtime.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="call" type="nant:NAnt.Core.Tasks.CallTask">
				<xs:annotation>
					<xs:documentation>Calls a NAnt target in the current project.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="copy" type="nant:NAnt.Core.Tasks.CopyTask">
				<xs:annotation>
					<xs:documentation>Copies a file or set of files to a new file or directory.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="delete">
				<xs:annotation>
					<xs:documentation>Deletes a file, fileset or directory.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="nant:NAnt.Core.Tasks.DeleteTask"/>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="description" type="nant:NAnt.Core.Tasks.DescriptionTask">
				<xs:annotation>
					<xs:documentation>An empty task that allows a build file to contain a description.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="echo" type="nant:NAnt.Core.Tasks.EchoTask">
				<xs:annotation>
					<xs:documentation>Writes a message to the build log or a specified file.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="exec" type="nant:NAnt.Core.Tasks.ExecTask">
				<xs:annotation>
					<xs:documentation>Executes a system command.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="fail" type="nant:NAnt.Core.Tasks.FailTask">
				<xs:annotation>
					<xs:documentation>Exits the current build by throwing a BuildException, optionally printing additional information.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="get" type="nant:NAnt.Core.Tasks.GetTask">
				<xs:annotation>
					<xs:documentation>Gets a particular file from a URL source.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="if" type="nant:NAnt.Core.Tasks.IfTask">
				<xs:annotation>
					<xs:documentation>Checks the conditional attributes and executes the children if true.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="ifnot" type="nant:NAnt.Core.Tasks.IfNotTask">
				<xs:annotation>
					<xs:documentation>(Deprecated) The opposite of the if task.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="include" type="nant:NAnt.Core.Tasks.IncludeTask">
				<xs:annotation>
					<xs:documentation>Includes an external build file.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="loadfile" type="nant:NAnt.Core.Tasks.LoadFileTask">
				<xs:annotation>
					<xs:documentation>Load a text file into a single property.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="loadtasks" type="nant:NAnt.Core.Tasks.LoadTasksTask">
				<xs:annotation>
					<xs:documentation>Loads tasks form a given assembly or all assemblies in a given directory or 'fileset'.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="foreach" type="nant:NAnt.Core.Tasks.LoopTask">
				<xs:annotation>
					<xs:documentation>Loops over a set of items.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="mail" type="nant:NAnt.Core.Tasks.MailTask">
				<xs:annotation>
					<xs:documentation>Sends an SMTP message.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="mkdir" type="nant:NAnt.Core.Tasks.MkDirTask">
				<xs:annotation>
					<xs:documentation>Creates a directory and any non-existent parent directory if necessary.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="move" type="nant:NAnt.Core.Tasks.MoveTask">
				<xs:annotation>
					<xs:documentation>Moves a file or set of files to a new file or directory.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nantschema" type="nant:NAnt.Core.Tasks.NAntSchemaTask">
				<xs:annotation>
					<xs:documentation>Creates an XSD File for all available tasks.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nant" type="nant:NAnt.Core.Tasks.NAntTask">
				<xs:annotation>
					<xs:documentation>Runs NAnt on a supplied build file, or a set of build files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="property" type="nant:NAnt.Core.Tasks.PropertyTask">
				<xs:annotation>
					<xs:documentation>Sets a property in the current project.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="regex" type="nant:NAnt.Core.Tasks.RegexTask">
				<xs:annotation>
					<xs:documentation>Sets project properties based on the evaluatuion of a regular expression.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="setenv" type="nant:NAnt.Core.Tasks.SetEnvTask">
				<xs:annotation>
					<xs:documentation>Sets an environment variable or a whole collection of them. Use an empty value attribute to clear a variable.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="sleep" type="nant:NAnt.Core.Tasks.SleepTask">
				<xs:annotation>
					<xs:documentation>A task for sleeping a specified period of time, useful when a build or deployment process requires an interval between tasks.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="style" type="nant:NAnt.Core.Tasks.StyleTask">
				<xs:annotation>
					<xs:documentation>Processes a document via XSLT.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="sysinfo" type="nant:NAnt.Core.Tasks.SysInfoTask">
				<xs:annotation>
					<xs:documentation>Sets properties with system information.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="tstamp" type="nant:NAnt.Core.Tasks.TStampTask">
				<xs:annotation>
					<xs:documentation>Sets properties with the current date and time.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="touch" type="nant:NAnt.Core.Tasks.TouchTask">
				<xs:annotation>
					<xs:documentation>Touches a file or set of files -- corresponds to the Unix touch command.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="uptodate" type="nant:NAnt.Core.Tasks.UpToDateTask">
				<xs:annotation>
					<xs:documentation>Check modification dates on groups of files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="xmlpeek" type="nant:NAnt.Core.Tasks.XmlPeekTask">
				<xs:annotation>
					<xs:documentation>Extracts text from an XML file at the location specified by an XPath expression.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="xmlpoke" type="nant:NAnt.Core.Tasks.XmlPokeTask">
				<xs:annotation>
					<xs:documentation>Replaces text in an XML file at the location specified by an XPath expression.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="tarfileset" type="nant:NAnt.Compression.Types.TarFileSet"/>
			<xs:element name="zipfileset" type="nant:NAnt.Compression.Types.ZipFileSet">
				<xs:annotation>
					<xs:documentation>A 'zipfileset' is a 'fileset' with extra attributes useful in the context of the 'zip' task.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="assemblyfileset" type="nant:NAnt.DotNet.Types.AssemblyFileSet">
				<xs:annotation>
					<xs:documentation>Specialized 'fileset' class for managing assembly files.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="namespaceimports" type="nant:NAnt.DotNet.Types.NamespaceImportCollection"/>
			<xs:element name="resourcefileset" type="nant:NAnt.DotNet.Types.ResourceFileSet"/>
			<xs:element name="warnaserror" type="nant:NAnt.DotNet.Types.WarningAsError"/>
			<xs:element name="categories" type="nant:NAnt.NUnit2.Types.Categories"/>
			<xs:element name="cvsfileset" type="nant:NAnt.SourceControl.Types.CvsFileSet">
				<xs:annotation>
					<xs:documentation>A 'cvsfileset' is a 'fileset' with extra attributes useful in the context of the 'cvs' task.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="filterchain" type="nant:NAnt.Core.Filters.FilterChain"/>
			<xs:element name="credential" type="nant:NAnt.Core.Types.Credential"/>
			<xs:element name="fileset" type="nant:NAnt.Core.Types.FileSet">
				<xs:annotation>
					<xs:documentation>Filesets are groups of files. These files can be found in a directory tree starting in a base directory and are matched by patterns taken from a number of patterns.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="dirset" type="nant:NAnt.Core.Types.DirSet"/>
			<xs:element name="path" type="nant:NAnt.Core.Types.PathSet"/>
			<xs:element name="proxy" type="nant:NAnt.Core.Types.Proxy"/>
			<xs:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
			<xs:any namespace="##local" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
		</xs:choice>
		<xs:attribute name="name" use="required">
			<xs:annotation>
				<xs:documentation>The name of the target.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="depends" use="optional">
			<xs:annotation>
				<xs:documentation>A comma-separated list of names of targets on which this target depends.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="description" use="optional">
			<xs:annotation>
				<xs:documentation>A short description of this target's function.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="if" use="optional">
			<xs:annotation>
				<xs:documentation>An expression that should evaluate to true in order for this target to execute.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unless" use="optional">
			<xs:annotation>
				<xs:documentation>An expression that, when evaluated to true, will cause the target to be skipped.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:element name="project">
		<xs:annotation>
			<xs:documentation>The root element of the buildfile</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="updateAssemblyVersion" type="nant:Boo.NAnt.UpdateAssemblyVersionTask"/>
				<xs:element name="insertLicense" type="nant:Boo.NAnt.InsertLicenseTask"/>
				<xs:element name="booc" type="nant:Boo.NAnt.BoocTask">
					<xs:annotation>
						<xs:documentation>Compiles boo programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="boo" type="nant:Boo.NAnt.BooTask">
					<xs:annotation>
						<xs:documentation>Runs embedded boo programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="gunzip" type="nant:NAnt.Compression.Tasks.GUnzip">
					<xs:annotation>
						<xs:documentation>Expands a file packed using GZip compression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tar" type="nant:NAnt.Compression.Tasks.TarTask">
					<xs:annotation>
						<xs:documentation>Creates a tar file from the specified filesets.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="unzip" type="nant:NAnt.Compression.Tasks.UnZipTask">
					<xs:annotation>
						<xs:documentation>Extracts files from a zip file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="zip" type="nant:NAnt.Compression.Tasks.ZipTask">
					<xs:annotation>
						<xs:documentation>Creates a zip file from the specified filesets.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="asminfo" type="nant:NAnt.DotNet.Tasks.AssemblyInfoTask">
					<xs:annotation>
						<xs:documentation>Generates an AssemblyInfo file using the attributes given.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="al" type="nant:NAnt.DotNet.Tasks.AssemblyLinkerTask">
					<xs:annotation>
						<xs:documentation>Wraps al.exe, the assembly linker for Mono.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="csc" type="nant:NAnt.DotNet.Tasks.CscTask">
					<xs:annotation>
						<xs:documentation>Compiles C# programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="delay-sign" type="nant:NAnt.DotNet.Tasks.DelaySignTask">
					<xs:annotation>
						<xs:documentation>Signs delay-signed Mono Assemblies, or re-signs existing assemblies.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ilasm" type="nant:NAnt.DotNet.Tasks.IlasmTask">
					<xs:annotation>
						<xs:documentation>Compiles ILASM programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="jsc" type="nant:NAnt.DotNet.Tasks.JscTask">
					<xs:annotation>
						<xs:documentation>Compiles JScript.NET programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="license" type="nant:NAnt.DotNet.Tasks.LicenseTask">
					<xs:annotation>
						<xs:documentation>Generates a .licence file from a .licx file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ndoc" type="nant:NAnt.DotNet.Tasks.NDocTask">
					<xs:annotation>
						<xs:documentation>Runs NDoc V1.3.1 to create documentation.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="regsvcs" type="nant:NAnt.DotNet.Tasks.RegsvcsTask">
					<xs:annotation>
						<xs:documentation>Installs or removes Mono Services.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="resgen" type="nant:NAnt.DotNet.Tasks.ResGenTask">
					<xs:annotation>
						<xs:documentation>Converts files from one resource format to another.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="script" type="nant:NAnt.DotNet.Tasks.ScriptTask">
					<xs:annotation>
						<xs:documentation>Executes the code contained within the task. This code can include custom extension function definitions. Once the script task has executed those custom functions will be available for use in the buildfile.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="vbc" type="nant:NAnt.DotNet.Tasks.VbcTask">
					<xs:annotation>
						<xs:documentation>Compiles Visual Basic.NET programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="vjc" type="nant:NAnt.DotNet.Tasks.VjcTask">
					<xs:annotation>
						<xs:documentation>Compiles Visual J# programs using vjc, Microsoft's J# compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nunit" type="nant:NAnt.NUnit1.Tasks.NUnitTask">
					<xs:annotation>
						<xs:documentation>Runs tests using the NUnit V1.0 framework.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nunit2" type="nant:NAnt.NUnit2.Tasks.NUnit2Task">
					<xs:annotation>
						<xs:documentation>Runs tests using the NUnit V2.2 framework.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-changelog" type="nant:NAnt.SourceControl.Tasks.ChangeLogTask">
					<xs:annotation>
						<xs:documentation>Produces an XML report that represents the cvs changes from the given start day, to a given end date.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-checkout" type="nant:NAnt.SourceControl.Tasks.CheckoutTask">
					<xs:annotation>
						<xs:documentation>Checks out a CVS module to the required directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-pass" type="nant:NAnt.SourceControl.Tasks.CvsPass">
					<xs:annotation>
						<xs:documentation>Executes the cvs login command which appends or updates an entry to the specified .cvspass file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs" type="nant:NAnt.SourceControl.Tasks.CvsTask">
					<xs:annotation>
						<xs:documentation>Executes the cvs command specified by the command attribute.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-export" type="nant:NAnt.SourceControl.Tasks.ExportTask">
					<xs:annotation>
						<xs:documentation>Exports a cvs module in preperation for a release (i.e. the CVS version folders are not exported).</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-rtag" type="nant:NAnt.SourceControl.Tasks.RTagTask">
					<xs:annotation>
						<xs:documentation>Tags all sources in the remote repository with a given tag.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-tag" type="nant:NAnt.SourceControl.Tasks.TagTask">
					<xs:annotation>
						<xs:documentation>Tags all local sources with the specified tag.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvs-update" type="nant:NAnt.SourceControl.Tasks.UpdateTask">
					<xs:annotation>
						<xs:documentation>Updates a CVS module in a local working directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cl" type="nant:NAnt.VisualCpp.Tasks.ClTask">
					<xs:annotation>
						<xs:documentation>Compiles C/C++ programs using cl.exe, Microsoft's C/C++ compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="lib" type="nant:NAnt.VisualCpp.Tasks.LibTask">
					<xs:annotation>
						<xs:documentation>Run lib.exe, Monos' Library Manager.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="link" type="nant:NAnt.VisualCpp.Tasks.LinkTask">
					<xs:annotation>
						<xs:documentation>Links files using link.exe, Monos' Incremental Linker.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mc" type="nant:NAnt.VisualCpp.Tasks.McTask">
					<xs:annotation>
						<xs:documentation>Compiles messages using mc.exe, Microsoft's Win32 message compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="midl" type="nant:NAnt.VisualCpp.Tasks.MidlTask">
					<xs:annotation>
						<xs:documentation>This tasks allows you to run MIDL.exe.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="rc" type="nant:NAnt.VisualCpp.Tasks.RcTask">
					<xs:annotation>
						<xs:documentation>Compiles resources using rc.exe, Microsoft's Win32 resource compiler.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ncc" type="nant:Nemerle.Tools.NAntTasks.NccTask">
					<xs:annotation>
						<xs:documentation>Compiles nemerle programs.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="attrib" type="nant:NAnt.Core.Tasks.AttribTask">
					<xs:annotation>
						<xs:documentation>Changes the file attributes of a file or set of files and directories.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="available" type="nant:NAnt.Core.Tasks.AvailableTask">
					<xs:annotation>
						<xs:documentation>(Deprecated) Checks if a resource is available at runtime.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="call" type="nant:NAnt.Core.Tasks.CallTask">
					<xs:annotation>
						<xs:documentation>Calls a NAnt target in the current project.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="copy" type="nant:NAnt.Core.Tasks.CopyTask">
					<xs:annotation>
						<xs:documentation>Copies a file or set of files to a new file or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="delete" type="nant:NAnt.Core.Tasks.DeleteTask">
					<xs:annotation>
						<xs:documentation>Deletes a file, fileset or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="description" type="nant:NAnt.Core.Tasks.DescriptionTask">
					<xs:annotation>
						<xs:documentation>An empty task that allows a build file to contain a description.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="echo" type="nant:NAnt.Core.Tasks.EchoTask">
					<xs:annotation>
						<xs:documentation>Writes a message to the build log or a specified file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="exec" type="nant:NAnt.Core.Tasks.ExecTask">
					<xs:annotation>
						<xs:documentation>Executes a system command.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="fail" type="nant:NAnt.Core.Tasks.FailTask">
					<xs:annotation>
						<xs:documentation>Exits the current build by throwing a BuildException, optionally printing additional information.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="get" type="nant:NAnt.Core.Tasks.GetTask">
					<xs:annotation>
						<xs:documentation>Gets a particular file from a URL source.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="if" type="nant:NAnt.Core.Tasks.IfTask">
					<xs:annotation>
						<xs:documentation>Checks the conditional attributes and executes the children if true.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ifnot" type="nant:NAnt.Core.Tasks.IfNotTask">
					<xs:annotation>
						<xs:documentation>(Deprecated) The opposite of the if task.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="include" type="nant:NAnt.Core.Tasks.IncludeTask">
					<xs:annotation>
						<xs:documentation>Includes an external build file.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="loadfile" type="nant:NAnt.Core.Tasks.LoadFileTask">
					<xs:annotation>
						<xs:documentation>Load a text file into a single property.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="loadtasks" type="nant:NAnt.Core.Tasks.LoadTasksTask">
					<xs:annotation>
						<xs:documentation>Loads tasks form a given assembly or all assemblies in a given directory or 'fileset'.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="foreach" type="nant:NAnt.Core.Tasks.LoopTask">
					<xs:annotation>
						<xs:documentation>Loops over a set of items.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mail" type="nant:NAnt.Core.Tasks.MailTask">
					<xs:annotation>
						<xs:documentation>Sends an SMTP message.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mkdir" type="nant:NAnt.Core.Tasks.MkDirTask">
					<xs:annotation>
						<xs:documentation>Creates a directory and any non-existent parent directory if necessary.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="move" type="nant:NAnt.Core.Tasks.MoveTask">
					<xs:annotation>
						<xs:documentation>Moves a file or set of files to a new file or directory.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nantschema" type="nant:NAnt.Core.Tasks.NAntSchemaTask">
					<xs:annotation>
						<xs:documentation>Creates an XSD File for all available tasks.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="nant" type="nant:NAnt.Core.Tasks.NAntTask">
					<xs:annotation>
						<xs:documentation>Runs NAnt on a supplied build file, or a set of build files.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="property" type="nant:NAnt.Core.Tasks.PropertyTask">
					<xs:annotation>
						<xs:documentation>Sets a property in the current project.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="regex" type="nant:NAnt.Core.Tasks.RegexTask">
					<xs:annotation>
						<xs:documentation>Sets project properties based on the evaluatuion of a regular expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="setenv" type="nant:NAnt.Core.Tasks.SetEnvTask">
					<xs:annotation>
						<xs:documentation>Sets an environment variable or a whole collection of them. Use an empty value attribute to clear a variable.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="sleep" type="nant:NAnt.Core.Tasks.SleepTask">
					<xs:annotation>
						<xs:documentation>A task for sleeping a specified period of time, useful when a build or deployment process requires an interval between tasks.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="style" type="nant:NAnt.Core.Tasks.StyleTask">
					<xs:annotation>
						<xs:documentation>Processes a document via XSLT.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="sysinfo" type="nant:NAnt.Core.Tasks.SysInfoTask">
					<xs:annotation>
						<xs:documentation>Sets properties with system information.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tstamp" type="nant:NAnt.Core.Tasks.TStampTask">
					<xs:annotation>
						<xs:documentation>Sets properties with the current date and time.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="touch" type="nant:NAnt.Core.Tasks.TouchTask">
					<xs:annotation>
						<xs:documentation>Touches a file or set of files -- corresponds to the Unix touch command.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="uptodate" type="nant:NAnt.Core.Tasks.UpToDateTask">
					<xs:annotation>
						<xs:documentation>Check modification dates on groups of files.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="xmlpeek" type="nant:NAnt.Core.Tasks.XmlPeekTask">
					<xs:annotation>
						<xs:documentation>Extracts text from an XML file at the location specified by an XPath expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="xmlpoke" type="nant:NAnt.Core.Tasks.XmlPokeTask">
					<xs:annotation>
						<xs:documentation>Replaces text in an XML file at the location specified by an XPath expression.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tarfileset" type="nant:NAnt.Compression.Types.TarFileSet">
					<xs:annotation>
						<xs:documentation>A 'tarfileset' is a 'fileset' with extra attributes useful in the context of the 'tar' task.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="zipfileset" type="nant:NAnt.Compression.Types.ZipFileSet">
					<xs:annotation>
						<xs:documentation>A 'zipfileset' is a 'fileset' with extra attributes useful in the context of the 'zip' task.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="assemblyfileset" type="nant:NAnt.DotNet.Types.AssemblyFileSet">
					<xs:annotation>
						<xs:documentation>Specialized 'fileset' class for managing assembly files.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="namespaceimports" type="nant:NAnt.DotNet.Types.NamespaceImportCollection">
					<xs:annotation>
						<xs:documentation>Contains a collection of NamespaceImport items.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="resourcefileset" type="nant:NAnt.DotNet.Types.ResourceFileSet">
					<xs:annotation>
						<xs:documentation>Specialized 'fileset' class for managing resource files.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="warnaserror" type="nant:NAnt.DotNet.Types.WarningAsError">
					<xs:annotation>
						<xs:documentation>Controls the behaviour of a compiler with regards to the reporting of warnings.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="categories" type="nant:NAnt.NUnit2.Types.Categories">
					<xs:annotation>
						<xs:documentation>Controls the categories of tests to execute using the 'nunit2' task.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="cvsfileset" type="nant:NAnt.SourceControl.Types.CvsFileSet">
					<xs:annotation>
						<xs:documentation>A 'cvsfileset' is a 'fileset' with extra attributes useful in the context of the 'cvs' task.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="filterchain" type="nant:NAnt.Core.Filters.FilterChain">
					<xs:annotation>
						<xs:documentation>Represent a chain of NAnt filters that can be applied to a Task.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="credential" type="nant:NAnt.Core.Types.Credential">
					<xs:annotation>
						<xs:documentation>Provides credentials for password-based authentication schemes.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="fileset" type="nant:NAnt.Core.Types.FileSet">
					<xs:annotation>
						<xs:documentation>Filesets are groups of files. These files can be found in a directory tree starting in a base directory and are matched by patterns taken from a number of patterns.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="dirset" type="nant:NAnt.Core.Types.DirSet">
					<xs:annotation>
						<xs:documentation>A specialized 'fileset' used for specifying a set of directories.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="path" type="nant:NAnt.Core.Types.PathSet">
					<xs:annotation>
						<xs:documentation>Paths are groups of files and/or directories that need to be passed as a single unit. The order in which parts of the path are specified in the build file is retained, and duplicate parts are automatically suppressed.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="proxy" type="nant:NAnt.Core.Types.Proxy">
					<xs:annotation>
						<xs:documentation>Contains HTTP proxy settings used to process requests to Internet resources.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="target" type="nant:Target">
					<xs:annotation>
						<xs:documentation>A target is a set of tasks to be executed.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
				<xs:any namespace="##local" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
			</xs:choice>
			<xs:attribute name="name" use="required">
				<xs:annotation>
					<xs:documentation>The name of the project.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="default" use="optional">
				<xs:annotation>
					<xs:documentation>The default target to execute when no target is supplied on the command-line.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="basedir" use="optional">
				<xs:annotation>
					<xs:documentation>The base directory from which all path calculations are done.  If not set, the parent directory of the buildfile will be used.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
</xs:schema>
