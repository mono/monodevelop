// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnu.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar		(marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004 Novell, Inc
//
// TODO:
//   (1) Figure out why error productions dont work.  `type-declaration' is a
//       great spot to put an `error' because you can reproduce it with this input:
//	 "public X { }"
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceEntry  current_namespace;
		TypeContainer   current_container;
		DeclSpace	current_class;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		static public int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		/// assembly and module attribute definitions are enabled
		bool global_attrs_enabled = true;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		UsingsBag ubag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Location parameterModifierLocation, savedLocation;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 9;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declarations opt_EOF",
//t    "compilation_unit : outer_declarations global_attributes opt_EOF",
//t    "compilation_unit : global_attributes opt_EOF",
//t    "compilation_unit : opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "outer_declarations : outer_declaration",
//t    "outer_declarations : outer_declarations outer_declaration",
//t    "outer_declaration : extern_alias_directive",
//t    "outer_declaration : using_directive",
//t    "outer_declaration : namespace_member_declaration",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "using_directives : using_directive",
//t    "using_directives : using_directives using_directive",
//t    "using_directive : using_alias_directive",
//t    "using_directive : using_namespace_directive",
//t    "using_alias_directive : USING IDENTIFIER ASSIGN namespace_or_type_name SEMICOLON",
//t    "using_alias_directive : USING error",
//t    "using_namespace_directive : USING namespace_name SEMICOLON",
//t    "$$2 :",
//t    "namespace_declaration : opt_attributes NAMESPACE qualified_identifier $$2 namespace_body opt_semicolon",
//t    "qualified_identifier : IDENTIFIER",
//t    "qualified_identifier : qualified_identifier DOT IDENTIFIER",
//t    "qualified_identifier : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "namespace_name : namespace_or_type_name",
//t    "$$3 :",
//t    "namespace_body : OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_member_declarations CLOSE_BRACE",
//t    "opt_using_directives :",
//t    "opt_using_directives : using_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_namespace_member_declarations :",
//t    "opt_namespace_member_declarations : namespace_member_declarations",
//t    "namespace_member_declarations : namespace_member_declaration",
//t    "namespace_member_declarations : namespace_member_declarations namespace_member_declaration",
//t    "namespace_member_declaration : type_declaration",
//t    "namespace_member_declaration : namespace_declaration",
//t    "namespace_member_declaration : error",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "global_attributes : attribute_sections",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$4 :",
//t    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
//t    "$$5 :",
//t    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$6 :",
//t    "attribute : attribute_name $$6 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_name",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$7 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
//t    "named_argument : IDENTIFIER COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : constructor_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : error",
//t    "$$8 :",
//t    "$$9 :",
//t    "$$10 :",
//t    "$$11 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$8 type_declaration_name $$9 opt_class_base opt_type_parameter_constraints_clauses $$10 struct_body $$11 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$12 :",
//t    "struct_body : OPEN_BRACE $$12 opt_struct_member_declarations CLOSE_BRACE",
//t    "opt_struct_member_declarations :",
//t    "opt_struct_member_declarations : struct_member_declarations",
//t    "struct_member_declarations : struct_member_declaration",
//t    "struct_member_declarations : struct_member_declarations struct_member_declaration",
//t    "struct_member_declaration : constant_declaration",
//t    "struct_member_declaration : field_declaration",
//t    "struct_member_declaration : method_declaration",
//t    "struct_member_declaration : property_declaration",
//t    "struct_member_declaration : event_declaration",
//t    "struct_member_declaration : indexer_declaration",
//t    "struct_member_declaration : operator_declaration",
//t    "struct_member_declaration : constructor_declaration",
//t    "struct_member_declaration : type_declaration",
//t    "struct_member_declaration : destructor_declaration",
//t    "$$13 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$13 constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$14 :",
//t    "constant_initializer : ASSIGN $$14 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "constant_initializer_expr : array_initializer",
//t    "$$15 :",
//t    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$15 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$16 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$16 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$17 :",
//t    "opt_field_initializer : ASSIGN $$17 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$18 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$18 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$19 :",
//t    "fixed_field_size : OPEN_BRACKET $$19 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "variable_initializer : error",
//t    "$$20 :",
//t    "method_declaration : method_header $$20 method_body",
//t    "$$21 :",
//t    "$$22 :",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS $$22 opt_type_parameter_constraints_clauses",
//t    "$$23 :",
//t    "$$24 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL VOID method_declaration_name OPEN_PARENS $$23 opt_formal_parameter_list CLOSE_PARENS $$24 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
//t    "$$25 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER ASSIGN $$25 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$26 :",
//t    "$$27 :",
//t    "$$28 :",
//t    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$26 OPEN_BRACE $$27 accessor_declarations $$28 CLOSE_BRACE",
//t    "$$29 :",
//t    "$$30 :",
//t    "$$31 :",
//t    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$29 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$30 accessor_declarations $$31 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$32 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$32 accessor_body",
//t    "$$33 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$33 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$34 :",
//t    "$$35 :",
//t    "$$36 :",
//t    "$$37 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$34 type_declaration_name $$35 opt_class_base opt_type_parameter_constraints_clauses $$36 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$37 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : constructor_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$38 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$38 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$39 :",
//t    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$39 opt_formal_parameter_list CLOSE_PARENS",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "$$40 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$40 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$41 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "constructor_declaration : constructor_declarator constructor_body",
//t    "$$42 :",
//t    "$$43 :",
//t    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$42 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$43 opt_constructor_initializer",
//t    "constructor_body : block_prepared",
//t    "constructor_body : SEMICOLON",
//t    "opt_constructor_initializer :",
//t    "opt_constructor_initializer : constructor_initializer",
//t    "$$44 :",
//t    "constructor_initializer : COLON BASE OPEN_PARENS $$44 opt_argument_list CLOSE_PARENS",
//t    "$$45 :",
//t    "constructor_initializer : COLON THIS OPEN_PARENS $$45 opt_argument_list CLOSE_PARENS",
//t    "constructor_initializer : error",
//t    "$$46 :",
//t    "destructor_declaration : opt_attributes opt_modifiers TILDE $$46 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$47 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$47 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$48 :",
//t    "$$49 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$48 event_accessor_declarations $$49 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$50 :",
//t    "opt_event_initializer : ASSIGN $$50 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "$$51 :",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN $$51 event_variable_initializer",
//t    "$$52 :",
//t    "event_variable_initializer : $$52 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$53 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$53 event_accessor_block",
//t    "$$54 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$54 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "$$55 :",
//t    "$$56 :",
//t    "$$57 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$55 OPEN_BRACE $$56 opt_enum_member_declarations $$57 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$58 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$58 ASSIGN constant_expression",
//t    "$$59 :",
//t    "$$60 :",
//t    "$$61 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$59 opt_formal_parameter_list CLOSE_PARENS $$60 opt_type_parameter_constraints_clauses $$61 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_name : member_name",
//t    "namespace_or_type_name : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_name : type_name",
//t    "member_name : namespace_or_type_name DOT IDENTIFIER opt_type_argument_list",
//t    "type_name : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$62 :",
//t    "type_declaration_name : IDENTIFIER $$62 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_name opt_nullable",
//t    "type_expression : namespace_or_type_name pointer_stars",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_expression : builtin_types pointer_stars",
//t    "type_expression : VOID pointer_stars",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "base_type_name : error",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : pointer_member_access",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : BASE DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : BASE OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifier array_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$63 :",
//t    "new_expr_type : $$63 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
//t    "anonymous_type_parameter : IDENTIFIER",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "$$64 :",
//t    "typeof_expression : TYPEOF $$64 open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : IDENTIFIER generic_dimension",
//t    "unbound_type_name : qualified_alias_member IDENTIFIER generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT IDENTIFIER",
//t    "unbound_type_name : unbound_type_name DOT IDENTIFIER generic_dimension",
//t    "unbound_type_name : namespace_or_type_name DOT IDENTIFIER generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER",
//t    "$$65 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$65 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$66 :",
//t    "anonymous_method_signature : OPEN_PARENS $$66 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : cast_expression",
//t    "cast_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type IDENTIFIER",
//t    "lambda_parameter : parameter_type IDENTIFIER",
//t    "lambda_parameter : IDENTIFIER",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "lambda_expression_body : lambda_expression_body_simple",
//t    "lambda_expression_body : block",
//t    "$$67 :",
//t    "lambda_expression_body_simple : $$67 expression_or_error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$68 :",
//t    "lambda_expression : IDENTIFIER ARROW $$68 lambda_expression_body",
//t    "$$69 :",
//t    "$$70 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$69 opt_lambda_parameter_list CLOSE_PARENS ARROW $$70 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "non_assignment_expression : ARGLIST",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$71 :",
//t    "$$72 :",
//t    "$$73 :",
//t    "$$74 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$71 type_declaration_name $$72 opt_class_base opt_type_parameter_constraints_clauses $$73 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$74 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "opt_class_base :",
//t    "opt_class_base : COLON type_list",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "opt_type_parameter_constraints_clauses : error",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$75 :",
//t    "block : OPEN_BRACE $$75 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$76 :",
//t    "block_prepared : OPEN_BRACE $$76 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$77 :",
//t    "labeled_statement : IDENTIFIER COLON $$77 statement",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : primary_expression_or_type pointer_stars",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : builtin_types pointer_stars",
//t    "variable_type_simple : VOID pointer_stars",
//t    "variable_type_simple : VOID",
//t    "pointer_stars : pointer_star",
//t    "pointer_stars : pointer_star pointer_stars",
//t    "pointer_star : STAR",
//t    "$$78 :",
//t    "block_variable_declaration : variable_type IDENTIFIER $$78 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$79 :",
//t    "block_variable_declaration : CONST variable_type IDENTIFIER $$79 const_variable_initializer opt_const_declarators SEMICOLON",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA IDENTIFIER",
//t    "variable_declarator : COMMA IDENTIFIER ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA IDENTIFIER ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "block_variable_initializer : STACKALLOC simple_type",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "$$80 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$80 opt_switch_sections CLOSE_BRACE",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "$$81 :",
//t    "switch_section : switch_labels $$81 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "$$82 :",
//t    "for_statement : FOR open_parens_any $$82 for_statement_cont",
//t    "for_statement_cont : opt_for_initializer SEMICOLON opt_for_condition SEMICOLON opt_for_iterator CLOSE_PARENS embedded_statement",
//t    "for_statement_cont : error",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$83 :",
//t    "for_initializer : variable_type IDENTIFIER $$83 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type IN expression CLOSE_PARENS",
//t    "$$84 :",
//t    "foreach_statement : FOREACH open_parens_any type IDENTIFIER IN expression CLOSE_PARENS $$84 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "goto_statement : GOTO IDENTIFIER SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "throw_statement : THROW opt_expression SEMICOLON",
//t    "yield_statement : IDENTIFIER RETURN opt_expression SEMICOLON",
//t    "yield_statement : IDENTIFIER BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : IDENTIFIER",
//t    "catch_clause : CATCH block",
//t    "$$85 :",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$85 block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$86 :",
//t    "unsafe_statement : UNSAFE $$86 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "$$87 :",
//t    "$$88 :",
//t    "fixed_statement : FIXED open_parens_any variable_type IDENTIFIER $$87 using_or_fixed_variable_initializer opt_variable_declarators CLOSE_PARENS $$88 embedded_statement",
//t    "$$89 :",
//t    "$$90 :",
//t    "using_statement : USING open_parens_any variable_type IDENTIFIER $$89 using_or_fixed_variable_initializer opt_variable_declarators CLOSE_PARENS $$90 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST IDENTIFIER IN expression",
//t    "first_from_clause : FROM_FIRST type IDENTIFIER IN expression",
//t    "nested_from_clause : FROM IDENTIFIER IN expression",
//t    "nested_from_clause : FROM type IDENTIFIER IN expression",
//t    "$$91 :",
//t    "from_clause : FROM IDENTIFIER IN $$91 expression",
//t    "$$92 :",
//t    "from_clause : FROM type IDENTIFIER IN $$92 expression",
//t    "query_body : opt_query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : opt_query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : error",
//t    "$$93 :",
//t    "select_or_group_clause : SELECT $$93 expression",
//t    "$$94 :",
//t    "$$95 :",
//t    "select_or_group_clause : GROUP $$94 expression $$95 BY expression",
//t    "opt_query_body_clauses :",
//t    "opt_query_body_clauses : query_body_clauses",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$96 :",
//t    "let_clause : LET IDENTIFIER ASSIGN $$96 expression",
//t    "$$97 :",
//t    "where_clause : WHERE $$97 expression",
//t    "$$98 :",
//t    "$$99 :",
//t    "$$100 :",
//t    "join_clause : JOIN IDENTIFIER IN $$98 expression ON $$99 expression EQUALS $$100 expression opt_join_into",
//t    "$$101 :",
//t    "$$102 :",
//t    "$$103 :",
//t    "join_clause : JOIN type IDENTIFIER IN $$101 expression ON $$102 expression EQUALS $$103 expression opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO IDENTIFIER",
//t    "$$104 :",
//t    "orderby_clause : ORDERBY $$104 orderings",
//t    "orderings : order_by",
//t    "$$105 :",
//t    "orderings : order_by COMMA $$105 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$106 :",
//t    "orderings_then_by : orderings_then_by COMMA $$106 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$107 :",
//t    "opt_query_continuation : INTO IDENTIFIER $$107 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
//t    "$$108 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$108 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : outer_declarations",
//t    "interactive_compilation_unit : outer_declarations global_attributes",
//t    "interactive_compilation_unit : global_attributes",
//t    "interactive_compilation_unit :",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","ASYNC","GET","SET","LAST_KEYWORD","OPEN_BRACE",
    "CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS",
    "CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON","TILDE","PLUS",
    "MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND","BITWISE_OR",
    "STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC",
    "OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ",
    "OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 5:
#line 377 "cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 7:
#line 384 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 8:
#line 388 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 16:
  case_16();
  break;
case 17:
#line 424 "cs-parser.jay"
  {
	  	syntax_error (GetLocation (yyVals[-1+yyTop]), "`alias' expected");   /* TODO: better*/
	  }
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 25:
  case_25();
  break;
case 26:
  case_26();
  break;
case 27:
  case_27();
  break;
case 28:
  case_28();
  break;
case 29:
  case_29();
  break;
case 34:
  case_34();
  break;
case 35:
  case_35();
  break;
case 36:
#line 554 "cs-parser.jay"
  {
		ubag.CloseNamespace (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 45:
  case_45();
  break;
case 46:
#line 592 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 47:
#line 596 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	 }
  break;
case 53:
  case_53();
  break;
case 54:
  case_54();
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
  case_57();
  break;
case 58:
#line 711 "cs-parser.jay"
  {
		lexer.parsing_attribute_section = true;
	  }
  break;
case 59:
  case_59();
  break;
case 60:
#line 723 "cs-parser.jay"
  {
		current_attr_target = (string)yyVals[-1+yyTop];	  
	  }
  break;
case 61:
#line 727 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
 	  }
  break;
case 62:
#line 731 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 63:
  case_63();
  break;
case 64:
#line 740 "cs-parser.jay"
  { yyVal = "event"; }
  break;
case 65:
#line 741 "cs-parser.jay"
  { yyVal = "return"; }
  break;
case 66:
  case_66();
  break;
case 67:
#line 753 "cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 68:
  case_68();
  break;
case 69:
#line 767 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 70:
  case_70();
  break;
case 71:
#line 791 "cs-parser.jay"
  { /* reserved attribute name or identifier: 17.4 */ }
  break;
case 72:
#line 795 "cs-parser.jay"
  { yyVal = null; }
  break;
case 73:
#line 799 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 74:
#line 804 "cs-parser.jay"
  { yyVal = null; }
  break;
case 75:
  case_75();
  break;
case 76:
  case_76();
  break;
case 77:
  case_77();
  break;
case 78:
  case_78();
  break;
case 79:
#line 848 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 81:
#line 856 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 82:
  case_82();
  break;
case 83:
  case_83();
  break;
case 84:
#line 880 "cs-parser.jay"
  { yyVal = null; }
  break;
case 85:
#line 884 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 86:
#line 888 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 101:
  case_101();
  break;
case 102:
#line 929 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 103:
  case_103();
  break;
case 104:
  case_104();
  break;
case 105:
  case_105();
  break;
case 106:
  case_106();
  break;
case 107:
#line 961 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 108:
  case_108();
  break;
case 109:
#line 973 "cs-parser.jay"
  {
		lbag.AppendToMember (current_class, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 124:
  case_124();
  break;
case 125:
  case_125();
  break;
case 128:
#line 1042 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 129:
#line 1046 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 130:
  case_130();
  break;
case 131:
#line 1062 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 132:
  case_132();
  break;
case 133:
  case_133();
  break;
case 136:
  case_136();
  break;
case 137:
  case_137();
  break;
case 138:
  case_138();
  break;
case 139:
  case_139();
  break;
case 140:
#line 1141 "cs-parser.jay"
  {
		Report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 142:
  case_142();
  break;
case 143:
  case_143();
  break;
case 146:
#line 1171 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 147:
#line 1175 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 148:
  case_148();
  break;
case 149:
#line 1188 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 150:
  case_150();
  break;
case 153:
#line 1207 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 154:
#line 1211 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 155:
  case_155();
  break;
case 156:
#line 1227 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 157:
  case_157();
  break;
case 158:
  case_158();
  break;
case 161:
  case_161();
  break;
case 162:
  case_162();
  break;
case 163:
  case_163();
  break;
case 164:
#line 1284 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 165:
#line 1288 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 166:
  case_166();
  break;
case 167:
#line 1329 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 168:
#line 1333 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 169:
  case_169();
  break;
case 170:
  case_170();
  break;
case 172:
#line 1409 "cs-parser.jay"
  { yyVal = null; }
  break;
case 173:
#line 1413 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 175:
  case_175();
  break;
case 176:
  case_176();
  break;
case 177:
  case_177();
  break;
case 178:
  case_178();
  break;
case 179:
  case_179();
  break;
case 180:
  case_180();
  break;
case 181:
  case_181();
  break;
case 182:
#line 1472 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 183:
#line 1476 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 184:
  case_184();
  break;
case 185:
  case_185();
  break;
case 186:
  case_186();
  break;
case 187:
  case_187();
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 190:
#line 1551 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 191:
  case_191();
  break;
case 192:
#line 1592 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 194:
  case_194();
  break;
case 195:
  case_195();
  break;
case 196:
  case_196();
  break;
case 197:
  case_197();
  break;
case 198:
  case_198();
  break;
case 199:
  case_199();
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
  case_202();
  break;
case 203:
  case_203();
  break;
case 204:
#line 1690 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 207:
  case_207();
  break;
case 208:
  case_208();
  break;
case 209:
  case_209();
  break;
case 210:
#line 1744 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 211:
  case_211();
  break;
case 212:
#line 1774 "cs-parser.jay"
  {
		  lexer.PropertyParsing = false;
	  }
  break;
case 213:
  case_213();
  break;
case 218:
  case_218();
  break;
case 219:
  case_219();
  break;
case 220:
  case_220();
  break;
case 221:
  case_221();
  break;
case 222:
  case_222();
  break;
case 224:
  case_224();
  break;
case 225:
  case_225();
  break;
case 226:
#line 1916 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 227:
  case_227();
  break;
case 228:
  case_228();
  break;
case 229:
  case_229();
  break;
case 230:
  case_230();
  break;
case 231:
#line 1949 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 236:
#line 1966 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 237:
#line 1970 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 242:
#line 1978 "cs-parser.jay"
  {
	  	Report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 243:
#line 1982 "cs-parser.jay"
  {
	  	Report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 244:
#line 1986 "cs-parser.jay"
  {
	  	Report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 245:
#line 1992 "cs-parser.jay"
  {
	  }
  break;
case 246:
  case_246();
  break;
case 248:
#line 2019 "cs-parser.jay"
  { yyVal = null; }
  break;
case 250:
  case_250();
  break;
case 251:
#line 2035 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 252:
  case_252();
  break;
case 254:
#line 2081 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 255:
#line 2082 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 256:
#line 2083 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 257:
#line 2084 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 258:
#line 2085 "cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 259:
#line 2086 "cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 260:
#line 2088 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 261:
#line 2089 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 262:
#line 2091 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 263:
#line 2092 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 264:
#line 2093 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 265:
#line 2094 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 266:
#line 2095 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 267:
#line 2096 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 268:
#line 2097 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 269:
#line 2098 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 270:
#line 2099 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 271:
#line 2100 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 272:
#line 2101 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 273:
#line 2102 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 274:
#line 2103 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 275:
#line 2104 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 276:
#line 2111 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 277:
  case_277();
  break;
case 278:
#line 2130 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 279:
  case_279();
  break;
case 280:
  case_280();
  break;
case 281:
  case_281();
  break;
case 282:
  case_282();
  break;
case 283:
  case_283();
  break;
case 284:
  case_284();
  break;
case 285:
  case_285();
  break;
case 287:
#line 2233 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 290:
#line 2245 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 291:
  case_291();
  break;
case 292:
#line 2255 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 293:
  case_293();
  break;
case 294:
  case_294();
  break;
case 295:
  case_295();
  break;
case 296:
  case_296();
  break;
case 297:
  case_297();
  break;
case 298:
  case_298();
  break;
case 299:
  case_299();
  break;
case 300:
  case_300();
  break;
case 301:
  case_301();
  break;
case 303:
#line 2364 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 304:
  case_304();
  break;
case 307:
#line 2381 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 308:
#line 2385 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 309:
  case_309();
  break;
case 310:
#line 2398 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 311:
  case_311();
  break;
case 312:
  case_312();
  break;
case 313:
#line 2423 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 316:
  case_316();
  break;
case 317:
  case_317();
  break;
case 318:
  case_318();
  break;
case 319:
  case_319();
  break;
case 320:
  case_320();
  break;
case 321:
  case_321();
  break;
case 322:
  case_322();
  break;
case 323:
  case_323();
  break;
case 325:
  case_325();
  break;
case 326:
  case_326();
  break;
case 327:
  case_327();
  break;
case 328:
  case_328();
  break;
case 330:
  case_330();
  break;
case 331:
  case_331();
  break;
case 334:
#line 2578 "cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 336:
  case_336();
  break;
case 337:
  case_337();
  break;
case 338:
  case_338();
  break;
case 339:
  case_339();
  break;
case 340:
#line 2636 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 341:
  case_341();
  break;
case 342:
#line 2662 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 343:
  case_343();
  break;
case 345:
  case_345();
  break;
case 347:
  case_347();
  break;
case 349:
  case_349();
  break;
case 350:
  case_350();
  break;
case 352:
  case_352();
  break;
case 353:
  case_353();
  break;
case 354:
  case_354();
  break;
case 355:
  case_355();
  break;
case 356:
#line 2755 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 357:
  case_357();
  break;
case 358:
  case_358();
  break;
case 360:
  case_360();
  break;
case 361:
  case_361();
  break;
case 362:
  case_362();
  break;
case 363:
  case_363();
  break;
case 364:
  case_364();
  break;
case 365:
  case_365();
  break;
case 367:
  case_367();
  break;
case 368:
  case_368();
  break;
case 369:
  case_369();
  break;
case 370:
  case_370();
  break;
case 371:
  case_371();
  break;
case 373:
#line 2873 "cs-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 374:
#line 2880 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 376:
  case_376();
  break;
case 378:
  case_378();
  break;
case 380:
  case_380();
  break;
case 382:
#line 2918 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 383:
  case_383();
  break;
case 384:
#line 2938 "cs-parser.jay"
  {
		yyVal = new ComposedCast (((MemberName) yyVals[-1+yyTop]).GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 385:
  case_385();
  break;
case 386:
#line 2947 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 387:
#line 2951 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 388:
  case_388();
  break;
case 389:
  case_389();
  break;
case 390:
  case_390();
  break;
case 391:
  case_391();
  break;
case 392:
#line 2989 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 393:
#line 2990 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 394:
#line 2991 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 395:
#line 2992 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 396:
#line 2993 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 397:
#line 2994 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 399:
#line 2999 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 400:
#line 3000 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 401:
#line 3001 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 402:
#line 3002 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 403:
#line 3003 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 404:
#line 3004 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 405:
#line 3005 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 406:
#line 3006 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 407:
#line 3007 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 427:
  case_427();
  break;
case 428:
  case_428();
  break;
case 432:
#line 3053 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 433:
#line 3057 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 434:
#line 3058 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 439:
  case_439();
  break;
case 440:
#line 3091 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 441:
  case_441();
  break;
case 442:
  case_442();
  break;
case 443:
  case_443();
  break;
case 444:
  case_444();
  break;
case 445:
#line 3122 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 446:
  case_446();
  break;
case 447:
#line 3130 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 448:
  case_448();
  break;
case 449:
  case_449();
  break;
case 450:
#line 3146 "cs-parser.jay"
  { yyVal = null; }
  break;
case 452:
  case_452();
  break;
case 453:
  case_453();
  break;
case 454:
#line 3169 "cs-parser.jay"
  { yyVal = null; }
  break;
case 455:
#line 3173 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 456:
  case_456();
  break;
case 457:
  case_457();
  break;
case 458:
  case_458();
  break;
case 459:
  case_459();
  break;
case 460:
#line 3205 "cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 461:
  case_461();
  break;
case 462:
  case_462();
  break;
case 463:
  case_463();
  break;
case 466:
#line 3233 "cs-parser.jay"
  { yyVal = null; }
  break;
case 468:
  case_468();
  break;
case 469:
  case_469();
  break;
case 470:
  case_470();
  break;
case 471:
  case_471();
  break;
case 472:
  case_472();
  break;
case 473:
#line 3285 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 477:
  case_477();
  break;
case 478:
  case_478();
  break;
case 479:
  case_479();
  break;
case 480:
  case_480();
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
  case_484();
  break;
case 485:
  case_485();
  break;
case 486:
  case_486();
  break;
case 487:
  case_487();
  break;
case 488:
#line 3372 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 490:
#line 3380 "cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 491:
  case_491();
  break;
case 492:
  case_492();
  break;
case 493:
#line 3400 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 494:
#line 3407 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 497:
  case_497();
  break;
case 498:
  case_498();
  break;
case 499:
  case_499();
  break;
case 500:
  case_500();
  break;
case 501:
  case_501();
  break;
case 502:
#line 3473 "cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 503:
  case_503();
  break;
case 504:
  case_504();
  break;
case 507:
#line 3500 "cs-parser.jay"
  { yyVal = null; }
  break;
case 509:
  case_509();
  break;
case 510:
  case_510();
  break;
case 511:
  case_511();
  break;
case 512:
  case_512();
  break;
case 513:
  case_513();
  break;
case 514:
  case_514();
  break;
case 518:
  case_518();
  break;
case 519:
  case_519();
  break;
case 520:
  case_520();
  break;
case 521:
#line 3576 "cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 522:
#line 3580 "cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 523:
#line 3587 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 524:
#line 3591 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 525:
  case_525();
  break;
case 526:
  case_526();
  break;
case 527:
  case_527();
  break;
case 528:
  case_528();
  break;
case 529:
#line 3635 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 530:
  case_530();
  break;
case 533:
  case_533();
  break;
case 534:
  case_534();
  break;
case 535:
  case_535();
  break;
case 536:
  case_536();
  break;
case 537:
  case_537();
  break;
case 538:
  case_538();
  break;
case 539:
  case_539();
  break;
case 540:
  case_540();
  break;
case 541:
  case_541();
  break;
case 542:
  case_542();
  break;
case 543:
  case_543();
  break;
case 544:
  case_544();
  break;
case 545:
#line 3748 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 546:
#line 3752 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 547:
#line 3759 "cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 549:
#line 3767 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 550:
  case_550();
  break;
case 551:
  case_551();
  break;
case 553:
#line 3791 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 554:
#line 3795 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 556:
  case_556();
  break;
case 558:
#line 3816 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 559:
#line 3820 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
#line 3824 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 561:
#line 3828 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 562:
#line 3832 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 563:
#line 3836 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 565:
  case_565();
  break;
case 566:
  case_566();
  break;
case 567:
  case_567();
  break;
case 569:
  case_569();
  break;
case 570:
#line 3868 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 571:
  case_571();
  break;
case 572:
#line 3877 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 573:
#line 3881 "cs-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 575:
  case_575();
  break;
case 576:
  case_576();
  break;
case 578:
  case_578();
  break;
case 579:
  case_579();
  break;
case 580:
  case_580();
  break;
case 581:
  case_581();
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 586:
  case_586();
  break;
case 588:
  case_588();
  break;
case 590:
  case_590();
  break;
case 592:
  case_592();
  break;
case 594:
  case_594();
  break;
case 596:
  case_596();
  break;
case 598:
  case_598();
  break;
case 599:
#line 4005 "cs-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 600:
  case_600();
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
  case_606();
  break;
case 607:
  case_607();
  break;
case 608:
  case_608();
  break;
case 609:
  case_609();
  break;
case 610:
  case_610();
  break;
case 611:
  case_611();
  break;
case 612:
  case_612();
  break;
case 613:
  case_613();
  break;
case 614:
  case_614();
  break;
case 615:
#line 4100 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 616:
  case_616();
  break;
case 619:
#line 4115 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 620:
  case_620();
  break;
case 622:
  case_622();
  break;
case 623:
  case_623();
  break;
case 624:
  case_624();
  break;
case 625:
  case_625();
  break;
case 626:
  case_626();
  break;
case 627:
  case_627();
  break;
case 633:
#line 4177 "cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 635:
#line 4188 "cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 636:
#line 4201 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 637:
  case_637();
  break;
case 638:
  case_638();
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 641:
#line 4240 "cs-parser.jay"
  { yyVal = null; }
  break;
case 642:
#line 4242 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 643:
  case_643();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 648:
  case_648();
  break;
case 649:
  case_649();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 657:
  case_657();
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 660:
  case_660();
  break;
case 661:
  case_661();
  break;
case 663:
#line 4362 "cs-parser.jay"
  {
		current_container.AddBasesForPart (current_class, (List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 665:
#line 4370 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 666:
  case_666();
  break;
case 667:
  case_667();
  break;
case 668:
  case_668();
  break;
case 669:
  case_669();
  break;
case 670:
  case_670();
  break;
case 671:
  case_671();
  break;
case 672:
  case_672();
  break;
case 673:
  case_673();
  break;
case 674:
#line 4459 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 675:
#line 4463 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 676:
#line 4470 "cs-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 677:
  case_677();
  break;
case 678:
#line 4484 "cs-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 679:
#line 4488 "cs-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 680:
  case_680();
  break;
case 681:
#line 4513 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 682:
  case_682();
  break;
case 683:
  case_683();
  break;
case 684:
  case_684();
  break;
case 685:
  case_685();
  break;
case 690:
#line 4557 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 691:
#line 4561 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 693:
  case_693();
  break;
case 696:
#line 4585 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 697:
#line 4589 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 726:
  case_726();
  break;
case 727:
  case_727();
  break;
case 728:
  case_728();
  break;
case 729:
  case_729();
  break;
case 730:
  case_730();
  break;
case 733:
  case_733();
  break;
case 734:
  case_734();
  break;
case 735:
  case_735();
  break;
case 736:
  case_736();
  break;
case 737:
#line 4733 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 738:
#line 4737 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 739:
  case_739();
  break;
case 741:
  case_741();
  break;
case 742:
#line 4758 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 743:
  case_743();
  break;
case 744:
  case_744();
  break;
case 745:
  case_745();
  break;
case 746:
  case_746();
  break;
case 748:
  case_748();
  break;
case 749:
  case_749();
  break;
case 754:
  case_754();
  break;
case 755:
  case_755();
  break;
case 756:
#line 4847 "cs-parser.jay"
  {
		Report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 757:
  case_757();
  break;
case 762:
  case_762();
  break;
case 764:
  case_764();
  break;
case 765:
  case_765();
  break;
case 766:
  case_766();
  break;
case 767:
#line 4897 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 768:
#line 4901 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 769:
#line 4902 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 770:
  case_770();
  break;
case 771:
  case_771();
  break;
case 772:
  case_772();
  break;
case 775:
  case_775();
  break;
case 776:
  case_776();
  break;
case 777:
#line 4970 "cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 778:
  case_778();
  break;
case 779:
  case_779();
  break;
case 781:
  case_781();
  break;
case 782:
  case_782();
  break;
case 783:
  case_783();
  break;
case 784:
#line 5014 "cs-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 785:
#line 5018 "cs-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 786:
  case_786();
  break;
case 787:
  case_787();
  break;
case 788:
  case_788();
  break;
case 789:
#line 5047 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 794:
  case_794();
  break;
case 795:
  case_795();
  break;
case 796:
  case_796();
  break;
case 797:
#line 5086 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 798:
  case_798();
  break;
case 799:
  case_799();
  break;
case 800:
#line 5114 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 802:
  case_802();
  break;
case 803:
  case_803();
  break;
case 805:
#line 5135 "cs-parser.jay"
  { yyVal = null; }
  break;
case 807:
#line 5140 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 811:
  case_811();
  break;
case 812:
  case_812();
  break;
case 813:
  case_813();
  break;
case 814:
  case_814();
  break;
case 821:
  case_821();
  break;
case 822:
  case_822();
  break;
case 823:
  case_823();
  break;
case 824:
  case_824();
  break;
case 825:
  case_825();
  break;
case 826:
  case_826();
  break;
case 827:
  case_827();
  break;
case 828:
  case_828();
  break;
case 829:
  case_829();
  break;
case 832:
#line 5295 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 833:
  case_833();
  break;
case 834:
  case_834();
  break;
case 835:
  case_835();
  break;
case 836:
  case_836();
  break;
case 837:
  case_837();
  break;
case 840:
#line 5348 "cs-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 841:
  case_841();
  break;
case 842:
#line 5367 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 843:
  case_843();
  break;
case 844:
#line 5385 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 845:
#line 5392 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 846:
  case_846();
  break;
case 847:
#line 5402 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 848:
  case_848();
  break;
case 849:
  case_849();
  break;
case 850:
  case_850();
  break;
case 851:
  case_851();
  break;
case 852:
  case_852();
  break;
case 853:
  case_853();
  break;
case 854:
  case_854();
  break;
case 855:
  case_855();
  break;
case 856:
#line 5485 "cs-parser.jay"
  {
		Report.Error (210, lexer.Location, "You must provide an initializer in a fixed or using statement declaration");
	  }
  break;
case 857:
  case_857();
  break;
case 858:
  case_858();
  break;
case 859:
  case_859();
  break;
case 860:
  case_860();
  break;
case 861:
  case_861();
  break;
case 862:
  case_862();
  break;
case 863:
  case_863();
  break;
case 864:
  case_864();
  break;
case 865:
  case_865();
  break;
case 866:
#line 5585 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 867:
  case_867();
  break;
case 868:
#line 5600 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 869:
  case_869();
  break;
case 870:
  case_870();
  break;
case 872:
  case_872();
  break;
case 873:
#line 5645 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 874:
  case_874();
  break;
case 875:
  case_875();
  break;
case 876:
  case_876();
  break;
case 877:
  case_877();
  break;
case 881:
  case_881();
  break;
case 887:
#line 5703 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 888:
  case_888();
  break;
case 889:
#line 5721 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 890:
  case_890();
  break;
case 891:
  case_891();
  break;
case 892:
  case_892();
  break;
case 893:
  case_893();
  break;
case 894:
  case_894();
  break;
case 895:
  case_895();
  break;
case 896:
  case_896();
  break;
case 897:
  case_897();
  break;
case 898:
  case_898();
  break;
case 900:
#line 5863 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 901:
#line 5870 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 902:
  case_902();
  break;
case 904:
  case_904();
  break;
case 905:
  case_905();
  break;
case 907:
  case_907();
  break;
case 908:
  case_908();
  break;
case 909:
#line 5916 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 910:
#line 5920 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 911:
#line 5924 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 912:
#line 5931 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 913:
#line 5935 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 914:
#line 5939 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 916:
  case_916();
  break;
case 917:
  case_917();
  break;
case 920:
  case_920();
  break;
case 921:
  case_921();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_16()
#line 409 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias"){
			syntax_error (lt.Location, "`alias' expected");
		} else if (lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (lt.Location, "external alias");
		} else {
			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop]; 
			current_namespace.AddUsingExternalAlias (lt.Value, lt.Location, Report);
		}
	  }

void case_20()
#line 434 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_21()
#line 439 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_22()
#line 447 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			Report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		current_namespace.AddUsingAlias (lt.Value, (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		ubag.AddUsingAlias (GetLocation (yyVals[-4+yyTop]), lt, GetLocation (yyVals[-2+yyTop]), (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_23()
#line 458 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_24()
#line 466 "cs-parser.jay"
{
		current_namespace.AddUsing ((MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		ubag.AddUsing (GetLocation (yyVals[-2+yyTop]), (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_25()
#line 479 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (yyVals[-2+yyTop] != null) {
			Report.Error(1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}

		current_namespace = new NamespaceEntry (module,
			current_namespace, file, name.GetName ());
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
		ubag.DeclareNamespace (GetLocation (yyVals[-1+yyTop]), name);
	  }

void case_26()
#line 493 "cs-parser.jay"
{ 
		current_namespace = current_namespace.Parent;
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
		ubag.EndNamespace (GetLocation (yyVals[0+yyTop]));
	  }

void case_27()
#line 503 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_28()
#line 508 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_29()
#line 513 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_34()
#line 531 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (name.TypeArguments != null)
			syntax_error (lexer.Location, "namespace name expected");

		yyVal = name;
	  }

void case_35()
#line 543 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
		ubag.OpenNamespace (GetLocation (yyVals[0+yyTop]));
			
	  }

void case_45()
#line 579 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			DeclSpace ds = (DeclSpace)yyVals[0+yyTop];
			if ((ds.ModFlags & (Modifiers.PRIVATE|Modifiers.PROTECTED)) != 0){
				Report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_53()
#line 620 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes)yyVals[0+yyTop];
			if (global_attrs_enabled) {
				module.AddAttributes (attrs.Attrs, current_namespace);
			} else {
				foreach (Attribute a in attrs.Attrs) {
					Report.Error (1730, a.Location, "Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");
				}
			}
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_54()
#line 637 "cs-parser.jay"
{
		global_attrs_enabled = false;
		yyVal = null;
      }

void case_55()
#line 642 "cs-parser.jay"
{ 
		global_attrs_enabled = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_56()
#line 651 "cs-parser.jay"
{
		if (current_attr_target != String.Empty) {
			var sect = (List<Attribute>) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (!string.IsNullOrEmpty (current_attr_target)) {
					module.AddAttributes (sect, current_namespace);
					yyVal = null;
				} else {
					yyVal = new Attributes (sect);
				}
				if (yyVal == null) {
					if (doc_support) {
						Lexer.check_incorrect_doc_comment ();
						Lexer.doc_state =
							XmlCommentState.Allowed;
					}
				}
			} else {
				yyVal = new Attributes (sect);
			}		
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }

void case_57()
#line 678 "cs-parser.jay"
{
		if (current_attr_target != String.Empty) {
			Attributes attrs = yyVals[-1+yyTop] as Attributes;
			var sect = (List<Attribute>) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (!string.IsNullOrEmpty (current_attr_target)) {
					module.AddAttributes (sect, current_namespace);
					yyVal = null;
				} else {
					if (attrs == null)
						attrs = new Attributes (sect);
					else
						attrs.AddAttributes (sect);			
				}
			} else {
				if (attrs == null)
					attrs = new Attributes (sect);
				else
					attrs.AddAttributes (sect);
			}		
			yyVal = attrs;
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }

void case_59()
#line 713 "cs-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_63()
#line 736 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }

void case_66()
#line 743 "cs-parser.jay"
{
		string name = GetTokenName (yyToken);
		yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
	  }

void case_68()
#line 755 "cs-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }

void case_70()
#line 769 "cs-parser.jay"
{
		--lexer.parsing_block;
		MemberName mname = (MemberName) yyVals[-2+yyTop];
		if (mname.IsGeneric) {
			Report.Error (404, lexer.Location,
				      "'<' unexpected: attributes cannot be generic");
		}

		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];
		ATypeNameExpression expr = mname.GetTypeExpression ();

		if (current_attr_target == String.Empty)
			yyVal = null;
		else if (global_attrs_enabled && (current_attr_target == "assembly" || current_attr_target == "module"))
			/* FIXME: supply "nameEscaped" parameter here.*/
			yyVal = new GlobalAttribute (current_attr_target, expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname));
		else
			yyVal = new Attribute (current_attr_target, expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname));
	  }

void case_75()
#line 806 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_76()
#line 812 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_77()
#line 818 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			Report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
	  }

void case_78()
#line 833 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (o[1], GetLocation (yyVals[-1+yyTop]));
	  }

void case_82()
#line 858 "cs-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
	  }

void case_83()
#line 867 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
	  }

void case_101()
#line 914 "cs-parser.jay"
{
		Report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_103()
#line 931 "cs-parser.jay"
{ 
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Struct (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }

void case_104()
#line 937 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]));
	  }

void case_105()
#line 948 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_106()
#line 954 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_108()
#line 966 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_124()
#line 1008 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_class, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_container.AddConstant ((Const) current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			Report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_125()
#line 1021 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_130()
#line 1051 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_132()
#line 1064 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_133()
#line 1070 "cs-parser.jay"
{
		Report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_136()
#line 1085 "cs-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			Report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_class, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_container.AddField (current_field);
		yyVal = current_field;
	  }

void case_137()
#line 1100 "cs-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_138()
#line 1113 "cs-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_container.AddField (current_field);
	  }

void case_139()
#line 1124 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[-6+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_142()
#line 1147 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_143()
#line 1153 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_148()
#line 1180 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_150()
#line 1190 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_155()
#line 1216 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_157()
#line 1229 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_158()
#line 1235 "cs-parser.jay"
{
		Report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_161()
#line 1245 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_162()
#line 1254 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full aot*/
		current_container.AddMethod ((Method) yyVals[0+yyTop]);
	  }

void case_163()
#line 1262 "cs-parser.jay"
{
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface && method.Block != null) {
			Report.Error (531, method.Location, "`{0}': interface members cannot have a definition", method.GetSignatureForError ());
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_166()
#line 1290 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     (FullNamedExpression) yyVals[-7+yyTop], current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		} else if (yyVals[0+yyTop] != null) {
			Report.Error (80, GetLocation (yyVals[0+yyTop]),
				"Constraints are not allowed on non-generic declarations");
		}

		Method method = new Method (current_class, generic, (FullNamedExpression) yyVals[-7+yyTop], (Modifiers) yyVals[-8+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-9+yyTop]);
				     
		if (yyVals[0+yyTop] != null && ((method.ModFlags & Modifiers.OVERRIDE) != 0 || method.IsExplicitImpl)) {
			Report.Error (460, method.Location,
				"`{0}': Cannot specify constraints for overrides and explicit interface implementation methods",
				method.GetSignatureForError ());
		}

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_169()
#line 1335 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (yyVals[-1+yyTop] != null && name.TypeArguments == null)
			Report.Error (80, lexer.Location,
				      "Constraints are not allowed on non-generic declarations");

		Method method;
		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
				new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-7+yyTop])),
				current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		}

		var modifiers = (Modifiers) yyVals[-9+yyTop];


		const Modifiers invalid_partial_mod = Modifiers.AccessibilityMask | Modifiers.ABSTRACT | Modifiers.EXTERN |
			Modifiers.NEW | Modifiers.OVERRIDE | Modifiers.SEALED | Modifiers.VIRTUAL;

		if ((modifiers & invalid_partial_mod) != 0) {
			Report.Error (750, name.Location, "A partial method cannot define access modifier or " +
       			"any of abstract, extern, new, override, sealed, or virtual modifiers");
			modifiers &= ~invalid_partial_mod;
		}

		if ((current_class.ModFlags & Modifiers.PARTIAL) == 0) {
			Report.Error (751, name.Location, "A partial method must be declared within a " +
       			"partial class or partial struct");
		}
		
		modifiers |= Modifiers.PARTIAL | Modifiers.PRIVATE;
		
		method = new Method (current_class, generic, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-7+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-10+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		/* TODO: lbag, push void*/
		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-8+yyTop]));
		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_170()
#line 1390 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-3+yyTop];
		Report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		Method method = new Method (current_class, null, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_175()
#line 1419 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  	lbag.AddLocation (yyVal, lbag.GetLocations (pars_list));
	  }

void case_176()
#line 1425 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_177()
#line 1432 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_178()
#line 1438 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_179()
#line 1445 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_180()
#line 1455 "cs-parser.jay"
{
		Report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_181()
#line 1461 "cs-parser.jay"
{
		Report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_184()
#line 1478 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_185()
#line 1486 "cs-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_186()
#line 1495 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				Report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				Report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AppendTo (pars, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_187()
#line 1519 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_188()
#line 1528 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		Report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_189()
#line 1538 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], "NeedSomeGeneratorHere", (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_191()
#line 1553 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				Report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				Report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			Report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation, GetLocation (yyVals[-2+yyTop])); /* parameterModifierLocation should be ignored when mod == NONE*/
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_194()
#line 1598 "cs-parser.jay"
{
		yyVal = yyVals[0+yyTop];
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_195()
#line 1603 "cs-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					Report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					Report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					Report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_196()
#line 1627 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_197()
#line 1634 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_198()
#line 1641 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_199()
#line 1654 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_200()
#line 1659 "cs-parser.jay"
{
		Report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_201()
#line 1666 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_202()
#line 1674 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			Report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_203()
#line 1679 "cs-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			Report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			Report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }

void case_205()
#line 1695 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		Report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_206()
#line 1706 "cs-parser.jay"
{
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_207()
#line 1711 "cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new Property (current_class, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			Report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_container.AddProperty ((Property)current_property);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_208()
#line 1725 "cs-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_209()
#line 1732 "cs-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_211()
#line 1746 "cs-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-6+yyTop];
		Indexer indexer = new Indexer (current_class, type,
			(MemberName)yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-8+yyTop]);
			
		current_property = indexer;

  		current_container.AddIndexer (indexer);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			Report.Error (620, GetLocation (yyVals[-6+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.Parameters.IsEmpty) {
			Report.Error (1551, GetLocation (yyVals[-4+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_213()
#line 1776 "cs-parser.jay"
{ 
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-1+yyTop]));
		current_property = null;		
	  }

void case_218()
#line 1792 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		Report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				Report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				Report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_219()
#line 1806 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			Report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, GetModifierLocations ());
		lexer.PropertyParsing = false;
	  }

void case_220()
#line 1828 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				Report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_221()
#line 1849 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			Report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, GetModifierLocations ());
		lexer.PropertyParsing = false;
	  }

void case_222()
#line 1876 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				Report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_224()
#line 1898 "cs-parser.jay"
{
		lbag.AppendToMember (lbag.LastMember, GetLocation (yyVals[0+yyTop]));
	  	yyVal = null;
	  }

void case_225()
#line 1903 "cs-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_227()
#line 1918 "cs-parser.jay"
{
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Interface (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));		
	  }

void case_228()
#line 1925 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_229()
#line 1936 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_230()
#line 1942 "cs-parser.jay"
{
	    lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_246()
#line 1994 "cs-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_class, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_container.AddOperator (op);

			lbag.AddMember (op, GetModifierLocations (), lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_250()
#line 2025 "cs-parser.jay"
{
		Report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_252()
#line 2037 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				Report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				Report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				Report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				Report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_277()
#line 2113 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_279()
#line 2132 "cs-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_280()
#line 2147 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_281()
#line 2153 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_282()
#line 2163 "cs-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_container.AddConstructor (c);

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_283()
#line 2182 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_284()
#line 2191 "cs-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];  
		
		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_285()
#line 2202 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-6+yyTop];
		var mods = (Modifiers) yyVals[-7+yyTop];
		ConstructorInitializer ci = (ConstructorInitializer) yyVals[0+yyTop];

		Constructor c = new Constructor (current_class, lt.Value, mods,
			(Attributes) yyVals[-8+yyTop], current_local_parameters, ci, lt.Location);
		
		if (lt.Value != current_container.MemberName.Name) {
			Report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.AccessibilityMask) != 0){
				Report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
			if (ci != null) {
				Report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			
			}
		}
		
		lbag.AddMember (c, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = c;
	  }

void case_291()
#line 2247 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_293()
#line 2257 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_294()
#line 2263 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_295()
#line 2271 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_296()
#line 2280 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			Report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			Report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_class, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (d);
		lbag.AddMember (d, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_297()
#line 2305 "cs-parser.jay"
{
		current_event_field = new EventField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_container.AddEvent (current_event_field);
		
		if (current_event_field.MemberName.Left != null) {
			Report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_298()
#line 2319 "cs-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_299()
#line 2332 "cs-parser.jay"
{
		current_event = new EventProperty (current_class, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_container.AddEvent (current_event);
		lbag.AddMember (current_event, GetModifierLocations (), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_300()
#line 2340 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			Report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_301()
#line 2347 "cs-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_304()
#line 2366 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_309()
#line 2390 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_311()
#line 2400 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_312()
#line 2409 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			Report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_316()
#line 2430 "cs-parser.jay"
{
		Report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_317()
#line 2435 "cs-parser.jay"
{
		Report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_318()
#line 2440 "cs-parser.jay"
{ 
		Report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_319()
#line 2448 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			Report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_320()
#line 2460 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_321()
#line 2476 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			Report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_322()
#line 2488 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_323()
#line 2504 "cs-parser.jay"
{
		Report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_325()
#line 2516 "cs-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_326()
#line 2521 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			Report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_class (new Enum (current_namespace, current_class, (TypeExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], MakeName (name), (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_327()
#line 2533 "cs-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_328()
#line 2539 "cs-parser.jay"
{
		if (doc_support)
			current_class.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_330()
#line 2556 "cs-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null || !EnumSpec.IsValidUnderlyingType (te.Type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), Report);
			yyVal = null;
		} else {
			yyVal = yyVals[0+yyTop];
		}
	 }

void case_331()
#line 2566 "cs-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_336()
#line 2584 "cs-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_337()
#line 2592 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_class).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_338()
#line 2605 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_339()
#line 2613 "cs-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_class).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_341()
#line 2638 "cs-parser.jay"
{
		valid_param_mod = 0;

		MemberName name = MakeName ((MemberName) yyVals[-4+yyTop]);
		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_namespace, current_class, (FullNamedExpression) yyVals[-5+yyTop],
					     (Modifiers) yyVals[-7+yyTop], name, p, (Attributes) yyVals[-8+yyTop]);

		if (doc_support) {
			del.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		ubag.PushTypeDeclaration (del);
		ubag.PopTypeDeclaration ();

		current_container.AddDelegate (del);
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_343()
#line 2664 "cs-parser.jay"
{
		current_delegate.SetParameterInfo ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, GetModifierLocations (), GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_345()
#line 2677 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_347()
#line 2688 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }

void case_349()
#line 2699 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_350()
#line 2708 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_352()
#line 2720 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_353()
#line 2727 "cs-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_354()
#line 2735 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_355()
#line 2741 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_357()
#line 2757 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_358()
#line 2766 "cs-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeArguments != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_360()
#line 2777 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_361()
#line 2786 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeContainer.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_362()
#line 2791 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName ((MemberName) yyVals[-1+yyTop], TypeContainer.DefaultIndexerName, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_363()
#line 2799 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_364()
#line 2805 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_365()
#line 2813 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_367()
#line 2823 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_368()
#line 2834 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_369()
#line 2840 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_370()
#line 2850 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameterName (lt.Value, (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop], lt.Location);
  	  }

void case_371()
#line 2855 "cs-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			Report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameterName ("", null, lexer.Location);
  	  }

void case_376()
#line 2889 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_378()
#line 2898 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_380()
#line 2907 "cs-parser.jay"
{
	  	Report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_383()
#line 2923 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast (name.GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			if (name.Left == null && name.Name == "var")
				yyVal = new VarExpr (name.Location);
			else
				yyVal = name.GetTypeExpression ();
		}
	  }

void case_385()
#line 2940 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_388()
#line 2956 "cs-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_389()
#line 2962 "cs-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_390()
#line 2971 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			Report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_391()
#line 2978 "cs-parser.jay"
{
	  	Error_TypeExpected (lexer.Location);
		yyVal = null;
	  }

void case_427()
#line 3039 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_428()
#line 3043 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_439()
#line 3084 "cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_441()
#line 3096 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_442()
#line 3102 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_443()
#line 3108 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_444()
#line 3114 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }

void case_446()
#line 3123 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_448()
#line 3131 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_449()
#line 3139 "cs-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_452()
#line 3152 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	}
	  }

void case_453()
#line 3162 "cs-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_456()
#line 3178 "cs-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_457()
#line 3184 "cs-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_458()
#line 3189 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_459()
#line 3197 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_461()
#line 3206 "cs-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_462()
#line 3214 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_463()
#line 3221 "cs-parser.jay"
{
	  	Report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }

void case_468()
#line 3239 "cs-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_469()
#line 3245 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_470()
#line 3255 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				Report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_471()
#line 3270 "cs-parser.jay"
{
	  	Report.Error (839, GetLocation (yyVals[0+yyTop]), "An argument is missing");
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_472()
#line 3275 "cs-parser.jay"
{
	  	Report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_477()
#line 3296 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_478()
#line 3301 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_479()
#line 3306 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_480()
#line 3311 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_482()
#line 3323 "cs-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_483()
#line 3331 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_484()
#line 3337 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_485()
#line 3343 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_486()
#line 3351 "cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_487()
#line 3357 "cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
		yyVal = args;	  
	  }

void case_491()
#line 3385 "cs-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_492()
#line 3390 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_495()
#line 3412 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_496()
#line 3425 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_497()
#line 3437 "cs-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_498()
#line 3445 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		Report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_499()
#line 3452 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_500()
#line 3459 "cs-parser.jay"
{
		Report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_501()
#line 3464 "cs-parser.jay"
{
		Error_SyntaxError (1526, yyToken, "Unexpected symbol");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_503()
#line 3475 "cs-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_504()
#line 3483 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_509()
#line 3506 "cs-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_510()
#line 3512 "cs-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_511()
#line 3521 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_512()
#line 3527 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_513()
#line 3533 "cs-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_514()
#line 3538 "cs-parser.jay"
{
		Report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_518()
#line 3553 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_519()
#line 3561 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_520()
#line 3566 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_525()
#line 3596 "cs-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_526()
#line 3603 "cs-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_527()
#line 3617 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_528()
#line 3623 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_530()
#line 3637 "cs-parser.jay"
{
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_533()
#line 3648 "cs-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_534()
#line 3656 "cs-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_535()
#line 3662 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
	  }

void case_536()
#line 3669 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_537()
#line 3675 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_538()
#line 3681 "cs-parser.jay"
{
		var te = ((MemberName) yyVals[-3+yyTop]).GetTypeExpression ();
		if (te.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (te, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_539()
#line 3693 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_540()
#line 3703 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_541()
#line 3714 "cs-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_542()
#line 3722 "cs-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_543()
#line 3730 "cs-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_544()
#line 3738 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop])), lt.Value, lt.Location);
	  }

void case_550()
#line 3769 "cs-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_551()
#line 3777 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_556()
#line 3801 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_565()
#line 3842 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_566()
#line 3847 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_567()
#line 3852 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_569()
#line 3861 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_571()
#line 3870 "cs-parser.jay"
{
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }

void case_575()
#line 3887 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_576()
#line 3892 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_578()
#line 3901 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_579()
#line 3906 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_580()
#line 3911 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
#line 3916 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_583()
#line 3925 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_584()
#line 3930 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
#line 3939 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_588()
#line 3948 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_590()
#line 3957 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_592()
#line 3966 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_594()
#line 3975 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_596()
#line 3984 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_598()
#line 3995 "cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_600()
#line 4007 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_601()
#line 4012 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_602()
#line 4017 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_603()
#line 4022 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_604()
#line 4027 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_605()
#line 4032 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_606()
#line 4037 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_607()
#line 4042 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_608()
#line 4047 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_609()
#line 4052 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_610()
#line 4060 "cs-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_611()
#line 4067 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			Report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_612()
#line 4081 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_613()
#line 4087 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_614()
#line 4093 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_616()
#line 4101 "cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_620()
#line 4117 "cs-parser.jay"
{
		Block b = end_block (lexer.Location);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_622()
#line 4128 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	
		yyVal = EmptyExpression.Null;
	  }

void case_623()
#line 4136 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), GetLocation (yyVals[-1+yyTop]));
	  }

void case_624()
#line 4142 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_625()
#line 4147 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "lambda expressions");
	  
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }

void case_626()
#line 4154 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }

void case_627()
#line 4159 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_637()
#line 4203 "cs-parser.jay"
{
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		Class c = new Class (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_class (c, yyVals[-3+yyTop]);
	  }

void case_638()
#line 4214 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]));

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_639()
#line 4226 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_640()
#line 4232 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_643()
#line 4247 "cs-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
	  }

void case_646()
#line 4257 "cs-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			Report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			Report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_647()
#line 4276 "cs-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container == module)
			Report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_648()
#line 4284 "cs-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_649()
#line 4289 "cs-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_650()
#line 4294 "cs-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_651()
#line 4299 "cs-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_652()
#line 4304 "cs-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_653()
#line 4309 "cs-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_654()
#line 4314 "cs-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_655()
#line 4319 "cs-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_656()
#line 4324 "cs-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_657()
#line 4329 "cs-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_658()
#line 4334 "cs-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_659()
#line 4339 "cs-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_660()
#line 4344 "cs-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_661()
#line 4351 "cs-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_666()
#line 4372 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_667()
#line 4380 "cs-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_668()
#line 4386 "cs-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				Report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_669()
#line 4405 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_670()
#line 4413 "cs-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_671()
#line 4419 "cs-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			Report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				Report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					Report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_672()
#line 4445 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			Report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_673()
#line 4452 "cs-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_677()
#line 4472 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");

		yyVal = yyVals[0+yyTop];
	  }

void case_680()
#line 4506 "cs-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_682()
#line 4518 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_683()
#line 4523 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_684()
#line 4532 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_685()
#line 4537 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_693()
#line 4564 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_726()
#line 4628 "cs-parser.jay"
{
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_727()
#line 4633 "cs-parser.jay"
{
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_728()
#line 4638 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_729()
#line 4646 "cs-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_730()
#line 4654 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);

		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_733()
#line 4667 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_734()
#line 4683 "cs-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_735()
#line 4713 "cs-parser.jay"
{
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }

void case_736()
#line 4724 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_739()
#line 4739 "cs-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_741()
#line 4748 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_743()
#line 4763 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_744()
#line 4770 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AppendTo (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_745()
#line 4776 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_746()
#line 4783 "cs-parser.jay"
{
		if (current_variable.Initializer != null) {
			lbag.AddLocation (current_variable, GetLocation (yyVals[-6+yyTop]), savedLocation, GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (current_variable, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = current_variable;;
		current_variable = null;
	  }

void case_748()
#line 4797 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
	  }

void case_749()
#line 4802 "cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			Report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_754()
#line 4824 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_755()
#line 4833 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_757()
#line 4849 "cs-parser.jay"
{
		savedLocation = GetLocation (yyVals[-1+yyTop]);
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_762()
#line 4867 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_764()
#line 4880 "cs-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_765()
#line 4885 "cs-parser.jay"
{
		Report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_766()
#line 4893 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_770()
#line 4911 "cs-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (Report, GetLocation (yyVals[0+yyTop]));
			s = EmptyExpressionStatement.Instance;
		}

		yyVal = new StatementExpression (s);
	  }

void case_771()
#line 4924 "cs-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_772()
#line 4932 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_775()
#line 4946 "cs-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_776()
#line 4955 "cs-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_778()
#line 4972 "cs-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_779()
#line 4981 "cs-parser.jay"
{
		Report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_781()
#line 4990 "cs-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_782()
#line 4997 "cs-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_783()
#line 5004 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
		yyVal = new List<SwitchSection> ();
	  }

void case_786()
#line 5023 "cs-parser.jay"
{
		var labels = new List<SwitchLabel> (2);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_787()
#line 5030 "cs-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_788()
#line 5040 "cs-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_794()
#line 5059 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_795()
#line 5071 "cs-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_796()
#line 5079 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
	  }

void case_798()
#line 5095 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = new For ((Statement) yyVals[-6+yyTop], (BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));

		yyVal = end_block (GetLocation (yyVals[-5+yyTop]));
	  }

void case_799()
#line 5107 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_802()
#line 5120 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_803()
#line 5127 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_811()
#line 5151 "cs-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_812()
#line 5167 "cs-parser.jay"
{
		Report.Error (230, GetLocation (yyVals[-5+yyTop]), "Type and identifier are both required in a foreach statement");
		yyVal = null;
	  }

void case_813()
#line 5172 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_814()
#line 5181 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_821()
#line 5204 "cs-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_822()
#line 5212 "cs-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_823()
#line 5220 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_824()
#line 5226 "cs-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_825()
#line 5231 "cs-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_826()
#line 5239 "cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_827()
#line 5247 "cs-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_828()
#line 5255 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			Report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_829()
#line 5271 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_833()
#line 5297 "cs-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_834()
#line 5302 "cs-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]), true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_835()
#line 5307 "cs-parser.jay"
{
		Report.Error (1524, GetLocation (yyVals[-2+yyTop]), "Expected catch or finally");
		yyVal = null;
	  }

void case_836()
#line 5315 "cs-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_837()
#line 5322 "cs-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [0].IsGeneral) {
			Report.Error (1017, c.loc, "Try statement already has an empty catch block");
		} else {
			if (c.IsGeneral)
				l.Insert (0, c);
			else
				l.Add (c);
		}
		
		yyVal = l;
	  }

void case_841()
#line 5350 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}

		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_843()
#line 5369 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			Report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_846()
#line 5397 "cs-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_848()
#line 5407 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_849()
#line 5418 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_850()
#line 5428 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_851()
#line 5433 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_852()
#line 5446 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_853()
#line 5456 "cs-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_854()
#line 5461 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_855()
#line 5471 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = u;
	  }

void case_857()
#line 5487 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_858()
#line 5498 "cs-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_859()
#line 5510 "cs-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_860()
#line 5521 "cs-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_861()
#line 5528 "cs-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_862()
#line 5537 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_863()
#line 5545 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_864()
#line 5560 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_865()
#line 5568 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_867()
#line 5587 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_869()
#line 5602 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_870()
#line 5619 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_872()
#line 5635 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_874()
#line 5647 "cs-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_875()
#line 5654 "cs-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_876()
#line 5662 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_877()
#line 5669 "cs-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_881()
#line 5685 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_888()
#line 5705 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_890()
#line 5723 "cs-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_891()
#line 5733 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_892()
#line 5741 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_893()
#line 5749 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_894()
#line 5757 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_895()
#line 5793 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_896()
#line 5801 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_897()
#line 5809 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_898()
#line 5817 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_902()
#line 5872 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_904()
#line 5883 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_905()
#line 5890 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_907()
#line 5899 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_908()
#line 5906 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_916()
#line 5946 "cs-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_917()
#line 5962 "cs-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_920()
#line 5989 "cs-parser.jay"
{ 
		current_container = new Class (current_namespace, current_class, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);
		current_class = current_container;

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		Method method = new Method (
			current_class,
			null, /* generic*/
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			new MemberName ("Host"),
			pars,
			null /* attributes */);
			
		current_container.AddMethod (method);			

		oob_stack.Push (method);
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_921()
#line 6019 "cs-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    0,    0,    0,    5,    0,    2,    2,    1,    1,
    6,    6,    6,   10,   10,    7,    7,   11,   11,    8,
    8,   12,   12,   13,   20,   16,   18,   18,   18,   21,
   21,   22,   22,   15,   24,   19,   25,   25,   23,   23,
   26,   26,   27,   27,    9,    9,    9,   28,   28,   28,
   28,   28,    3,   17,   17,   34,   34,   37,   35,   40,
   36,   36,   38,   38,   38,   38,   39,   39,   44,   41,
   42,   43,   43,   45,   45,   45,   45,   45,   46,   46,
   50,   47,   49,   51,   51,   51,   52,   52,   53,   53,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   67,   69,   72,   73,   30,   30,   75,   71,   74,
   74,   76,   76,   77,   77,   77,   77,   77,   77,   77,
   77,   77,   77,   80,   55,   81,   81,   82,   82,   83,
   85,   79,   79,   84,   84,   90,   56,   94,   56,   56,
   89,   97,   89,   91,   91,   98,   98,   99,  100,   99,
   95,   95,  101,  101,  102,  103,   93,   93,   96,   96,
   96,  106,   57,  109,  110,  104,  111,  112,  104,  104,
  105,  105,  108,  108,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  116,  116,  119,  119,  119,  122,
  119,  120,  120,  123,  123,  124,  124,  124,  117,  117,
  117,  125,  125,  125,  118,  127,  129,  130,   58,  132,
  133,  134,   60,  128,  128,  128,  128,  128,  138,  135,
  139,  136,  137,  137,  137,  140,  141,  142,  144,   31,
   31,  143,  143,  145,  145,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  149,   61,  148,  148,  150,  150,
  153,  147,  147,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  155,  154,  156,  154,  154,
  154,   62,  159,  161,  157,  158,  158,  160,  160,  165,
  163,  166,  163,  163,  167,   63,  169,   59,  172,  173,
   59,  168,  175,  168,  170,  170,  176,  176,  177,  178,
  177,  179,  174,  171,  171,  171,  171,  171,  183,  180,
  184,  181,  182,  182,  186,  188,  189,   32,  185,  185,
  185,  187,  187,  187,  190,  190,  191,  192,  191,  193,
  194,  195,   33,  196,  196,   14,   14,  197,  197,  200,
  199,  199,  199,  201,  201,  203,   66,  126,  107,  107,
  131,  131,  204,  204,  204,  202,  202,  205,  205,  206,
  206,  208,  208,   88,   78,   78,   92,   92,  121,  121,
  151,  151,  209,  209,  209,  209,  209,  213,  213,  214,
  214,  212,  212,  212,  212,  212,  212,  212,  215,  215,
  215,  215,  215,  215,  215,  215,  215,  216,  216,  216,
  216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
  216,  216,  216,  216,  216,  216,  217,  217,  217,  218,
  218,  218,  237,  237,  238,  238,  239,  239,  220,  220,
  236,  236,  236,  236,  236,  236,  236,  236,  222,  240,
  240,  241,  241,  242,  242,  244,  244,  244,  245,  245,
  245,  245,  245,  246,  246,  164,  164,  250,  250,  250,
  250,  250,  252,  252,  251,  251,  253,  253,  253,  253,
  254,  223,  249,  249,  249,  255,  255,  256,  256,  224,
  225,  225,  226,  227,  228,  228,  219,  219,  219,  219,
  219,  261,  257,  229,  262,  262,  263,  263,  264,  264,
  265,  265,  265,  265,  258,  258,  210,  210,  260,  260,
  266,  266,  259,  259,   87,   87,  267,  267,  268,  230,
  269,  269,  269,  270,  270,  270,  270,  270,  271,  198,
  231,  232,  233,  234,  273,  235,  272,  272,  275,  274,
  221,  276,  276,  276,  276,  278,  277,  277,  277,  277,
  277,  277,  277,  279,  279,  279,  279,  280,  280,  280,
  280,  280,  280,  281,  281,  281,  282,  282,  282,  282,
  282,  283,  283,  283,  284,  284,  285,  285,  286,  286,
  287,  287,  288,  288,  289,  289,  290,  290,  291,  291,
  291,  291,  291,  291,  291,  291,  291,  291,  291,  292,
  292,  293,  293,  293,  294,  294,  295,  295,  298,  296,
  297,  297,  300,  299,  301,  302,  299,   48,   48,  247,
  247,  247,  247,   86,  304,  305,  306,  307,  308,   29,
   65,   65,   64,   64,  113,  113,  309,  309,  309,  309,
  309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
  309,   68,   68,   70,   70,   70,  310,  310,  311,  312,
  312,  313,  313,  313,  313,  207,  207,  314,  314,  316,
  114,  317,  317,  318,  162,  315,  315,  319,  319,  320,
  320,  320,  320,  324,  324,  325,  325,  325,  322,  322,
  322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
  322,  326,  326,  326,  326,  326,  326,  326,  326,  326,
  326,  326,  326,  326,  340,  340,  340,  340,  327,  341,
  323,  342,  342,  343,  343,  343,  343,  343,  343,  211,
  211,  344,  346,  321,  349,  321,  345,  345,  345,  347,
  347,  352,  352,  353,  353,  348,  348,  350,  350,  354,
  354,  355,  351,  351,  351,  328,  328,  339,  339,  356,
  357,  357,  329,  329,  358,  358,  361,  359,  360,  360,
  362,  362,  362,  365,  363,  364,  364,  366,  366,  330,
  330,  330,  330,  367,  368,  372,  369,  371,  371,  373,
  373,  377,  376,  376,  374,  374,  375,  375,  379,  378,
  378,  370,  380,  370,  331,  331,  331,  331,  331,  331,
  381,  382,  383,  383,  383,  384,  385,  386,  386,  387,
  387,  332,  332,  332,  332,  388,  388,  390,  390,  389,
  391,  389,  389,  333,  334,  392,  337,  335,  394,  395,
  338,  396,  397,  336,  336,  393,  393,  303,  303,  303,
  303,  398,  398,  400,  400,  402,  401,  403,  401,  399,
  399,  399,  407,  405,  408,  409,  405,  404,  404,  410,
  410,  411,  411,  411,  411,  411,  416,  412,  417,  413,
  418,  419,  420,  414,  422,  423,  424,  414,  421,  421,
  426,  415,  425,  429,  425,  428,  431,  428,  427,  427,
  427,  430,  430,  430,  406,  432,  406,    4,    4,  433,
    4,    4,  434,  434,  434,  434,  248,  248,  243,  243,
  };
   static readonly short [] yyLen = {           2,
    2,    3,    2,    1,    0,    3,    0,    1,    1,    2,
    1,    1,    1,    1,    2,    4,    2,    1,    2,    1,
    1,    5,    2,    3,    0,    6,    1,    3,    1,    0,
    1,    0,    1,    1,    0,    6,    0,    1,    0,    1,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    1,    1,    2,    0,    3,    0,
    6,    3,    1,    1,    1,    1,    1,    3,    0,    3,
    1,    0,    3,    0,    1,    1,    3,    3,    1,    1,
    0,    4,    4,    0,    1,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    0,    0,    0,   13,    5,    0,    4,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    9,    0,    1,    1,    2,    3,
    0,    3,    1,    1,    1,    0,    8,    0,    9,    6,
    0,    0,    3,    0,    1,    1,    2,    2,    0,    5,
    0,    1,    1,    2,    3,    0,    4,    2,    1,    1,
    1,    0,    3,    0,    0,   10,    0,    0,   11,    8,
    1,    1,    0,    1,    1,    3,    3,    3,    5,    3,
    5,    1,    1,    1,    1,    3,    4,    6,    4,    0,
    7,    0,    1,    1,    2,    1,    1,    1,    4,    6,
    4,    1,    2,    2,    1,    0,    0,    0,   10,    0,
    0,    0,   13,    1,    2,    1,    2,    1,    0,    5,
    0,    5,    1,    1,    1,    0,    0,    0,    0,   15,
    5,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    0,    5,    1,    1,    1,    1,
    0,    7,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    7,    0,    7,    2,
    2,    2,    0,    0,    9,    1,    1,    0,    1,    0,
    6,    0,    6,    1,    0,    8,    0,    9,    0,    0,
   10,    0,    0,    3,    0,    1,    1,    2,    2,    0,
    5,    0,    2,    2,    2,    1,    1,    1,    0,    5,
    0,    5,    1,    1,    0,    0,    0,   12,    0,    2,
    2,    0,    1,    2,    1,    3,    2,    0,    5,    0,
    0,    0,   13,    0,    1,    1,    3,    1,    4,    2,
    0,    3,    2,    1,    3,    0,    3,    1,    1,    3,
    1,    2,    3,    4,    4,    0,    3,    1,    3,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    2,    2,    2,    1,    3,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
    4,    4,    4,    3,    3,    4,    3,    4,    4,    0,
    1,    3,    4,    0,    1,    1,    3,    2,    3,    1,
    2,    3,    2,    1,    1,    0,    1,    1,    3,    3,
    2,    2,    1,    1,    1,    1,    2,    2,    4,    3,
    1,    4,    1,    3,    2,    1,    3,    1,    1,    1,
    4,    3,    2,    2,    6,    3,    7,    4,    3,    7,
    3,    0,    2,    4,    1,    2,    0,    1,    1,    3,
    3,    1,    1,    1,    0,    1,    1,    2,    2,    3,
    1,    2,    0,    1,    2,    4,    1,    3,    0,    5,
    1,    1,    1,    2,    3,    3,    4,    4,    1,    2,
    4,    4,    4,    3,    0,    4,    0,    1,    0,    4,
    4,    1,    2,    2,    1,    4,    1,    2,    2,    2,
    2,    2,    2,    1,    3,    3,    3,    1,    3,    3,
    3,    3,    3,    1,    3,    3,    1,    3,    3,    3,
    3,    1,    3,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    1,    5,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
    3,    3,    2,    1,    0,    1,    1,    1,    0,    2,
    1,    1,    0,    4,    0,    0,    7,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    0,    0,    0,   15,
    0,    1,    0,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    2,    0,    1,    1,    1,    2,    4,    1,
    3,    1,    3,    1,    1,    0,    1,    1,    1,    0,
    4,    1,    1,    0,    4,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    4,    1,    2,    2,    2,    2,    2,    2,    1,    1,
    2,    1,    0,    6,    0,    7,    0,    2,    1,    0,
    1,    1,    2,    2,    4,    0,    2,    0,    1,    1,
    2,    4,    1,    5,    2,    2,    2,    2,    2,    1,
    1,    1,    1,    1,    5,    7,    0,    8,    0,    1,
    1,    2,    1,    0,    3,    1,    2,    3,    1,    1,
    1,    1,    1,    5,    7,    0,    4,    7,    1,    0,
    1,    0,    5,    1,    0,    1,    0,    1,    1,    1,
    3,    6,    0,    9,    1,    1,    1,    1,    1,    1,
    2,    2,    3,    4,    3,    3,    3,    4,    3,    0,
    1,    3,    4,    5,    3,    1,    2,    0,    1,    2,
    0,    7,    3,    2,    2,    0,    3,    5,    0,    0,
   10,    0,    0,   10,    5,    0,    2,    2,    2,    2,
    2,    4,    5,    4,    5,    0,    5,    0,    6,    3,
    2,    1,    0,    3,    0,    0,    6,    0,    1,    1,
    2,    1,    1,    1,    1,    1,    0,    5,    0,    3,
    0,    0,    0,   12,    0,    0,    0,   13,    0,    2,
    0,    3,    1,    0,    4,    1,    0,    4,    1,    2,
    2,    1,    2,    2,    0,    0,    4,    2,    3,    0,
    4,    2,    1,    2,    1,    0,    0,    1,    1,    1,
  };
   static readonly short [] yyDefRed = {            0,
   47,    8,    0,    0,   58,    0,    0,    0,    0,    0,
    4,    0,    5,    9,   11,   12,   13,   20,   21,   46,
    0,   45,   48,   49,   50,   51,   52,    0,   56,   23,
    0,    0,    0,  346,    0,  348,   17,    0,    0,  918,
    0,    0,  925,  922,   18,    0,    1,    0,   10,    3,
    0,  652,  658,  650,    0,  647,  657,  651,  649,  648,
  655,  653,  654,  660,  656,  659,  661,    0,    0,  645,
   57,    0,  540,    0,  350,    0,   24,    0,    0,   66,
   64,   65,    0,    0,   59,    0,    0,   67,   69,  772,
    0,  394,    0,  400,  407,    0,    0,    0,  395,    0,
    0,    0,  397,  434,    0,  396,    0,    0,    0,    0,
  403,    0,  405,    0,  432,  392,    0,  399,  401,    0,
  393,    0,  490,    0,  433,    0,  529,  404,  406,    0,
  846,  402,    0,    0,    0,  633,    0,    0,  680,    0,
  729,    0,    0,    0,    0,    0,    0,    0,    0,  431,
    0,  625,    0,  771,  712,    0,    0,  398,    0,    0,
  409,  410,    0,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  429,  430,
  629,  557,    0,  555,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  630,  628,  631,  632,  696,
  698,    0,  694,  697,  713,  715,  716,  717,  718,  719,
  720,  721,  722,  723,  724,  714,    0,    0,    0,  773,
  774,  790,  791,  792,  793,  815,  816,  817,  818,  819,
  820,    0,    0,  924,  928,   19,  919,    2,    6,   29,
   27,    0,    0,    0,  642,    0,  646,    0,    0,  353,
    0,    0,  354,  375,    0,    0,    0,    0,  347,   16,
   60,    0,    0,    0,    0,    0,    0,  821,  435,  436,
  844,    0,    0,    0,    0,    0,  411,    0,  822,    0,
  549,  545,  548,  728,  770,  699,  726,  725,  727,  700,
  701,  702,  703,  704,  705,  706,  707,  708,  709,  710,
  711,    0,    0,    0,  796,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  831,    0,  408,
    0,    0,    0,    0,    0,    0,  845,    0,    0,    0,
  742,  738,    0,    0,    0,    0,    0,    0,    0,    0,
  554,  558,  559,  553,  563,  562,  560,  561,    0,    0,
  623,  730,  428,  427,    0,    0,    0,  345,    0,  736,
  737,    0,  493,  494,    0,    0,    0,  734,  735,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  921,  695,  743,  733,    0,  768,  769,
  872,  889,    0,    0,    0,  901,  860,  858,  882,    0,
    0,  880,  883,  884,  885,  886,  861,  859,    0,    0,
    0,    0,  372,  374,  356,    0,  636,    0,    0,   22,
  387,  383,  384,    0,  352,  382,  385,  386,  349,    0,
   68,   62,    0,   70,  492,    0,    0,  488,  489,    0,
  486,    0,  745,    0,    0,    0,    0,  766,  767,    0,
    0,    0,  634,    0,  825,  823,  635,    0,    0,  514,
    0,    0,    0,  505,    0,  509,  519,  521,    0,  501,
    0,    0,    0,    0,    0,  496,    0,  499,    0,  503,
  377,  826,    0,    0,  827,  835,    0,    0,    0,  836,
    0,    0,  847,    0,    0,  741,    0,    0,    0,    0,
    0,  693,    0,    0,  688,  690,  691,  692,  439,  440,
  829,    0,    0,    0,  197,  196,  198,    0,    0,    0,
    0,  379,    0,  610,    0,    0,  444,    0,  447,    0,
  445,  544,    0,    0,    0,    0,    0,  473,  476,    0,
    0,  468,  475,  474,  564,    0,  599,  600,  601,  602,
  603,  604,  605,  606,  607,  609,  608,  565,  567,  566,
  572,  573,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  596,    0,    0,
  518,    0,    0,    0,    0,    0,    0,    0,  873,  875,
  871,    0,  881,   28,   35,    0,    0,    0,    0,  325,
    0,  231,    0,  107,    0,  355,    0,    0,    0,   75,
   76,   79,   80,  443,    0,  491,    0,  542,    0,  551,
  184,  205,    0,    0,    0,  174,    0,    0,    0,  185,
  546,    0,  849,  799,    0,  810,  797,    0,  801,    0,
    0,    0,  824,    0,    0,    0,  504,    0,  520,  522,
    0,    0,  460,    0,    0,  456,    0,    0,  483,    0,
  524,  498,    0,  161,  525,  159,  160,  527,    0,  541,
    0,  840,    0,  833,    0,  837,  533,    0,    0,    0,
  531,    0,    0,  543,    0,  852,    0,  864,    0,  862,
    0,  682,  683,  681,  689,  828,  618,  624,  617,    0,
  731,  613,    0,    0,    0,  556,  448,  442,  446,  441,
  482,  481,  478,  477,    0,  472,  437,  438,  449,    0,
    0,  749,    0,    0,  890,  866,    0,  891,    0,  887,
    0,  902,    0,    0,    0,    0,  870,    0,   31,   26,
  340,    0,  357,  331,  330,    0,  637,  227,  103,    0,
   81,   73,    0,   86,   85,    0,  487,    0,    0,    0,
    0,    0,  194,    0,  550,    0,    0,    0,    0,    0,
  802,    0,    0,    0,    0,    0,  848,  511,  510,  463,
    0,    0,  929,  930,  452,  458,    0,  461,    0,  485,
    0,    0,    0,    0,    0,  777,  843,    0,  834,  539,
  534,    0,    0,  530,    0,  855,    0,  794,  865,  863,
  622,  621,  620,  612,  611,  626,  480,    0,  470,  469,
  598,    0,  763,  748,    0,    0,    0,  752,    0,  868,
    0,  895,    0,  910,  911,  904,  874,  876,  916,   14,
    0,    0,    0,  371,    0,    0,  368,  326,    0,    0,
    0,   61,    0,   77,   78,   83,  757,  134,  135,    0,
    0,    0,  760,  203,  204,    0,  195,    0,    0,    0,
  177,  186,  178,  180,    0,    0,    0,    0,  806,    0,
  811,  812,    0,    0,  462,  464,  465,  459,  453,  457,
    0,  516,    0,  484,  495,  451,  528,  526,    0,  839,
    0,    0,  535,    0,    0,    0,  479,    0,    0,  744,
  753,  867,    0,    0,    0,  888,    0,    0,    0,   15,
    0,    0,    0,  679,  678,    0,  677,    0,  367,    0,
    0,    0,    0,    0,   82,    0,  746,  761,  189,    0,
  201,    0,    0,    0,  795,  857,    0,    0,    0,  813,
  776,  500,  497,  783,    0,  789,    0,    0,  781,    0,
  786,  841,  538,  537,    0,  627,    0,    0,  869,  892,
    0,    0,    0,  906,    0,  917,   43,    0,    0,  341,
  370,  369,    0,  327,    0,  335,  391,  390,    0,  388,
  666,    0,  638,    0,  667,  228,  104,    0,    0,  190,
    0,  181,  179,  850,  803,    0,    0,  808,    0,    0,
  778,  782,    0,  787,    0,  853,    0,  755,    0,  896,
  913,  914,  907,  877,   36,   44,    0,    0,    0,    0,
    0,    0,    0,  668,    0,    0,  762,  188,    0,  200,
    0,    0,  814,  788,    0,  684,  842,    0,  764,    0,
    0,    0,  342,    0,    0,  336,  389,    0,    0,    0,
  108,  105,  191,  851,  798,    0,  854,  893,    0,  908,
    0,    0,  328,  674,    0,  675,  672,    0,  670,  101,
    0,  100,    0,    0,   89,   91,   92,   93,   94,   95,
   96,   97,   98,   99,  162,    0,    0,  244,  236,  237,
  238,  239,  240,  241,  242,  243,    0,    0,  234,    0,
    0,    0,    0,  897,  343,  339,    0,    0,    0,  639,
   90,    0,  287,  282,  286,    0,  229,  235,  122,  114,
  115,  116,  117,  118,  119,  120,  121,  123,    0,    0,
  112,  106,  685,    0,    0,  673,  671,    0,    0,    0,
    0,    0,    0,    0,  295,    0,    0,  245,    0,    0,
  253,    0,  172,  163,  171,    0,  109,  113,    0,  894,
    0,    0,    0,  281,    0,    0,  280,    0,    0,    0,
    0,  361,    0,  359,    0,    0,  206,    0,    0,    0,
    0,    0,  640,  230,  900,  898,  124,    0,  358,    0,
    0,    0,    0,  138,    0,    0,    0,    0,    0,    0,
  164,    0,    0,  210,    0,  362,    0,  248,  247,  246,
  259,  258,  255,  260,  261,  254,  273,  272,  265,  266,
  262,  264,  263,  267,  256,  257,  268,  269,  275,  274,
  270,  271,    0,    0,  299,    0,  278,  140,    0,  276,
  167,    0,    0,  142,    0,  363,    0,    0,  207,    0,
    0,    0,  360,  251,  133,  131,    0,    0,  303,    0,
    0,    0,    0,    0,    0,    0,  284,    0,    0,    0,
    0,  146,    0,    0,    0,    0,  364,  365,    0,    0,
    0,    0,    0,  128,  318,    0,  300,    0,    0,  312,
    0,    0,    0,  307,    0,  158,    0,    0,    0,    0,
  153,    0,    0,  296,    0,  143,    0,  137,  147,  165,
  170,  218,    0,  208,    0,    0,    0,    0,  132,    0,
  125,  129,    0,    0,    0,  314,    0,  315,  304,    0,
    0,  298,  308,  279,    0,    0,  139,  154,  277,  168,
  294,    0,  285,  289,  149,    0,    0,    0,  215,  217,
  211,  252,  130,  319,  321,  301,    0,    0,  313,  310,
  157,  155,    0,    0,    0,    0,  166,  219,  221,  209,
    0,    0,    0,  312,  169,  290,  292,  150,    0,    0,
  212,  323,  324,  320,  322,  311,    0,    0,  225,  224,
  223,  220,  222,    0,    0,    0,  213,  291,  293,
  };
  protected static readonly short [] yyDgoto  = {             9,
   10,   11,   12,   13,   51,   14,   15,   16,   17,  861,
   46,   18,   19,  252,   33,   20,  643,  242,  616,  430,
 1412,  263,  862,  758,  942,  998,  999,   22,   23,   24,
   25,   26,   27,  644,   29,   85,   39,   86,   87,  450,
   88,   89,  454,  264,  629,  630,  631,  285,  559,  873,
  776, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
 1112, 1113, 1114,   68,  246, 1204,  625,  952,  871, 1013,
 1082, 1056, 1131, 1159, 1130, 1160, 1161, 1008, 1287, 1264,
 1312, 1313, 1314,  877, 1310,  878,  687, 1177, 1275, 1229,
 1300,  500, 1293, 1269, 1329,  843, 1298, 1301, 1302, 1396,
 1330, 1331, 1327, 1115, 1184, 1142, 1205,  645, 1277, 1376,
 1295, 1393,   69,  286,  646,  647,  648,  649,  650,  781,
  540, 1059,  782,  541,  784, 1207, 1233, 1344, 1305, 1378,
 1208, 1280, 1401, 1424, 1345, 1346, 1422, 1409, 1410,  623,
  870, 1055, 1127, 1186, 1128, 1129, 1178, 1240, 1211, 1179,
  254, 1263, 1309, 1181, 1294, 1291, 1116, 1144, 1201, 1373,
 1335, 1067, 1374,  560, 1417, 1418, 1200, 1290, 1266, 1322,
 1317, 1288, 1354, 1359, 1320, 1323, 1324, 1404, 1360, 1318,
 1319, 1414, 1402, 1403,  620,  766, 1004,  950, 1049, 1005,
 1006, 1074,  863, 1047, 1091,  442,   34,  156,   75,   36,
  255,  763,  618, 1221,  866,  867,  946,  434,  256,  407,
  441,  319, 1009, 1010,  158,  159,  320,  161,  162,  163,
  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
  174,  175,  176,  177,  178,  179,  180,  272,  739,  915,
  496,  674,  805,  675,  676,  908,  181,  237,  680,  561,
  562,  563,  564,  733,  460,  461,  314,  913,  682,  408,
  316,  483,  484,  485,  486,  489,  689,  326,  702,  703,
  821,  282,  466,  283,  465,  182,  183,  184,  185,  186,
  187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
  197,  543,  544,  545,  718,  719,  833,  720,  198,  533,
  355,  926,  199,  478,  621,  869, 1053, 1182,   70, 1014,
 1015, 1098, 1099,  947,  523,  339,  714, 1086,  524,  525,
  287,  288,  289,  202,  203,  204,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  216,  302,
  534,  217,  218,  333,  744,  600,  846,  779,  639,  881,
  844,  847,  848,  882,  883,  303,  219,  220,  221,  977,
  919,  978,  979,  980, 1033,  981,  222,  223,  224,  225,
  657,  471,  658,  900, 1026,  659,  898,  660, 1028, 1029,
  226,  227,  228,  229,  230,  231,  321,  509,  510,  921,
 1035,  329,  897,  790, 1061,  827, 1068,  232,  418,  233,
  419,  849,  933,  420,  612,  757,  754,  755,  938,  421,
  422,  423,  424,  425,  426,  853,  602,  851, 1039, 1133,
 1190,  935, 1071, 1165,  752,  608,  753,  993,  937,  994,
 1072,  939,   41,   44,
  };
  protected static readonly short [] yySindex = {          -48,
    0,    0, -210, -193,    0, -108,   74,  -82,    0,  189,
    0,  135,    0,    0,    0,    0,    0,    0,    0,    0,
11775,    0,    0,    0,    0,    0,    0,   41,    0,    0,
  414,  -80,  102,    0,   -1,    0,    0,  225, -159,    0,
 5954,   74,    0,    0,    0, -270,    0,  135,    0,    0,
  135,    0,    0,    0, -189,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   83, 9365,    0,
    0,  261,    0,  555,    0,  285,    0,  193,  346,    0,
    0,    0, -273,  -80,    0,  353,  461,    0,    0,    0,
  180,    0,  412,    0,    0,  155,10476,  504,    0,   35,
  532, 6107,    0,    0,   35,    0,   35,   35, -164,   35,
    0,   35,    0,   13,    0,    0, 9603,    0,    0,   35,
    0,   35,    0, 9603,    0,  546,    0,    0,    0,  155,
    0,    0,   35,  565,   35,    0, 6736, 6889,    0, 9603,
    0,10263,10263,10263,10263,10263,10263,10263,10263,    0,
   14,    0, 7042,    0,    0,  547,  472,    0,  589, -230,
    0,    0,  623,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  950,    0,  744,   16,  171,  587,  769,  632,
  618,  641,  639,  342,  657,    0,    0,    0,    0,    0,
    0, 2274,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  645,  688, -259,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -206, -180,    0,    0,    0,    0,    0,    0,    0,
    0,  705, 7195,  680,    0, -166,    0, -273,  104,    0,
  565,  522,    0,    0,  -19,  688, -230,  193,    0,    0,
    0,  261,  741,  748,  863,  697, 9735,    0,    0,    0,
    0, 9603,   35,   35,  217,  589,    0,  709,    0, 7042,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  793,  -70,10476,    0, 7042, 9603,  766,  774, 9603,
 9603, 7902,  549, -178,  794, 7348,  323,    0,  784,    0,
  788, 7042, 9603,  795,  559,   35,    0, 9603,  546, 9075,
    0,    0,  565, 9603, -236,  780, -124,  787, 6260, -268,
    0,    0,    0,    0,    0,    0,    0,    0,  826, 9603,
    0,    0,    0,    0,10921,  842,  193,    0,  275,    0,
    0,  336,    0,    0,  807, 9735, 8811,    0,    0,10263,
 9603, 9603, 9603, 9603, 9603, 9603, 9603, 9603, 9603, 9603,
 9603,10263,10263,10263, 7042, 7042,10263,10263,10263,10263,
10263,10263,10263,10263,10263,10263,10263,10263,10263,10263,
10263,10263, 9603,    0,    0,    0,    0,  688,    0,    0,
    0,    0, 7501,10992,  812,    0,    0,    0,    0, -242,
  611,    0,    0,    0,    0,    0,    0,    0,  820,  879,
  565,  680,    0,    0,    0,  873,    0,  990,  991,    0,
    0,    0,    0, 7042,    0,    0,    0,    0,    0,  261,
    0,    0, 9867,    0,    0,  193,  127,    0,    0,  615,
    0,  880,    0,  881,   79,  546,   35,    0,    0,  839,
 7025, -228,    0,  878,    0,    0,    0,  888,  891,    0,
  455,    0,  896,    0,  894,    0,    0,    0,  695,    0,
 7748,  706, 9603,  794, 8811,    0, 6719,    0,  565,    0,
    0,    0,  893,  897,    0,    0,  155,  546,  258,    0,
 2986,  898,    0,  899,  854,    0,  901, 9603,  976, 9603,
  977,    0, -263, 6260,    0,    0,    0,    0,    0,    0,
    0,  900,  546, 6260,    0,    0,    0,  565, -273,  862,
11046,    0,  904,    0,  909,10263,    0,  133,    0,  332,
    0,    0,  713, 9603, 9603,  912, 1024,    0,    0,  -43,
  911,    0,    0,    0,    0,  744,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  744,  744,   16,   16,  171,  171,  171,  171,
  587,  587,  769,  632,  618,  641,  639,    0,  913, -201,
    0, 9603,  -83,  869,  -21,  872,  910, 9603,    0,    0,
    0,  932,    0,    0,    0,  918,  924,  882, 3141,    0,
  680,    0,  680,    0,  680,    0,  461,  360,  625,    0,
    0,    0,    0,    0,  520,    0, 9735,    0,  917,    0,
    0,    0,  480,   41,  927,    0,  926,  929,  930,    0,
    0, 9603,    0,    0,  887,    0,    0,  933,    0,  934,
 9603, 1013,    0, 6107, 6107, 7178,    0, 7902,    0,    0,
 9207,  330,    0, -255, -173,    0,  885,  895,    0, -127,
    0,    0,  948,    0,    0,    0,    0,    0,  947,    0,
  958,    0, 3296,    0,  546,    0,    0,  430,  577,  914,
    0,  955,  957,    0, 6107,    0, 6107,    0, 9603,    0,
 9603,    0,    0,    0,    0,    0,    0,    0,    0, 7331,
    0,    0,  915,10921,  988,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 8679,    0,    0,    0,    0, 8943,
 9603,    0, 6872,  962,    0,    0, 1039,    0, 1041,    0,
  617,    0,  966, 9603, 9603,  928,    0,  980,    0,    0,
    0, -141,    0,    0,    0,  978,    0,    0,    0,  974,
    0,    0, 9867,    0,    0, 9603,    0, 9339,  975,  480,
11046, -182,    0, 7042,    0,  331, 1088, 1102,  994,  982,
    0, 9603, 9603,  997, 9603, 1086,    0,    0,    0,    0,
   53, 9471,    0,    0,    0,    0, 7616,    0, 1111,    0,
  688, 9603, 1005, 7178, 1008,    0,    0,  959,    0,    0,
    0,  960,  495,    0,  963,    0,  982,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  662,    0,    0,
    0, 7348,    0,    0,  964, 1007,  962,    0, 9603,    0,
 9603,    0, 9603,    0,    0,    0,    0,    0,    0,    0,
  980,  -82,   79,    0,  503,  183,    0,    0,  998,  998,
  998,    0, 9603,    0,    0,    0,    0,    0,    0,  967,
 1012,  975,    0,    0,    0, -181,    0, -157, 1010, 1015,
    0,    0,    0,    0, 1014, 7178,  962, -201,    0, 1016,
    0,    0, 1019, 6107,    0,    0,    0,    0,    0,    0,
 1023,    0,  794,    0,    0,    0,    0,    0, -196,    0,
 1022,  495,    0,  979,  962,  546,    0,  972, 1017,    0,
    0,    0, 9603, 1045, 9603,    0, 9603, 1042,  349,    0,
  -82, -120, 1027,    0,    0,  983,    0, -141,    0,   41,
 3451, -197, -197, -197,    0, 1040,    0,    0,    0,  442,
    0, 1043, 1143, 1145,    0,    0, 1051,  962, 9603,    0,
    0,    0,    0,    0, 9603,    0, 1057, -212,    0, -212,
    0,    0,    0,    0, 1054,    0, 9603, 6872,    0,    0,
 1077,  746, 1056,    0, 9603,    0,    0, 1064, -120,    0,
    0,    0, 1018,    0, 1063,    0,    0,    0, 1066,    0,
    0, 1020,    0, 1098,    0,    0,    0, 9339, 1072,    0,
 9603,    0,    0,    0,    0, 1074,  934,    0, 6107, 1068,
    0,    0, 6260,    0, 1080,    0, 1078,    0, 9603,    0,
    0,    0,    0,    0,    0,    0, -197,    0, 1076,   41,
 3451, 1075, 1084,    0, 1085, 1087,    0,    0, 9603,    0,
 6107, 6107,    0,    0, 6260,    0,    0, 6107,    0, 1101,
 9603, 9603,    0, 1079,  918,    0,    0,10975,   73,   41,
    0,    0,    0,    0,    0, 6260,    0,    0, 1103,    0,
 1104, 9603,    0,    0, 1090,    0,    0, 1082,    0,    0,
 9365,    0, 1110,   73,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  382, 9365,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1113,   41,    0,   41,
  918, 1114, 9603,    0,    0,    0, 1107,10975,10694,    0,
    0,  488,    0,    0,    0,10726,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1115,   41,
    0,    0,    0, 1124, 9603,    0,    0, 7042, 7042,  302,
 7348,  303,  565, 1144,    0, -273,  273,    0, 1177,    0,
    0,  918,    0,    0,    0,  918,    0,    0, 1070,    0,
 1124, 1073, 1083,    0, 7042, -154,    0, 7042, 1083, 1089,
 1118,    0, -273,    0, 1119, 3731,    0, 1123, 1091, -131,
  494,10225,    0,    0,    0,    0,    0, -273,    0, 1126,
 1092, 1129, 1121,    0, 1131, 1132, 1133,   79, 1125, 1122,
    0, 1134, 1127,    0,  193,    0,  731,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1137, -194,    0, 1130,    0,    0, 1148,    0,
    0, 1140, 1141,    0, 1146,    0,   79,   79,    0,   79,
 1149, 1155,    0,    0,    0,    0, 1147,   78,    0, 1157,
   79, 1254, 1166,   79,   79,  488,    0, 7178, 1100, 1165,
 1146,    0, 1170, 1171,   99, 1175,    0,    0,   79, 9339,
 1135, 1176, 1147,    0,    0, 9365,    0,   41,   41,    0,
 1138, 1179, 1157,    0, 1188,    0, 9603, 1150, 1189, 1166,
    0, 1192, 1195,    0, -179,    0, 1190,    0,    0,    0,
    0,    0, 9365,    0,   99,   99, 1152, 1197,    0, -194,
    0,    0,  100, 1202, 9365,    0, 9365,    0,    0, 7178,
 1191,    0,    0,    0, 1204, 1148,    0,    0,    0,    0,
    0, -148,    0,    0,    0, -197,  819, 1208,    0,    0,
    0,    0,    0,    0,    0,    0, 1260, 1313,    0,    0,
    0,    0, -197, 1211, 1224, 7178,    0,    0,    0,    0,
   99,  560,  560,    0,    0,    0,    0,    0,  -72,  -72,
    0,    0,    0,    0,    0,    0, 8811, 8811,    0,    0,
    0,    0,    0, 1229, 1226, 1233,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {         1911,
    0,    0,    0,    0,    0, 6413, 1001,    0,    0, 1911,
    0, 1597,    0,    0,    0,    0,    0,    0,    0,    0,
  453,    0,    0,    0,    0,    0,    0, 1494,    0,    0,
  249, 1230,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1858,    0,    0,    0,   40,    0, 1597,    0,    0,
 1597,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  363,10408,    0,
    0,    0,    0,    0,    0,    0,    0, 2113,    0,    0,
    0,    0,  747,  659,    0,    0, 1237,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1241,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,11063,    0,    0, 1234,    0,    0,    0,
    0,    0,    0, 1234,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  201,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5684,    0,    0,    0,    0,    0,  269,    0, 3605, 5737,
    0,    0, 3450,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3939,    0, 4003, 4289, 4481, 4855, 5047, 5175,
 5303, 5431, 5559, 1059,  299,    0,    0,    0,    0,    0,
    0,   40,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1193,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  838,  838,    0,    0,    0,    0,    0,    0,    0,
    0, 1242,    0,    0,    0,    0,    0, 3757,    0,    0,
 3836, 2374,    0,    0,    0, 2751, 2374, 2113,    0,    0,
    0, 1243,    0,  729,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2595,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1244,    0,    0,    0,    0, 2595,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2516,    0,  487,    0,  487,    0,  -63,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1234,
    0,    0,    0,    0, 1245,    0, 2595,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   72,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1954,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   30,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  134,    0,    0,    0,    0, 1247,    0, 1198, 1200,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  699,    0,    0, 2595, 5798,    0,    0,    0,
    0,    0,    0,    0,10776,    0,    0,    0,    0,    0,
 1239,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  781,  835,    0,    0, 1252,    0,    0,    0,    0,    0,
  -53,    0,    0, 3140, 1253,    0,    0,    0,  209,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1255,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   -8,    0,    0,    0,    0,    0,    0,
    0,    0, 7484,    0,    0,    0,    0, -153,  605,    0,
    0,    0, 1256,    0,    0,    0,    0, 2595,    0, 2595,
    0,    0,    0,    0,    0,   18,    0,    0,    0,    0,
   91,    0,    0,    0,    0, 4082,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4146, 4225, 4353, 4417, 4545, 4609, 4673, 4737,
 4919, 4983, 5111, 5239, 5367, 5495, 5623,    0,    0,  750,
    0,    0,  487,    0,  487,    0,    0,    0,    0,    0,
    0,  738,    0,    0,    0, 1400,    0,  158,    0,    0,
    0,    0,    0,    0,    0,    0, 1237, 7882,    0,    0,
    0,    0,    0,    0, 9999,    0,    0,    0,  762,    0,
    0,    0,11117, 8047,    0,    0,  771,  786,  790,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1248,
    0,    0,    0,    0,    0,    0,    0, 1259,    0,    0,
    0, 4774,    0,    0,  107,    0,   66, 2830,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1261,    0,
    0,    0,    0,    0,    0,    0,    0,  538,  326,    0,
    0,    0, 1258,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  112,
    0,    0,    0, 1262,    0,    0,    0,    0,    0,    0,
  422,    0,  450,    0,    0,    0,    0,11240,    0,    0,
    0, -184,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1264,11134,
    0,11188,    0,    0,    0,10889,    0,    0,    0,  779,
    0, 1266,    0,    0,    0, 1598,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2985,    0, 3295, 1268,    0,    0,    0, 1265,    0,    0,
    0,    0,  538,    0,    0,    0,  779,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  561,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
11311,11382,10776,    0, 1225,    0,    0,    0,   36,   36,
   36,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  918,    0,    0,    0,    0,    0,    0,  805,  809,
    0,    0,    0,    0,    0,    0, 1272,  750,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3140,    0,    0,    0,    0,    0, 1277,    0,
    0,  538,    0,  860, 1272, 7484,    0,  512,  620,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   55,    0,
11453,11577,    0,    0,    0,    0,    0, -184,    0,  182,
    0, 1279, 1279, 1279,    0,    0,    0,    0,    0,  643,
    0,  690,    0,    0,    0,    0,    0, 1262, 1278,    0,
    0,    0,    0,    0,    0,    0,    0, 1281,    0, 6566,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  544,  572,    0,    0,    0,    0,    0,11646,    0,
    0,    0,    0,    0, 1283,    0,    0,    0,  114,    0,
    0,    0,    0,  563,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1280,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1282,  260,    0,  187,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -216,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1763,    0,    0,    0, 8156, 8452,
    0,    0,    0,    0,    0, 1285,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  341,    0,    0,
10544,    0,    0, 8230,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,10626,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 8526,    0, 8304,
 1763,    0,    0,    0,    0,    0,    0,    0,  363,    0,
    0,    0,    0,    0,    0,  363,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 8378,
    0,    0,    0,  592,    0,    0,    0,    0,    0,    0,
    0,    0, 2721,  439,    0, 8570,    0,    0,    0, 3603,
    0, 1763,    0,    0,    0, 1763,    0,    0,    0,    0,
  592,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  651,    0, 1287,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  701,    0,  612,
    0,    0,    0,    0,    0,    0,    0,10776,  821,    0,
    0,    0,    0,    0, 1284,    0,  677,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  836,    0,    0,    0,    0,
    0,    0,    0,    0, 1286,    0,10776,10776,    0,10816,
    0,    0,    0,    0,    0,    0, 1288,11735,    0, 1291,
10776,10131, 1292,10776,10776,    0,    0,    0,    0,    0,
 1293,    0,    0,    0, 8600,    0,    0,    0,10776,    0,
    0,    0, 1294,    0,    0,  277,    0,11705, 8969,    0,
    0,    0, 1295,    0,    0,    0,    0,    0,    0, 1302,
    0,    0,    0,    0,  567,    0,  837,    0,    0,    0,
    0,    0,  870,    0, 8705, 8837,    0,    0,    0,    0,
    0,    0,    0,    0, 1336,    0, 1389,    0,    0,    0,
  855,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  604,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  604,    0,    0,    0,    0,    0,    0,    0,
 8600,11512, 7774,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1253, 1253,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
 1648,  610,  650,    0,    0,  687, -613,   -4, -858,    0,
  797,    0,    0,   22,    0,    0,    1,    0,    0,    0,
 -589, -531,    0,    0,    0,    0,    0, -516,    0,    0,
    0,    0,    0,  111,  -11,    0,    0,    0, 1228,    0,
 1413,    0,    0,    0,    0,  903,  907,  -35, -241,    0,
    0,    0,    0,  578, -541, -451, -416, -402, -348, -324,
 -307, -293,-1032,-1037,    0, -190,    0,  362,    0, -915,
    0,    0,    0,    0,    0,    0,  523,   43,  335,    0,
    0,    0,  373, -977,    0, -294, -303, 1444,    0,    0,
    0, -809,  322,    0,    0, -488,    0,    0,  388,    0,
    0,  361,    0,    0,  394,    0, -331, -828,    0,    0,
    0,    0,  515,  -39,    0,    0,  908,  919,  920,    0,
 -496,    0,    0, -592,  923,  500,    0, -833,    0,    0,
    0,    0,    0,    0,    0,    0,  288,    0,    0,    0,
    0,    0,    0,    0,    0,  571,    0,    0,    0,    0,
 -229,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  579,    0, -490,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  296,    0,    0,  381,    0,    0,  389,
  395,  311,    0,    0,    0,    0,    0,    0,    0,    0,
  665,    0,    0,    0,    0,  164,    0,   -3,  -59,    0,
    0,  479,    0,  541,    0,  772,    0, 1213, -301, -233,
 -113,  711,    0,  668,    0,  -77,  -23,    0,    0,  122,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -281,    0,   93,    0,    0,
 -455,    0,    0,    0,  921,    0, -454, -170, 1055,  987,
    0,  985,    0, 1172, 1363, 1093,    0,    0,  818, 1618,
    0,    0,    0,    0, 1069,    0,    0,    0,    0,    0,
 -628,    0,    0,    0,    0,    0, 1071,    0,    7,  847,
  792,  844, 1337, 1341, 1342, 1343, 1344,    0, 1345,    0,
    0,    0, 1025,    0,  822,    0,    0,    0,    0,    0,
    0,    0,    0, -304,    0,    0,    0,    0,  -66,    0,
  732,    0,  614,    0,  664,    0,    0,    0,  720, -500,
  -34, -317,  -31,    0, 1552,    0,    8,    0,   12,   27,
   29,   32,   44,   45,   47,   49,   52,   54,    0, -545,
    0,  -68,    0,    0,  858,    0, -513,    0,    0,    0,
  773,    0,  922,    0,  875, -443,    0,    0,    0,    0,
    0,    0,  782,    0,    0,  800,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  798,    0,    0,
    0,    0,    0,    0,    0,    0,  -76,    0, 1273,    0,
    0,    0,  941,    0,    0,    0,    0,    0, -217,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1349,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  583,    0,    0,    0,    0,    0,    0,    0,    0,  712,
    0,    0,    0,    0,
  };
  protected static readonly short [] yyTable = {            35,
   21,  155,  247,   45,  683,  154,  200,   21,  688,  201,
   21,  498,  474,  433,  501,  428,   71,  160,  259,  276,
  332,  527,  446,  715,   32,  459,  760,  656,  278,  517,
  482,  404,  928,  721,  943,   35,  677, 1016, 1017,  927,
 1057,  236,   21,  361,  723,   30,  369,  324,  205,  411,
  783,  785,  206,  436,  742,  975,  271,  518, 1011,  974,
   84, 1285,   37, 1139,    3,  661,  240,  207,   35,  208,
   35,  975,  209,  160,  959,  411, 1371,  490,  160, 1146,
  494,  318,  806,  997,  210,  211,  325,  212,  318,  213,
  327,  354,  214,  249,  215,  770,   80, 1158,  961,  529,
  712, 1223,  380,  307,  340,  437,  609,  610,  803,   54,
   28,  308,  409,   73,  864, 1394,  253,   28,  796,  797,
   28,   54,   81,  535,  459,  542,  358, 1158,  810,  438,
  536, 1073,  412,   35,   35,    1,   74,  413,  443,  414,
 1046, 1012,  537,  448,  860,  415,  416,  785,   40,   35,
   73,  331,   28,  235,   82,  530,  439,  815,  412,  826,
  713,  828,  155,  413,  410,  414,  154,  200,  804,  520,
  201,  415,  416,   74,  601,  743, 1395,  798,  160,  336,
  338,  611, 1286, 1419,  491,  662,  492,  884,  269,  887,
  681, 1372,  280, 1236,  923,  356,  807,  304,  449,  305,
  306,  785,  310,   31,  311,  976,  527,    1,    2,  205,
  746,  633,  322,  206,  323,  354,  527,  417,  277,  516,
   38,  976,  328,    5,  241,  330,  276,  334,  207,   54,
  208,  458,  960,  209,  276,  470,  462,  270,  811,   35,
  493,  617,  812,  427,    5,  210,  211,  940,  212,  309,
  213,  367,    3,  214,   83,  215,  962,  354,   35, 1224,
  380,  515,   73,  277,  277,  277,  277,  277,  277,  277,
  277,  473,  748,  532,  477,  479,   35,  385, 1353,  349,
  160,  433, 1237,   84,  886,   74,    3,  504,   76,  513,
  139,  662,  512,  983,  514,  984,  927,  547,  477, 1420,
  686,  468,   35,   73,  526, 1377,  160,  528,  810,    4,
  454,  542,   35,  386,  318,  160,    5, 1387,   35, 1388,
  360,  927,  464,  368,  737,  917,   74,  350, 1100,    1,
  458,  558, 1349, 1315,  641,  567,  568,  569,  570,  571,
  572,  573,  574,  575,  576,  577,  907,  789,  472,  901,
  444,   35,  677,  469, 1342,  687,  351,  916,  971,  243,
  686, 1196, 1384,  244,  503,   73,  328,  599,  367,  663,
  454,    6,    7,    8,  662,  312,  566,  313,  879,  879,
  738,   35,   35,  967,  352,  633,  482,  633,   74,  387,
  388,    2,  445,  583,  584,  459,  634,  354,  662, 1273,
   73,  269,  655,  878,  878,    5,  495,  966,    3,   35,
   35,  985,   78,  366, 1385,  687,  905,  632,  511,  642,
  447,  354,  812,   74,  245,  277,  651,  581,  582,  927,
  767,    4,  768,  277,  769,  927,  353,    5,    5,  466,
   35,  633,    5,    5,    1,    2,   35,  160, 1303, 1304,
  270, 1306,  663,  879, 1025,  604,  606,  679,  467,  558,
 1397,  686, 1325,    5,  378, 1332, 1333,  692,  694,  351,
  455,   84,   76,   77,  879,  440,  663, 1405,  878,  471,
 1348,  471,  708, 1063,  710, 1093,  626,  899,  728,  526,
  730,  277,  528,  717,  542,  466,  366,  635,  839,  526,
  160,  373,  528,  277,  277,  277,  808,  700,  277,  277,
  160, 1379, 1380,   73,  467, 1084, 1085,  139,  732,  732,
  366,  269, 1087,    3,  366,  656,  507,  366,  366,  366,
  455,  633,  699,   52,  366,  471,   74,   35, 1119,  643,
  501, 1162,   74,  695,  265,  332,    4,  373,  266,  353,
  334,  542,  948,    5,  597,  727,   53, 1194, 1197,  652,
  389,  390, 1102, 1118,  715,  739,  745, 1411,  354,   54,
  270,  378,  751,  378,   56,  378,  378,  912,  378,   57,
  378,   58,   59,   60,   61,  443, 1119, 1102, 1150,   62,
  276,  643, 1213,   63,  949,   54, 1214, 1202,  267,  693,
   54,  458,   74,   73,  411,   64, 1195, 1198,   65,  681,
   66, 1118,  354, 1149,  739,   35,  477,  351, 1150,   47,
  351,   50,  378,  337,  378,  794,   74,  378, 1120,  337,
  686,   67,   71,  344,  641,  679,  338,  597,   79,  353,
  160,  160,  597, 1149,  597,  597,  597,  597,  597,  597,
  597,  597,  597,  597,  597,  819,   43,  238,  641,   48,
  239,  765,  597, 1121,  597,  351,  597,  277,  597,  597,
  597,  889,  351,  829,  248,  830, 1120, 1122, 1151,  669,
 1030,  160,  344,  160,  832,  641, 1203,  412,  548,   35,
  344,  234,  413,  344,  414,    5,   49,  549,  258,  558,
  415,  416,  351,  669,  558,  841,  802,  686, 1151,   73,
  642, 1121,  669, 1152,  879,  527,   73,  260,  857,  858,
   35,  996,  597,  261,  643, 1122, 1060, 1153,   49,  643,
  635, 1123,   74,  643,  642,  818,  771,  632,  401,   74,
  876,   74,  473, 1152, 1066,  353,   73,  527,  643,  550,
  402,  157,  353, 1143,  729, 1124,  477, 1153,  551,  903,
  909,  642,  865,  259, 1083,  909,  906,  909,  527,   74,
  909,  909, 1125,  909,  909,  643,  914,   35,  686, 1123,
   35, 1154,  353,  268,  257,  535, 1126,  780,  903,  277,
   72,  909,  536,  903,  643,  903,  944, 1136,  903,  903,
   73,  903,  903, 1124,  537, 1155, 1019,  157,  945, 1336,
  250, 1154,  157,  932,  506,  934,   73,  936, 1020,   92,
 1125,   94, 1156,   74,   95,  774,  888,  507,  358,   99,
  262,  666,  775,  103, 1126, 1155, 1157,  955,   35,   74,
  359,   73,  106,  351,  508,  909,  820,  257,  257,  111,
  139,  351, 1156,  331,  113,  351,  139,   45,  116, 1183,
  686, 1219,  449,  257,   74, 1238, 1157, 1226,  351,  501,
  118, 1389,  119,  903, 1232,  279,  121,  353,  358,  765,
  160,  765,  912,  765,  128,  129,  717,  912,  132,  912,
   76,  251,  912,  912,  351,  912,  912,  989,  281,  991,
  351,  992,  351,  331,   74,  351,  351, 1408,  139, 1180,
  905,  820,  157,  912,  487,  905, 1180,  905,  488,  351,
  905,  905,  139,  905,  905,  665, 1425, 1426,  751,  288,
  899,  759,  751,  358,  665,  899,  236,  899,  288,  473,
  899,  899,   21,  899,  899,  822,  331,   35,  865,  412,
 1003, 1037,  686,  257,  413,  269,  414,  362,  331, 1044,
  357,  351,  415,  416,  391,  392,  664,  912,  248,  351,
  854,  855,  614,  351,  614,  664,  363,  364,  393,  394,
  636,  297,  473,  297,  637,  473,  351,  754,  297,  754,
  257,  754,  772,  915,  773,  905,  365,  370,  526,   21,
  926,  528,  398, 1070,  270,  160,  879,  366,  187,  160,
  187,  397,  187,  356,  157,  899,  257,  356,  351,  351,
  136,  399,  136,  473,   71,   71,  257,  136,   71,  927,
  526,  740,  257,  528,  400, 1089,  992,  160,  160,  366,
  157,  160,  403,  366,  160,  351,  366,   35,  366,  157,
 1003,  526,  313,  366,  528,  199,  473,  199,  406,  199,
  669,  356,  160,  356,  670,  257,   74,  356,   74,  351,
  356,  678,  356,  429,   35,  488,  915,  356,  731, 1101,
 1117,  915,  637,  915,  915,  915,  915,  915,  915,  915,
  915,  915,  915,  435,   72,  257,  257, 1164,   72, 1041,
 1042,  915, 1185,  915, 1101,  915,  452,  915,  915,  915,
  456,  356,  351,  351,  453,  351,  351,   63,  455,  747,
 1097,  747,  463,  257,  257,  382,  383,  384, 1117, 1191,
 1101,  756,  467,  756,   35,   35,  175,  475,  175,  247,
   74,  762,   35, 1230,  512,  476,  856,  351,  856,  351,
  512,  182,  359,  182,  257,  183,  497,  183, 1230,  502,
 1101,  915,  395,  396,   35,   35,  505,   35,  351,  351,
  205, 1239,  205, 1209,  176, 1281,  176, 1282, 1398, 1399,
 1097,  157,  587,  588,  589,  590,  878,  878,  351, 1209,
  141,   35,  141,  519,   35, 1209,  351,  531,  513,  351,
  521,  429, 1209,  429,  513,  302,  148,  302,  148,  546,
 1192, 1193,  341,  342,  343,  344,  345,  346,  347,  348,
  552,  257,  429,  429,  309,  607,  309,  536,  536,  643,
  643,  953,  954,  614,  157,  585,  586, 1222,  591,  592,
 1225,  615,  429,  619,  157,  622,  624,  638,  640,  663,
  429,  257,  653,  429,  832,  664, 1185,  926,  665,  667,
  690,   54,  686,  668,  691,  704,  705,  706,  707,  709,
  711,  716,   54,  724,  473,  722,  725,   54,  735,  736,
  740,   54,  747,  741,   54,  749,  750,  756, 1316,  759,
  761, 1365,  762,  778,  785,  786,   54,   54,  787,  788,
  791,   54,   54,  793,  792, 1343,  795,   54,  235,   54,
   54,   54,   54,  809,  595,  813,  814,   54, 1355, 1357,
  816,   54,  824,   54,  686,  825,  371,  823,  834,  257,
  836,  845,  850,   54,  852,  856,   54,    4,   54,  872,
  868,  859,   54,  893,  880, 1343, 1343,  372,  373,  374,
  375,  376,  377,  378,  379,  380,  381,  894,  896,   54,
  686,  895, 1413, 1413,  902,  904,  911,  491,  951, 1421,
 1421,  918,  920,  922,  157,  157,  924,  929,  930,  963,
  956,  558,  558,  957,  964,  965,  970,  969,  972,  982,
  987,  990,  995,  988, 1000,  820, 1001,  595, 1022,   30,
 1023, 1343,  595,  257,  595,  595,  595,  595,  595,  595,
  595,  595,  595,  595,  595,  157, 1018,  157, 1024, 1021,
 1031, 1036,  595, 1040,  595, 1043,  595, 1045,  595,  595,
  595, 1048, 1050, 1052,  257, 1051, 1012, 1058, 1064, 1075,
  565, 1062, 1066, 1069,  595, 1078, 1079, 1080, 1088, 1081,
 1134, 1138,  578,  579,  580, 1092, 1137,  565,  565,  565,
  565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
  565,  565,  565, 1140, 1166, 1135, 1147, 1163, 1187, 1189,
 1199, 1212,  595, 1215, 1228, 1231, 1217, 1234, 1265, 1279,
 1276,  257, 1268,   53,  257, 1267, 1218, 1270, 1271, 1272,
 1278, 1274, 1227, 1284, 1235, 1237, 1289, 1296, 1297, 1326,
  832,  832, 1292, 1337, 1381, 1299, 1311, 1307,  832,  832,
  832,  832,  832, 1308,  832,  832, 1321,  832,  832,  832,
  832,  832,  832,  832,  832, 1328, 1338, 1340, 1341,  832,
 1347,  832,  832,  832,  832,  832,  832, 1351, 1350,  832,
 1362, 1361,  257,  832,  832, 1364,  832,  832,  832, 1369,
 1367,  565, 1370, 1366, 1382, 1386, 1375, 1390,  832, 1391,
  832, 1400,  832,  832, 1385, 1384,  832, 1406,  832,  832,
  832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
 1407,  832, 1427, 1428,  832,  832,    7,  775,  832,  832,
 1429,   34,   32,  547,   25,  830,  732,  507,   33,  329,
  800,  226,  615,  102,  157,  508,  726,  832,  832,  804,
  466,  832,  506,  616,   32,  532,  832,  832,  832,  832,
  832,   33,  838,  750,  832,  758,  832,  805,  676,  750,
  779,  664,  832,  832,  780,  807,  333,  809,  686,  358,
  643,  643,  351,  664,   42,   30,   30,  144,  941,  126,
   30,  257,  305,  151,  145,  127,  306,  832,  832,  832,
  832,   30,  832,  152,  451,  874,   30,  627,  832,  875,
   30, 1141, 1188,   30, 1383, 1352,  432, 1392, 1339, 1334,
 1368, 1206, 1220,  890, 1145,   30,   30, 1423, 1148, 1416,
   30,   30,  885, 1363,  891,  892,   30, 1358,   30,   30,
   30,   30, 1356, 1415, 1076, 1283,   30, 1210, 1077, 1002,
   30,  838,   30,  701,  840,  801,  734,  910,  553,  777,
  973,  315,   30,  593,   30,   30,  799,   30,  594,  157,
  595,   30,  596,  157,  597, 1054,  598,  986,  835, 1132,
   53, 1167, 1065,  405,   55,  968,  958,   30,   30, 1032,
 1038,  257,   30,   30,   30,   55, 1027,  925,  931,  613,
   55,  157,  157, 1216,   55,  157,    0,   55,  157, 1034,
    0,  696,    0, 1090,    0,    0,    0,    0,  257,   55,
   55,    0,    0,    0,   55,   55,  157,    0,    0,    0,
   55,    0,   55,   55,   55,   55,    0,    0,    0,    0,
   55,    0,    0,    0,   55,    0,   55,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   55,    0,    0,   55,
    0,   55,    0,    0,    0,   55,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  257,  257,
    0,    0,   55,  775,  775,    0,  257,  923,    0,    0,
    0,  775,  775,  775,  775,  775,    0,  775,  775,    0,
  775,  775,  775,  775,  775,  775,  775,  565,  257,  257,
    0,  257,  775,    0,  775,  775,  775,  775,  775,  775,
    0,    0,  775,    0,    0,    0,  775,  775,    0,  775,
  775,  775,    0,    0,    0,  257,    0,    0,  257,    0,
    7,  775,    0,  775,    0,  775,  775,    0,    0,  775,
    0,  775,  775,  775,  775,  775,  775,  775,  775,  775,
  775,  775,  775,    0,  775,    0,    0,  775,  775,    0,
    0,  775,  775,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  775,  775,    0,    0,  775,    0,    0,    0,    0,  775,
  775,  775,  775,  775,    0,    0,    0,  775,    0,  775,
    0,    0,    0,    0,    0,  775,  775,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  775,  775,  775,  775,    0,  775,    0,    0,   30,   30,
    0,  775,    0,   30,    0,    0,    0,   30,    0,   30,
    0,    0,   30,    0,   30,   30,    0,   30,    0,   30,
    0,   30,    0,   30,   30,   30,   30,    0,    0,   30,
   30,    0,    0,    0,    0,   30,    0,   30,   30,   30,
    0,    0,   30,   30,   30,    0,   30,    0,    0,   30,
    0,   30,   30,   30,   30,    0,    0,    0,   30,   30,
   30,    0,    0,   30,   30,   30,    0,    0,    0,    0,
    0,    0,   30,   30,    0,   30,   30,   30,   30,   30,
   30,    0,    0,    0,   30,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  923,    0,    0,    0,   54,    0,
   30,   30,    0,    0,    0,    0,   30,   30,    0,   54,
    0,    0,    0,    0,   54,   30,    0,    0,   54,    0,
    0,   54,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   54,   54,    0,    0,    0,   54,   54,
    0,    0,    0,    0,   54,    0,   54,   54,   54,   54,
    0,   54,    0,    0,   54,    0,   30,    0,   54,    0,
   54,    0,   54,    0,    0,    0,    0,   54,    0,    0,
   54,   54,    0,   54,   54,   54,    0,    0,    0,   54,
    0,    0,    0,    0,    0,    0,   54,   54,    0,  517,
    0,   54,   54,    0,  517,  517,   54,   54,    0,   54,
   54,   54,   54,    0,    0,    0,    0,   54,    0,    0,
    0,   54,    0,   54,    0,    0,    0,  517,    0,    0,
    0,    0,    0,   54,    0,    0,   54,  517,   54,    0,
  517,  517,   54,    0,    0,  517,    0,    0,  517,    0,
  517,    0,  517,  517,  517,  517,    0,    0,    0,   54,
  517,    0,    0,    0,  517,    0,    0,    0,  517,    0,
    0,    0,    0,    0,    0,    0,  517,    0,    0,  517,
    0,  517,  517,    0,    0,    0,    0,  517,    0,  517,
  517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
    0,    0,  517,    0,    0,    0,  517,  517,    0,  517,
  517,  517,  517,  517,  517,  517,    0,  517,  517,    0,
  517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
    0,  517,  517,  517,  517,  517,  517,  517,  517,  517,
  517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
  517,  517,  517,    0,    0,  517,    0,  517,  351,  517,
    0,    0,  517,  351,  351,    0,    0,  517,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  351,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  351,    0,    0,  351,
  351,    0,    0,    0,  351,    0,    0,  351,    0,  351,
    0,  351,  351,  351,  351,    0,    0,    0,    0,  351,
    0,    0,    0,  351,    0,    0,    0,  351,    0,    0,
    0,    0,    0,    0,    0,  351,    0,    0,  351,    0,
  351,  351,    0,    0,    0,    0,  351,    0,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
    0,  351,    0,    0,    0,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,    0,  351,  351,    0,    0,
  351,  351,  351,  351,  351,    0,    0,  351,  351,    0,
    0,    0,  351,  351,  351,  351,  351,  351,  351,  351,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  351,    0,    0,  351,    0,  351,    0,  351,   90,
    0,  351,    0,    0,    0,    0,  351,   91,   92,   93,
   94,    0,    0,   95,   96,    0,   97,   98,   99,  100,
  101,  102,  103,    0,    0,    0,    0,    0,  104,    0,
  105,  106,  107,  108,  109,  110,    0,    0,  111,    0,
    0,    0,  112,  113,    0,  114,  115,  116,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  117,    0,  118,
    0,  119,  120,    0,    0,  121,    0,  122,  123,  124,
  125,  126,  127,  128,  129,  130,  131,  132,  133,    0,
  134,    0,    0,  135,  136,    0,    0,  137,  138,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  344,
    0,    0,    0,    0,  344,  344,  139,    0,    0,    0,
  140,    0,    0,    0,    0,  141,  142,  143,  144,  145,
    0,    0,    0,  146,    0,  147,    0,  344,    0,    0,
    0,  148,  149,    0,    0,    0,    0,  344,    0,    0,
  344,  344,    0,    0,    0,  344,    0,    0,  344,    0,
  344,    0,  344,  344,  344,  344,  150,  151,  152,  153,
  344,    0,    0,    0,  344,    0,    0,  235,  344,    0,
    0,    0,    0,    0,    0,    0,  344,    0,    0,  344,
    0,  344,  344,    0,    0,    0,    0,  344,    0,  344,
  344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
    0,    0,  344,    0,    0,    0,  344,  344,  344,  344,
  344,  344,    0,  344,  344,  344,    0,  344,  344,    0,
    0,  344,  344,  344,  344,    0,    0,    0,  344,  344,
    0,    0,    0,  344,  344,  344,  344,  344,  344,  344,
  344,  740,    0,    0,    0,    0,  740,  740,    0,    0,
    0,    0,  344,    0,    0,  344,    0,  344,    0,  344,
    0,    0,  344,    0,    0,    0,    0,  344,    0,  740,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  740,
    0,    0,  740,  740,    0,    0,    0,  740,    0,    0,
  740,    0,  740,    0,  740,  740,  740,  740,    0,    0,
    0,    0,  740,    0,    0,    0,  740,    0,    0,    0,
  740,    0,    0,    0,    0,    0,    0,    0,  740,    0,
  351,  740,    0,  740,  740,    0,  351,    0,    0,  740,
    0,  740,  740,  740,  740,  740,  740,  740,  740,  740,
  740,  740,    0,    0,  740,    0,    0,    0,  740,  740,
  740,  740,  740,  740,    0,  740,  740,  740,    0,  740,
  740,    0,  351,  740,  740,  740,  740,    0,    0,    0,
  740,  740,    0,    0,    0,  740,  740,  740,  740,  740,
  740,  740,  740,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  740,    0,    0,  740,    0,  740,
    0,  740,    0,  351,  740,    0,    0,    0,  351,  740,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,    0,    0,    0,    0,    0,    0,  351,  351,
  351,  351,  351,  351,  351,  351,  351,    0,  351,  351,
    0,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  373,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  373,    0,  381,    0,  351,    0,
  351,  381,  381,  351,    0,    0,    0,  373,  351,    0,
    0,    0,  373,    0,    0,  250,    0,  373,    0,  373,
  373,  373,  373,    0,  381,    0,    0,  373,    0,    0,
    0,  373,    0,    0,  381,  373,    0,  381,  381,    0,
    0,    0,  381,  373,    0,  381,  373,  381,  373,  381,
  381,  381,  381,    0,    0,    0,    0,  381,    0,    0,
    0,  381,    0,    0,    0,  381,    0,    0,    0,  373,
    0,    0,    0,  381,    0,  519,  381,    0,  381,  381,
    0,  519,    0,    0,  381,    0,  381,  381,  381,  381,
  381,  381,  381,  381,  381,  381,  381,    0,    0,  381,
    0,    0,    0,  381,  381,    0,  381,  381,  381,    0,
  381,  381,  381,    0,  381,  381,    0,  519,  381,  381,
  381,  381,    0,    0,  373,  381,  381,    0,    0,    0,
  381,  381,  381,  381,  381,  381,  381,  381,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  381,
    0,    0,  381,    0,  381,    0,    0,    0,  519,    0,
    0,    0,    0,  519,  381,  519,  519,  519,  519,  519,
  519,  519,  519,  519,  519,  519,    0,    0,    0,    0,
    0,    0,  519,  519,  519,  519,  519,  519,  519,  519,
  519,  519,    0,  519,  519,    0,  519,  519,  519,  519,
  519,  519,  519,  519,  519,  519,    0,  519,  519,  519,
  519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
  519,  519,  519,  519,  519,  519,  519,  519,  519,    0,
  515,  697,    0,    0,    0,  519,  515,    0,    0,    0,
   92,    0,   94,  519,    0,   95,    0,    0,    0,    0,
   99,    0,    0,    0,  103,    0,    0,    0,    0,    0,
    0,    0,    0,  106,    0,    0,    0,    0,    0,    0,
  111,    0,  515,    0,    0,  113,    0,    0,    0,  116,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  118,    0,  119,    0,    0,    0,  121,    0,    0,
    0,    0,    0,    0,    0,  128,  129,    0,    0,  132,
    0,    0,  431,  515,    0,    0,    0,    0,  515,    0,
  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
  515,    0,    0,    0,    0,    0,    0,  515,  515,    0,
  515,  515,  515,  515,  515,  515,  515,    0,  515,  515,
    0,  515,  515,  515,  515,  515,  515,  515,  515,  515,
  515,    0,  515,  515,  515,  515,  515,  515,  515,  515,
  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
  515,  515,  515,  515,    0,  523,  764,    0,    0,  698,
  515,  523,    0,  515,    0,   92,    0,   94,  515,    0,
   95,    0,    0,    0,    0,   99,    0,    0,    0,  103,
    0,    0,    0,    0,    0,    0,    0,    0,  106,    0,
    0,    0,    0,    0,    0,  111,    0,  523,    0,    0,
  113,    0,    0,    0,  116,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  118,    0,  119,    0,
    0,    0,  121,    0,    0,    0,    0,    0,    0,    0,
  128,  129,    0,    0,  132,    0,    0,  251,  523,    0,
    0,    0,    0,  523,    0,  523,  523,  523,  523,  523,
  523,  523,  523,  523,  523,  523,    0,    0,    0,    0,
    0,    0,    0,  523,    0,  523,  523,  523,  523,  523,
  523,  523,    0,  523,  523,    0,  523,  523,  523,  523,
  523,  523,  523,  523,  523,  523,    0,  523,  523,  523,
  523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
  523,  523,  523,  523,  523,  523,  523,  523,  523,    0,
  450,  817,    0,    0,  248,  523,  450,    0,  523,    0,
   92,    0,   94,  523,    0,   95,    0,    0,    0,    0,
   99,    0,    0,    0,  103,    0,    0,    0,    0,    0,
    0,    0,    0,  106,    0,    0,    0,    0,    0,    0,
  111,    0,  450,    0,    0,  113,    0,    0,    0,  116,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  118,    0,  119,    0,    0,    0,  121,    0,    0,
    0,    0,    0,    0,    0,  128,  129,    0,    0,  132,
    0,    0,  251,  450,    0,    0,    0,    0,  450,    0,
  450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
  450,    0,    0,    0,    0,    0,    0,    0,  450,    0,
  450,  450,  450,  450,  450,  450,  450,    0,  450,  450,
    0,  450,  450,  450,  450,  450,  450,  450,  450,  450,
  450,    0,  450,  450,  450,  450,  450,  450,  450,  450,
  450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
  450,  450,  450,  450,    0,  411, 1007,    0,    0,  248,
  450,  411,    0,  450,    0,   92,    0,   94,  450,    0,
   95,    0,    0,    0,    0,   99,    0,    0,    0,  103,
    0,    0,    0,    0,    0,    0,    0,    0,  106,    0,
    0,    0,    0,    0,    0,  111,    0,  411,    0,    0,
  113,    0,    0,    0,  116,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  118,    0,  119,    0,
    0,    0,  121,    0,    0,    0,    0,    0,    0,    0,
  128,  129,    0,    0,  132,    0,    0,  251,  411,    0,
    0,    0,    0,  411,    0,  411,  411,  411,  411,  411,
  411,  411,  411,  411,  411,  411,    0,    0,    0,    0,
    0,    0,    0,  411,    0,  411,  411,  411,  411,  411,
  411,  411,    0,  411,    0,    0,  411,  411,  411,  411,
  411,  411,  411,  411,  411,  411,    0,  411,  411,  411,
  411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
  411,  411,  411,  411,  411,  411,  411,  411,  411,    0,
  552,    0,    0,  372,  248,  411,  552,    0,  411,    0,
    0,    0,    0,  411,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  372,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  372,
    0,    0,  552,    0,  372,    0,    0,  249,    0,  372,
    0,  372,  372,  372,  372,    0,    0,    0,    0,  372,
    0,    0,    0,  372,    0,    0,    0,  372,    0,    0,
    0,    0,    0,    0,    0,  372,    0,    0,  372,    0,
  372,    0,    0,  552,    0,    0,    0,    0,  552,    0,
  552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
  552,  372,    0,    0,    0,    0,    0,    0,  552,    0,
  552,    0,  552,    0,  552,  552,  552,    0,  552,  552,
    0,  552,  552,  552,  552,  552,  552,  552,  552,  552,
  552,   52,    0,    0,  552,  552,  552,  552,  552,  552,
  552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
  552,  552,  351,  552,   53,    0,  372,    0,  351,    0,
    0,    0,    0,    0,    0,    0,    0,   54,  552,    0,
    0,    0,   56,    0,    0,    0,    0,   57,    0,   58,
   59,   60,   61,    0,    0,    0,    0,   62,    0,    0,
  351,   63,    0,    0,  351,    0,    0,    0,    0,    0,
    0,    0,    0,   64,    0,    0,   65,    0,   66,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   67,
    0,  376,    0,    0,    0,  351,    0,  376,    0,    0,
  351,    0,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,    0,    0,    0,    0,    0,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  376,
  351,  351,    0,  376,  351,  351,  351,  351,  351,    0,
    0,  351,  351,    0, 1218,    0,  351,  351,  351,  351,
  351,  351,  351,  351,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  351,    0,    0,  351,    0,
  351,    0,  351,    0,  376,  351,    0,    0,    0,  376,
  351,  376,  376,  376,  376,  376,  376,  376,  376,  376,
  376,  376,    0,    0,  564,    0,    0,    0,  376,  376,
  564,  376,  376,  376,    0,  376,  376,  376,    0,  376,
  376,    0,    0,  376,  376,  376,  376,    0,    0,    0,
  376,  376,    0,    0,    0,  376,  376,  376,  376,  376,
  376,  376,  376,    0,    0,    0,  564,    0,    0,    0,
    0,    0,    0,    0,  376,    0,    0,  376,    0,  376,
    0,    0,    0,    0,    0,    0,    0,    0,  568,  376,
    0,    0,    0,    0,  568,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  564,    0,    0,
    0,    0,  564,    0,  564,  564,  564,  564,  564,  564,
  564,  564,  564,  564,  564,    0,    0,    0,    0,    0,
  568,    0,  564,    0,  564,    0,  564,    0,  564,  564,
  564,    0,  564,  564,    0,    0,  564,  564,  564,  564,
  564,  564,  564,  564,  564,    0,    0,    0,  564,  564,
  564,  564,  564,  564,  564,  564,    0,  571,    0,    0,
    0,  568,    0,  571,    0,    0,  568,  564,  568,  568,
  568,  568,  568,  568,  568,  568,  568,  568,  568,    0,
    0,    0,  564,    0,    0,    0,  568,    0,  568,    0,
  568,    0,  568,  568,  568,    0,  568,  568,    0,  571,
  568,  568,  568,  568,    0,    0,    0,  568,  568,    0,
    0,    0,  568,  568,  568,  568,  568,  568,  568,  568,
    0,  569,    0,    0,    0,    0,    0,  569,    0,    0,
    0,  568,    0,    0,    0,    0,    0,    0,    0,    0,
  571,    0,    0,    0,    0,  571,  568,  571,  571,  571,
  571,  571,  571,  571,  571,  571,  571,  571,    0,    0,
    0,    0,    0,  569,    0,  571,    0,  571,    0,  571,
    0,  571,  571,  571,    0,  571,  571,    0,    0,  571,
  571,  571,  571,    0,    0,    0,  571,  571,    0,    0,
    0,  571,  571,  571,  571,  571,  571,  571,  571,    0,
  570,    0,    0,    0,  569,    0,  570,    0,    0,  569,
  571,  569,  569,  569,  569,  569,  569,  569,  569,  569,
  569,  569,    0,    0,    0,  571,    0,    0,    0,  569,
    0,  569,    0,  569,    0,  569,  569,  569,    0,  569,
  569,    0,  570,  569,  569,  569,  569,    0,    0,    0,
  569,  569,    0,    0,    0,  569,  569,  569,  569,  569,
  569,  569,  569,    0,  574,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  569,    0,    0,    0,    0,    0,
    0,    0,    0,  570,    0,    0,    0,    0,  570,  569,
  570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
  570,    0,    0,    0,    0,    0,    0,    0,  570,    0,
  570,    0,  570,    0,  570,  570,  570,    0,  570,  570,
    0,    0,  570,  570,  570,  570,    0,    0,  575,  570,
  570,    0,    0,    0,  570,  570,  570,  570,  570,  570,
  570,  570,    0,    0,    0,    0,    0,  574,    0,    0,
    0,    0,  574,  570,  574,  574,  574,  574,  574,  574,
  574,  574,  574,  574,  574,    0,    0,    0,  570,    0,
    0,    0,  574,    0,  574,    0,  574,    0,  574,  574,
  574,    0,    0,    0,    0,    0,  574,  574,  574,  574,
    0,    0,  576,  574,  574,    0,    0,    0,  574,  574,
  574,  574,  574,  574,  574,  574,    0,    0,    0,    0,
    0,  575,    0,    0,    0,    0,  575,  574,  575,  575,
  575,  575,  575,  575,  575,  575,  575,  575,  575,    0,
    0,    0,  574,    0,    0,    0,  575,    0,  575,    0,
  575,    0,  575,  575,  575,    0,    0,    0,    0,    0,
  575,  575,  575,  575,    0,    0,  577,  575,  575,    0,
    0,    0,  575,  575,  575,  575,  575,  575,  575,  575,
    0,    0,    0,    0,    0,  576,    0,    0,    0,    0,
  576,  575,  576,  576,  576,  576,  576,  576,  576,  576,
  576,  576,  576,    0,    0,    0,  575,    0,    0,    0,
  576,    0,  576,    0,  576,    0,  576,  576,  576,    0,
    0,    0,    0,    0,  576,  576,  576,  576,    0,    0,
  578,  576,  576,    0,    0,    0,  576,  576,  576,  576,
  576,  576,  576,  576,    0,    0,    0,    0,    0,  577,
    0,    0,    0,    0,  577,  576,  577,  577,  577,  577,
  577,  577,  577,  577,  577,  577,  577,    0,    0,    0,
  576,    0,    0,    0,  577,    0,  577,    0,  577,    0,
  577,  577,  577,    0,    0,    0,    0,    0,  577,  577,
  577,  577,    0,    0,  579,  577,  577,    0,    0,    0,
    0,    0,  577,  577,  577,  577,  577,  577,    0,    0,
    0,    0,    0,  578,    0,    0,    0,    0,  578,  577,
  578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
  578,    0,    0,    0,  577,    0,    0,    0,  578,    0,
  578,    0,  578,    0,  578,  578,  578,    0,    0,    0,
    0,    0,  578,  578,  578,  578,    0,    0,  580,  578,
  578,    0,    0,    0,    0,    0,  578,  578,  578,  578,
  578,  578,    0,    0,    0,    0,    0,  579,    0,    0,
    0,    0,  579,  578,  579,  579,  579,  579,  579,  579,
  579,  579,  579,  579,  579,    0,    0,    0,  578,    0,
    0,    0,  579,    0,  579,    0,  579,    0,  579,  579,
  579,    0,    0,    0,    0,    0,  579,  579,  579,  579,
    0,    0,  581,  579,  579,    0,    0,    0,    0,    0,
  579,  579,  579,  579,  579,  579,    0,    0,    0,    0,
    0,  580,    0,    0,    0,    0,  580,  579,  580,  580,
  580,  580,  580,  580,  580,  580,  580,  580,  580,  351,
    0,    0,  579,    0,    0,  351,  580,    0,  580,    0,
  580,    0,  580,  580,  580,    0,    0,    0,    0,    0,
  580,  580,  580,  580,    0,    0,    0,  580,  580,    0,
    0,    0,    0,    0,  580,  580,  580,  580,  580,  580,
    0,  351,    0,    0,    0,  581,    0,    0,    0,    0,
  581,  580,  581,  581,  581,  581,  581,  581,  581,  581,
  581,  581,  581,    0,    0,    0,  580,    0,    0,    0,
  581,    0,  581,    0,  581,    0,  581,  581,  581,    0,
  582,    0,    0,    0,  581,  581,  581,  581,    0,    0,
    0,  581,  581,    0,    0,    0,    0,    0,  581,  581,
  581,  581,  581,  581,    0,    0,    0,  351,    0,    0,
  351,    0,  351,  351,    0,  581,    0,  351,  351,    0,
    0,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  581,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,    0,    0,    0,  583,    0,    0,    0,    0,    0,
    0,  351,  351,    0,    0,    0,    0,    0,    0,  351,
    0,    0,  351,  582,    0,    0,    0,  351,  582,    0,
  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
  582,    0,    0,    0,    0,    0,    0,    0,  582,    0,
  582,    0,  582,    0,  582,  582,  582,    0,    0,    0,
    0,    0,    0,    0,  582,  582,    0,    0,  584,  582,
  582,    0,    0,    0,    0,    0,    0,    0,  582,  582,
  582,  582,    0,    0,    0,    0,    0,  583,    0,    0,
    0,    0,  583,  582,  583,  583,  583,  583,  583,  583,
  583,  583,  583,  583,  583,    0,    0,    0,  582,    0,
    0,    0,  583,    0,  583,    0,  583,    0,  583,  583,
  583,    0,    0,    0,    0,    0,    0,    0,  583,  583,
    0,    0,  585,  583,  583,    0,    0,    0,    0,    0,
    0,    0,  583,  583,  583,  583,    0,    0,    0,    0,
    0,  584,    0,    0,    0,    0,  584,  583,  584,  584,
  584,  584,  584,  584,  584,  584,  584,  584,  584,    0,
    0,    0,  583,    0,    0,    0,  584,    0,  584,    0,
  584,    0,  584,  584,  584,    0,    0,    0,    0,    0,
    0,    0,  584,  584,    0,    0,  586,  584,  584,    0,
    0,    0,    0,    0,    0,    0,  584,  584,  584,  584,
    0,    0,    0,    0,    0,  585,    0,    0,    0,    0,
  585,  584,  585,  585,  585,  585,  585,  585,  585,  585,
  585,  585,  585,    0,    0,    0,  584,    0,    0,    0,
  585,    0,  585,    0,  585,    0,  585,  585,  585,    0,
    0,    0,    0,    0,    0,    0,  585,  585,    0,    0,
  587,  585,  585,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  585,  585,    0,    0,    0,    0,    0,  586,
    0,    0,    0,    0,  586,  585,  586,  586,  586,  586,
  586,  586,  586,  586,  586,  586,  586,    0,    0,    0,
  585,    0,    0,    0,  586,    0,  586,    0,  586,    0,
  586,  586,  586,    0,    0,    0,    0,    0,    0,    0,
  586,  586,    0,    0,  588,  586,  586,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  586,  586,    0,    0,
    0,    0,    0,  587,    0,    0,    0,    0,  587,  586,
  587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
  587,    0,    0,    0,  586,    0,    0,    0,  587,    0,
  587,    0,  587,    0,  587,  587,  587,    0,    0,    0,
    0,    0,    0,    0,    0,  587,    0,    0,  589,  587,
  587,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  587,  587,    0,    0,    0,    0,    0,  588,    0,    0,
    0,    0,  588,  587,  588,  588,  588,  588,  588,  588,
  588,  588,  588,  588,  588,    0,    0,    0,  587,    0,
    0,    0,  588,    0,  588,    0,  588,    0,  588,  588,
  588,    0,    0,    0,    0,    0,    0,    0,    0,  588,
    0,    0,  590,  588,  588,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  588,  588,    0,    0,    0,    0,
    0,  589,    0,    0,    0,    0,  589,  588,  589,  589,
  589,  589,  589,  589,  589,  589,  589,  589,  589,    0,
    0,    0,  588,    0,    0,    0,  589,    0,  589,    0,
  589,    0,  589,  589,  589,    0,    0,    0,    0,    0,
    0,    0,    0,  589,    0,    0,  591,    0,  589,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  589,  589,
    0,    0,    0,    0,    0,  590,    0,    0,    0,    0,
  590,  589,  590,  590,  590,  590,  590,  590,  590,  590,
  590,  590,  590,    0,    0,    0,  589,    0,    0,    0,
  590,    0,  590,    0,  590,    0,  590,  590,  590,    0,
    0,    0,    0,    0,    0,    0,    0,  590,    0,    0,
  592,    0,  590,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  590,  590,    0,    0,    0,    0,    0,  591,
    0,    0,    0,    0,  591,  590,  591,  591,  591,  591,
  591,  591,  591,  591,  591,  591,  591,    0,    0,    0,
  590,    0,    0,    0,  591,    0,  591,    0,  591,    0,
  591,  591,  591,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  593,    0,  591,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  591,  591,    0,    0,
    0,    0,    0,  592,    0,    0,    0,    0,  592,  591,
  592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
  592,    0,    0,    0,  591,    0,    0,    0,  592,    0,
  592,    0,  592,    0,  592,  592,  592,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  594,    0,
  592,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  592,  592,    0,    0,    0,    0,    0,  593,    0,    0,
    0,    0,  593,  592,  593,  593,  593,  593,  593,  593,
  593,  593,  593,  593,  593,    0,    0,    0,  592,    0,
    0,    0,  593,    0,  593,    0,  593,    0,  593,  593,
  593,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  593,  351,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  593,    0,    0,    0,    0,
    0,  594,    0,    0,    0,    0,  594,  593,  594,  594,
  594,  594,  594,  594,  594,  594,  594,  594,  594,    0,
    0,  351,  593,    0,    0,    0,  594,    0,  594,    0,
  594,    0,  594,  594,  594,    0,    0,    0,  408,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  594,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  594,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  594,    0,    0,  408,    0,    0,    0,    0,    0,
  351,    0,    0,    0,    0,    0,  594,    0,  351,    0,
  351,    0,  351,    0,    0,  351,    0,  351,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
    0,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,    0,    0,  351,    0,  351,    0,  351,
    0,  344,  351,  408,  408,  408,  408,  351,  408,    0,
  408,  408,    0,  408,  408,  408,  408,  408,    0,  408,
  408,  408,  408,    0,  408,  408,  408,  408,  408,  408,
  408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
  408,  408,  408,  408,  408,  408,    0,    0,    0,    0,
  344,    0,  408,    0,    0,  408,    0,    0,    0,    0,
  408,    0,    0,  351,  351,  351,  351,  351,    0,    0,
    0,  351,  351,    0,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,    0,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  351,  351,    0,    0,   90,
    0,    0,    0,  351,    0,    0,  351,   91,   92,   93,
   94,  351,    0,   95,   96,    0,   97,   98,   99,  100,
  101,  102,  103,    0,    0,    0,    0,    0,  104,    0,
  105,  106,  107,  108,  109,  110,    0,    0,  111,    0,
    0,    0,  112,  113,    0,  114,  115,  116,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  117,    0,  118,
    0,  119,  120,    0,    0,  121,    0,  122,  123,  124,
  125,  126,  127,  128,  129,  130,  131,  132,  133,    0,
  134,    0,    0,  135,  136,    0,    0,  137,  138,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  139,    0,    0,    0,
  140,    0,    0,    0,    0,  141,  142,  143,  144,  145,
    0,    0,    0,  146,    0,  147,    0,    0,    0,    0,
    0,  148,  149,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  284,    0,    0,    0,  150,  151,  152,  153,
   91,   92,   93,   94,    0,    0,   95,   96,    0,   97,
   98,   99,  100,  101,  102,  103,    0,    0,    0,    0,
    0,  104,    0,  105,  106,  107,  108,  109,  110,    0,
    0,  111,    0,    0,    0,  112,  113,    0,  114,  115,
  116,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  117,    0,  118,    0,  119,  120,    0,    0,  121,    0,
  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
  132,  133,    0,  134,    0,    0,  135,  136,    0,    0,
  137,  138,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  139,
    0,    0,    0,  140,    0,    0,    0,    0,  141,  142,
  143,  144,  145,    0,    0,    0,  146,    0,  147,    0,
    0,    0,    0,    0,  148,  149,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  522,    0,    0,    0,  150,
  151,  152,  153,   91,   92,   93,   94,    0,    0,   95,
   96,    0,   97,   98,   99,  100,  101,  102,  103,    0,
    0,    0,    0,    0,  104,    0,  105,  106,  107,  108,
  109,  110,    0,    0,  111,    0,    0,    0,  112,  113,
    0,  114,  115,  116,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  117,    0,  118,    0,  119,  120,    0,
    0,  121,    0,  122,  123,  124,  125,  126,  127,  128,
  129,  130,  131,  132,  133,    0,  134,    0,    0,  135,
  136,    0,    0,  137,  138,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  139,    0,    0,    0,  140,    0,    0,    0,
    0,  141,  142,  143,  144,  145,    0,    0,    0,  146,
    0,  147,    0,    0,    0,    0,    0,  148,  149,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  920,    0,
    0,    0,  150,  151,  152,  153,  920,  920,  920,  920,
    0,    0,  920,  920,    0,  920,  920,  920,  920,  920,
  920,  920,    0,    0,    0,    0,    0,  920,    0,  920,
  920,  920,  920,  920,  920,    0,    0,  920,    0,    0,
    0,  920,  920,    0,  920,  920,  920,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  920,    0,  920,    0,
  920,  920,    0,    0,  920,    0,  920,  920,  920,  920,
  920,  920,  920,  920,  920,  920,  920,  920,    0,  920,
    0,    0,  920,  920,    0,    0,  920,  920,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  920,    0,    0,    0,  920,
    0,    0,    0,    0,  920,  920,  920,  920,  920,    0,
    0,    0,  920,    0,  920,    0,    0,    0,    0,    0,
  920,  920,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  784,    0,    0,    0,  920,  920,  920,  920,  784,
  784,  784,  784,    0,    0,  784,  784,    0,  784,  784,
  784,  784,  784,  784,  784,    0,    0,    0,    0,    0,
  784,    0,  784,  784,  784,  784,  784,  784,    0,    0,
  784,    0,    0,    0,  784,  784,    0,  784,  784,  784,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  784,
    0,  784,    0,  784,  784,    0,    0,  784,    0,  784,
  784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
  784,    0,  784,    0,    0,  784,  784,    0,    0,  784,
  784,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  784,    0,
    0,    0,  784,    0,    0,    0,    0,  784,  784,  784,
  784,  784,    0,    0,    0,  784,    0,  784,    0,    0,
    0,    0,    0,  784,  784,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  684,    0,    0,    0,  784,  784,
  784,  784,   91,   92,    0,   94,    0,    0,   95,  273,
    0,    0,    0,   99,  100,  101,    0,  103,    0,    0,
   92,    0,   94,  104,    0,   95,  106,    0,    0,    0,
   99,    0,    0,  111,  103,    0,    0,    0,  113,    0,
  114,  115,  116,  106,    0,    0,    0,    0,    0,    0,
  111,    0,    0,    0,  118,  113,  119,  120,    0,  116,
  121,    0,    0,  123,    0,  125,    0,  127,  128,  129,
  274,  118,  132,  119,    0,    0,    0,  121,    0,  136,
    0,    0,  137,  138,    0,  128,  129,    0,    0,  132,
    0,    0,  251,    0,    0,    0,    0,    0,    0,    0,
    0,  497,  685,    0,    0,  140,    0,    0,    0,    0,
    0,  142,  143,  144,  145,    0,    0,    0,  146,    0,
  147,    0,    0,    0,    0,    0,  148,  149,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  684,    0,    0,
    0,  150,  317,  152,  153,   91,   92,    0,   94,    0,
    0,   95,  273,    0,    0,    0,   99,  100,  101,  335,
  103,    0,    0,   92,    0,   94,  104,    0,   95,  106,
    0,    0,    0,   99,    0,    0,  111,  103,    0,    0,
    0,  113,    0,  114,  115,  116,  106,    0,    0,    0,
    0,    0,    0,  111,    0,    0,    0,  118,  113,  119,
  120,  842,  116,  121,    0,    0,  123,    0,  125,    0,
  127,  128,  129,  274,  118,  132,  119,    0,    0,    0,
  121,    0,  136,    0,    0,  137,  138,    0,  128,  129,
    0,    0,  132,    0,    0,  251,    0,    0,    0,    0,
    0,    0,    0,    0,  497,    0,    0,    0,  140,    0,
    0,    0,    0,    0,  142,  143,  144,  145,    0,    0,
    0,  146,    0,  147,    0,    0,    0,    0,    0,  148,
  149,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  654,    0,    0,    0,  150,  317,  152,  153,   91,   92,
    0,   94,    0,    0,   95,  273,    0,    0,    0,   99,
  100,  101,  337,  103,    0,    0,   92,    0,   94,  104,
    0,   95,  106,    0,    0,    0,   99,    0,    0,  111,
  103,    0,    0,    0,  113,    0,  114,  115,  116,  106,
    0,    0,    0,    0,    0,    0,  111,    0,    0,    0,
  118,  113,  119,  120,    0,  116,  121,    0,    0,  123,
    0,  125,    0,  127,  128,  129,  274,  118,  132,  119,
    0,  134,    0,  121,    0,  136,    0,    0,  137,  138,
    0,  128,  129,    0,    0,  132,    0,    0,  251,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  140,    0,    0,    0,    0,    0,  142,  143,  144,
  145,    0,    0,    0,  146,    0,  147,    0,    0,    0,
    0,    0,  148,  149,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  684,    0,    0,    0,  150,  317,  152,
  153,   91,   92,    0,   94,    0,    0,   95,  273,    0,
    0,    0,   99,  100,  101,  248,  103,    0,    0,   92,
    0,   94,  104,    0,   95,  106,    0,    0,    0,   99,
    0,    0,  111,  103,    0,    0,    0,  113,    0,  114,
  115,  116,  106,    0,    0,    0,    0,    0,    0,  111,
    0,    0,    0,  118,  113,  119,  120,    0,  116,  121,
    0,    0,  123,    0,  125,    0,  127,  128,  129,  274,
  118,  132,  119,    0,    0,    0,  121,    0,  136,    0,
    0,  137,  138,    0,  128,  129,    0,    0,  132,    0,
    0,  431,    0,    0,    0,    0,    0,    0,    0,    0,
  497,    0,    0,    0,  140,    0,    0,    0,    0,    0,
  142,  143,  144,  145,    0,    0,    0,  146,    0,  147,
    0,    0,    0,    0,    0,  148,  149,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  831,    0,    0,    0,
  150,  317,  152,  153,   91,   92,    0,   94,    0,    0,
   95,  273,    0,    0,    0,   99,  100,  101,  248,  103,
    0,    0,   92,    0,   94,  104,    0,   95,  106,    0,
    0,    0,   99,    0,    0,  111,  103,    0,    0,    0,
  113,    0,  114,  115,  116,  106,    0,    0,    0,    0,
    0,    0,  111,    0,    0,    0,  118,  113,  119,  120,
    0,  116,  121,    0,    0,  123,    0,  125,    0,  127,
  128,  129,  274,  118,  132,  119,    0,    0,    0,  121,
    0,  136,    0,    0,  137,  138,    0,  128,  129,    0,
    0,  132,    0,    0,  499,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  140,    0,    0,
    0,    0,    0,  142,  143,  144,  145,    0,    0,    0,
  146,    0,  147,    0,    0,    0,    0,    0,  148,  149,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  619,
    0,    0,    0,  150,  317,  152,  153,  619,  619,    0,
  619,    0,    0,  619,  619,    0,    0,    0,  619,  619,
  619,  248,  619,    0,    0,   92,    0,   94,  619,    0,
   95,  619,    0,    0,    0,   99,    0,    0,  619,  103,
    0,    0,    0,  619,    0,  619,  619,  619,  106,    0,
    0,    0,    0,    0,    0,  111,    0,    0,    0,  619,
  113,  619,  619,    0,  116,  619,    0,    0,  619,    0,
  619,    0,  619,  619,  619,  619,  118,  619,  119,    0,
    0,    0,  121,    0,  619,    0,    0,  619,  619,    0,
  128,  129,    0,    0,  132,    0,    0,  251,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  619,    0,    0,    0,    0,    0,  619,  619,  619,  619,
    0,    0,    0,  619,    0,  619,    0,    0,    0,    0,
    0,  619,  619,    0,    0,    0,    0,    0,    0,   91,
   92,    0,   94,    0,    0,   95,  273,    0,    0,    0,
   99,  100,  101,    0,  103,    0,  619,  619,  619,  619,
  104,    0,    0,  106,    0,    0,    0,    0,    0,    0,
  111,    0,    0,    0,  603,  113,    0,  114,  115,  116,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  118,    0,  119,  120,    0,    0,  121,    0,    0,
  123,    0,  125,    0,  127,  128,  129,  274,    0,  132,
    0,    0,    0,    0,    0,    0,  136,    0,    0,  137,
  138,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  671,  909,
    0,    0,  140,    0,    0,    0,    0,    0,  142,  143,
  144,  145,    0,    0,    0,  146,    0,  147,    0,    0,
    0,    0,    0,  148,  149,    0,    0,    0,    0,    0,
    0,   91,   92,    0,   94,    0,    0,   95,  273,    0,
    0,    0,   99,  100,  101,    0,  103,    0,  150,  672,
  152,  153,  104,    0,   30,  106,   30,    0,  673,    0,
    0,    0,  111,    0,    0,    0,    0,  113,    0,  114,
  115,  116,    0,    0,    0,    0,    0,   30,    0,    0,
    0,    0,    0,  118,    0,  119,  120,    0,    0,  121,
   30,    0,  123,    0,  125,   30,  127,  128,  129,  274,
   30,  132,   30,   30,   30,   30,    0,    0,  136,    0,
   30,  137,  138,    0,   30,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   30,    0,    0,   30,
  671,   30,    0,    0,  140,    0,    0,    0,    0,    0,
  142,  143,  144,  145,    0,    0,    0,  146,    0,  147,
    0,    0,   30,    0,    0,  148,  149,   30,   30,    0,
    0,    0,    0,  351,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  480,    0,    0,
  150,  672,  152,  153,    0,   91,   92,    0,   94,    0,
  673,   95,  273,    0,    0,    0,   99,  100,  101,  351,
  103,    0,    0,    0,    0,    0,  104,    0,    0,  106,
    0,    0,    0,    0,    0,    0,  111,    0,    0,    0,
    0,  113,    0,  114,  115,  116,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  118,    0,  119,
  120,    0,    0,  121,    0,    0,  123,    0,  125,    0,
  127,  128,  129,  274,    0,  132,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  351,  351,
  351,  351,    0,    0,    0,  351,  351,    0,    0,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  140,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
  351,    0,    0,    0,    0,    0,    0,  351,    0,    0,
  351,    0,    0,    0,    0,    0,    0,   55,    0,   55,
    0,   55,    0,   55,  150,  481,   55,    0,   55,   55,
    0,   55,    0,   55,    0,   55,    0,   55,   55,   55,
   55,    0,    0,   55,   55,    0,    0,    0,    0,   55,
   55,   55,   55,   55,    0,    0,   55,   55,   55,    0,
   55,    0,   55,   55,   55,   55,   55,   55,   55,   55,
    0,   55,   55,   55,   55,    0,    0,   55,   55,   55,
    0,   55,    0,    0,    0,    0,   55,   55,    0,   55,
   55,    0,   55,   55,   55,    0,    0,    0,   55,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   55,   55,   55,    0,    0,
    0,    0,    0,    0,    0,    0,   54,    0,    0,   55,
   54,    0,   54,    0,    0,   54,    0,   54,   54,    0,
   54,    0,   54,    0,   54,    0,   54,   54,   54,   54,
    0,    0,   54,   54,    0,    0,    0,    0,   54,    0,
   54,   54,   54,    0,    0,   54,    0,   54,    0,   54,
   55,    0,   54,    0,   54,   54,   54,   54,    0,    0,
    0,   54,   54,   54,    0,    0,   54,   54,   54,    0,
    0,    0,    0,    0,    0,   54,   54,    0,   54,   54,
   54,   54,   54,   54,   54,    0,   54,   54,    0,   54,
    0,   54,   54,    0,   54,    0,   54,    0,   54,    0,
   54,   54,   54,   54,   54,    0,   54,   54,    0,   87,
    0,    0,   54,    0,   54,   54,   54,    0,   54,   54,
    0,   54,    0,   54,    0,    0,   54,    0,   54,   54,
   54,   54,    0,    0,    0,   54,   54,   54,    0,    0,
   54,   54,   54,    0,    0,    0,    0,    0,    0,   54,
   54,    0,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,    0,   54,    0,   54,   54,    0,   54,    0,
   54,    0,   54,    0,   54,   54,   54,   54,   54,    0,
   54,   54,    0,   88,    0,    0,   54,    0,   54,   54,
   54,    0,   54,   54,    0,   54,    0,   54,    0,    0,
   54,    0,   54,   54,   54,   54,    0,    0,    0,   54,
   54,   54,    0,    0,   54,   54,   54,    0,    0,    0,
    0,    0,    0,   54,   54,    0,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,    0,   54,    0,   54,
   54,    0,   54,    0,   54,    0,   54,    0,   54,   54,
   54,   54,   54,    0,   54,   54,    0,  110,    0,    0,
   54,    0,   54,   54,   54,    0,   54,   54,    0,   54,
    0,   54,    0,    0,   54,    0,   54,   54,   54,   54,
    0,    0,    0,   54,   54,   54,    0,    0,   54,   54,
   54,    0,    0,    0,    0,    0,    0,   54,   54,    0,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
    0,   54,    0,   54,   54,    0,   54,    0,   54,    0,
   54,    0,   54,   54,   54,   54,   54,    0,   54,   54,
    0,  111,    0,    0,   54,    0,   54,   54,   54,    0,
   54,   54,    0,   54,    0,   54,    0,    0,   54,    0,
   54,   54,   54,   54,    0,    0,    0,   54,   54,   54,
    0,    0,   54,   54,   54,    0,    0,    0,    0,    0,
    0,   54,   54,    0,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,    0,   54,    0,   54,   54,    0,
   54,    0,   54,    0,   54,    0,   54,   54,   54,   54,
   54,    0,   54,   54,    0,  232,    0,    0,   54,    0,
   54,   54,   54,    0,    0,   54,    0,   54,    0,   54,
  351,    0,   54,    0,   54,   54,   54,   54,    0,    0,
    0,   54,   54,   54,    0,    0,   54,   54,   54,    0,
    0,    0,    0,  351,    0,   54,   54,    0,   54,   54,
   54,   54,   54,   54,    0,   54,  351,   54,    0,    0,
    0,  351,    0,    0,  351,    0,  351,    0,  351,  351,
  351,  351,    0,   54,   54,    0,  351,    0,    0,  233,
  351,    0,    0,    0,  351,    0,   54,    0,    0,    0,
    0,   54,  351,    0,    0,  351,   54,  351,   54,   54,
   54,   54,    0,    0,    0,    0,   54,    0,    0,    0,
   54,    0,    0,    0,    0,    0,  351,    0,  351,    0,
    0,    0,   54,    0,  351,   54,  283,   54,  351,   54,
    0,    0,   91,   92,    0,   94,    0,    0,   95,  273,
    0,  351,    0,   99,  100,  101,    0,  103,   54,   54,
   54,    0,    0,  104,    0,   54,  106,    0,    0,    0,
    0,    0,    0,  111,    0,    0,    0,    0,  113,    0,
  114,  115,  116,  351,  554,    0,    0,    0,   54,    0,
    0,  555,    0,    0,  118,    0,  119,  120,    0,    0,
  121,   54,    0,  123,    0,  125,   54,  127,  128,  129,
  274,   54,  132,   54,   54,   54,   54,    0,    0,  556,
    0,   54,  137,  138,    0,   54,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
   54,    0,   54,    0,    0,  140,  837,    0,  557,    0,
    0,  142,  143,  144,  145,    0,    0,    0,  146,    0,
  147,    0,    0,   54,   54,   54,  148,  149,  214,    0,
    0,    0,    0,    0,   91,   92,    0,   94,    0,    0,
   95,  273,    0,    0,    0,   99,  100,  101,    0,  103,
    0,  150,  457,  152,  153,  104,    0,   54,  106,    0,
    0,    0,    0,    0,    0,  111,    0,    0,    0,    0,
  113,    0,  114,  115,  116,    0,  554,    0,    0,    0,
   54,    0,    0,  555,    0,    0,  118,    0,  119,  120,
    0,    0,  121,   54,    0,  123,    0,  125,   54,  127,
  128,  129,  274,   54,  132,   54,   54,   54,   54,    0,
    0,  556,    0,   54,  137,  138,    0,   54,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
    0,    0,   54,    0,   54,    0,    0,  140,    0,    0,
  557,    0,    0,  142,  143,  144,  145,    0,    0,    0,
  146,    0,  147,    0,    0,   54,   54,   54,  148,  149,
  216,    0,    0,    0,    0,    0,   91,   92,    0,   94,
    0,    0,   95,  273,    0,    0,    0,   99,  100,  101,
    0,  103,    0,  150,  457,  152,  153,  104,    0,   54,
  106,   54,    0,    0,    0,    0,    0,  111,    0,    0,
    0,    0,  113,    0,  114,  115,  116,    0,  554,    0,
    0,    0,   54,    0,    0,  555,    0,    0,  118,    0,
  119,  120,    0,    0,  121,   54,    0,  123,    0,  125,
   54,  127,  128,  129,  274,   54,  132,   54,   54,   54,
   54,    0,    0,  556,    0,   54,  137,  138,    0,   54,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   54,    0,    0,   54,    0,   54,    0,    0,  140,
    0,    0,    0,    0,    0,  142,  143,  144,  145,    0,
    0,    0,  146,    0,  147,    0,    0,   54,    0,    0,
  148,  149,  317,    0,    0,    0,    0,    0,   91,   92,
    0,   94,    0,    0,   95,  273,    0,    0,    0,   99,
  100,  101,    0,  103,    0,  150,  457,  152,  153,  104,
    0,    0,  106,    0,    0,    0,    0,    0,    0,  111,
    0,    0,    0,    0,  113,    0,  114,  115,  116,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  118,    0,  119,  120,    0,    0,  121,    0,    0,  123,
    0,  125,    0,  127,  128,  129,  274,    0,  132,    0,
    0,  134,    0,    0,    0,  136,    0,    0,  137,  138,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  140,    0,    0,    0,    0,    0,  142,  143,  144,
  145,    0,    0,    0,  146,    0,  147,    0,    0,    0,
    0,    0,  148,  149,    0,    0,    0,    0,    0,    0,
   91,   92,    0,   94,    0,    0,   95,  273,    0,    0,
    0,   99,  100,  101,    0,  103,    0,  150,  317,  152,
  153,  104,    0,    0,  106,    0,    0,    0,    0,    0,
    0,  111,    0,    0,    0,    0,  113,    0,  114,  115,
  116,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  118,    0,  119,  120,    0,    0,  121,    0,
    0,  123,    0,  125,    0,  127,  128,  129,  274,    0,
  132,    0,    0,    0,    0,    0,    0,  136,    0,    0,
  137,  138,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  800,    0,    0,  140,    0,    0,    0,    0,    0,  142,
  143,  144,  145,    0,    0,    0,  146,    0,  147,    0,
    0,    0,    0,    0,  148,  149,    0,    0,    0,    0,
    0,    0,   91,   92,    0,   94,    0,    0,   95,  273,
    0,    0,    0,   99,  100,  101,    0,  103,    0,  150,
  317,  152,  153,  104,    0,   52,  106,    0,    0,    0,
    0,    0,    0,  111,    0,    0,    0,    0,  113,    0,
  114,  115,  116,    0,    0,    0,    0,    0,   53,    0,
    0,    0,    0,    0,  118,    0,  119,  120,    0,    0,
  121,   54,    0,  123,    0,  125,   56,  127,  128,  129,
  274,   57,  132,   58,   59,   60,   61,    0,    0,  136,
    0,   62,  137,  138,    0,   63,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   64,    0,    0,
   65,  497,   66,    0,    0,  140,    0,    0,    0,    0,
    0,  142,  143,  144,  145,    0,    0,    0,  146,    0,
  147,    0,    0,   67,    0,    0,  148,  149,    0,    0,
    0,    0,    0,    0,   91,   92,    0,   94,    0,    0,
   95,  273,    0,    0,    0,   99,  100,  101,    0,  103,
    0,  150,  317,  152,  153,  104,    0,    0,  106,    0,
    0,    0,    0,    0,    0,  111,    0,    0,    0,    0,
  113,    0,  114,  115,  116,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  118,    0,  119,  120,
    0,    0,  121,    0,    0,  123,    0,  125,    0,  127,
  128,  129,  274,    0,  132,    0,    0,    0,    0,    0,
    0,  136,    0,    0,  137,  138,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  491,    0,    0,    0,  140,    0,    0,
    0,    0,    0,  142,  143,  144,  145,    0,    0,    0,
  146,    0,  147,    0,    0,    0,    0,    0,  148,  149,
    0,    0,    0,    0,    0,    0,   91,   92,    0,   94,
    0,    0,   95,  273,    0,    0,    0,   99,  100,  101,
    0,  103,    0,  150,  317,  152,  153,  104,    0,    0,
  106,    0,    0,    0,    0,    0,    0,  111,    0,    0,
    0,    0,  113,    0,  114,  115,  116,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  118,    0,
  119,  120,    0,    0,  121,    0,    0,  123,    0,  125,
    0,  127,  128,  129,  274,    0,  132,    0,    0,    0,
    0,    0,    0,  136,    0,    0,  137,  138,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  140,
    0,    0,    0,    0,    0,  142,  143,  144,  145,    0,
    0,    0,  146,    0,  147,    0,    0,    0,    0,    0,
  148,  149,    0,    0,    0,    0,    0,    0,   91,   92,
    0,   94,    0,    0,   95,  273,    0,    0,    0,   99,
  100,  101,    0,  103,    0,  150,  317,  152,  153,  104,
    0,    0,  106,    0,    0,    0,    0,    0,    0,  111,
    0,    0,    0,    0,  113,    0,  114,  115,  116,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  118,    0,  119,  120,    0,    0,  121,    0,    0,  123,
    0,  125,    0,  127,  128,  129,  274,    0,  132,    0,
    0,    0,    0,    0,    0,  136,    0,    0,  137,  138,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  140,    0,    0,    0,    0,    0,  142,  143,  144,
  145,    0,    0,    0,  146,    0,  147,    0,    0,    0,
    0,    0,  148,  149,    0,    0,    0,    0,    0,    0,
   91,   92,    0,   94,    0,    0,   95,  273,    0,    0,
    0,   99,  100,  101,    0,  103,    0,  150,  457,  152,
  153,  104,    0,    0,  106,    0,    0,    0,    0,    0,
    0,  111,    0,    0,    0,    0,  113,    0,  114,  115,
  116,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  118,    0,  119,  120,    0,    0,  121,    0,
    0,  123,    0,  125,    0,  127,  128,  129,  274,    0,
  132,    0,    0,    0,    0,    0,    0,  136,    0,    0,
  137,  138,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  140,    0,    0,    0,    0,    0,  142,
  143,  144,  145,    0,    0,    0,  146,    0,  147,    0,
    0,    0,    0,    0,  148,  149,    0,    0,    0,    0,
    0,    0,   84,   84,    0,   84,    0,    0,   84,   84,
    0,    0,    0,   84,   84,   84,    0,   84,    0,  150,
  628,  152,  153,   84,    0,    0,   84,    0,    0,    0,
    0,    0,    0,   84,    0,    0,    0,    0,   84,    0,
   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   84,    0,   84,   84,    0,    0,
   84,    0,    0,   84,    0,   84,    0,   84,   84,   84,
   84,    0,   84,    0,    0,    0,    0,    0,    0,   84,
    0,    0,   84,   84,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   84,    0,    0,    0,    0,
    0,   84,   84,   84,   84,    0,    0,    0,   84,    0,
   84,    0,    0,    0,    0,    0,   84,   84,    0,    0,
    0,    0,    0,    0,  156,  156,    0,  156,    0,    0,
  156,  156,    0,    0,    0,  156,  156,  156,    0,  156,
    0,   84,   84,   84,   84,  156,    0,    0,  156,    0,
    0,    0,    0,    0,    0,  156,    0,    0,    0,    0,
  156,    0,  156,  156,  156,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  156,    0,  156,  156,
    0,    0,  156,    0,    0,  156,    0,  156,    0,  156,
  156,  156,  156,    0,  156,    0,    0,    0,    0,    0,
    0,  156,    0,    0,  156,  156,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  156,    0,    0,
    0,    0,    0,  156,  156,  156,  156,    0,    0, 1241,
  156,    0,  156,    0,    0,    0,    0,    0,  156,  156,
    0,    0,    0,    0,    0,    0,   91,   92,    0,   94,
    0,    0,   95,  273,    0,    0,    0,   99,  100,  101,
    0,  103,    0,  156,  156,  156,  156,  104,    0,    0,
  106, 1242,    0,    0,    0,    0,    0,  111,    0,    0,
    0,    0,  113,    0,  114,  115,  116,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  118,    0,
  119,  120,    0,    0,  121,    0,    0,  123,    0,  125,
    0,  127,  128,  129,  274,    0,  132, 1243, 1244, 1245,
 1246,    0, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
    0,    0, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  140,
    0,    0,    0,    0,    0,  142,  143,  144,  145,    0,
    0,    0,  146,    0,  147,    0,    0,    0,    0,    0,
  148,  149,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  644,    0,  644,    0,  644,  150,  275,  644,  153,  644,
  644,    0,  644,    0,  644,    0,  644,    0,  644,  644,
  644,    0,    0,    0,  644,  644,    0,    0,    0,    0,
  644,    0,  644,  644,    0,    0,    0,  644,    0,    0,
    0,  644,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  644,  644,    0,  644,    0,    0,    0,  644,
  644,    0,    0,    0,    0,    0,    0,  644,  644,   91,
   92,  644,   94,    0,  644,   95,  273,    0,    0,  644,
   99,  100,  101,    0,  103,    0,    0,    0,    0,    0,
  104,    0,    0,  106,    0,    0,    0,  644,  644,    0,
  111,    0,    0,    0,    0,  113,    0,  114,  115,  116,
  644,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  118,    0,  119,  120,    0,    0,  121,    0,    0,
  123,    0,  125,    0,  127,  128,  129,  274,  643,  132,
  643,    0,  134,  643,    0,  643,  643,    0,  643,    0,
  643,  644,  643,    0,  643,  643,  643,    0,    0,    0,
  643,  643,    0,    0,    0,    0,  643,    0,  643,  643,
    0,    0,  140,  643,    0,    0,    0,  643,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  643,
    0,  643,    0,    0,    0,  643,  643,    0,    0,    0,
    0,    0,    0,  643,  643,    0,    0,  643,    0,    0,
  643,    0,    0,    0,    0,  643,    0,    0,  150,  275,
  643,    0,  643,    0,    0,  643,    0,  643,  643,    0,
  643,    0,  643,    0,  643,    0,  643,  643,  643,    0,
    0,    0,  643,  643,    0,    0,  643,    0,  643,    0,
  643,  643,    0,    0,    0,  643,    0,    0,    0,  643,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  643,    0,  643,    0,    0,    0,  643,  643,    0,
    0,    0,    0,    0,    0,  643,  643,  643,   92,  643,
   94,    0,  643,   95,    0,    0, 1168,  643,   99,    0,
  243,    0,  103,    0,  244, 1169, 1170,    0,    0,    0,
 1171,  106,    0,    0,    0,    0, 1172,    0,  111,    0,
   92,    0,   94,  113,    0,   95,    0,  116, 1168,    0,
   99,    0,  243,    0,  103,    0,  244, 1169, 1170,  118,
    0,  119, 1171,  106,    0,  121,    0,    0, 1172,    0,
  111,    0,    0,  128,  129,  113,    0,  132,    0,  116,
 1173,    0,    0,    0,    0, 1174,    0,    0,    0,  643,
   54,  118,   54,  119,    0,   54,    0,  121,    0,    0,
   54,    0,    0,    0,   54,  128,  129,    0,    0,  132,
    0,    0, 1173,   54,    0,    0, 1175, 1174,    0,    0,
   54,    0,    0,    0,    0,   54,    0,    0,    0,   54,
   54,   54,   54,   54,    0,   54,    0,    0,   54,    0,
   54,   54,    0,   54,   54,    0,    0,   54,    0,    0,
   54,    0,    0,   54,    0,   54,   54, 1176,    0,   54,
   54,    0,   54,    0,    0,   54,    0,    0,    0,   54,
    0,   54,    0,   54,    0,    0,    0,    0,   54,    0,
    0,   54,    0,   54,    0,    0,    0,   54,    0, 1176,
   54,    0,    0,  173,    0,   54,   54,    0,    0,   54,
    0,    0,   54,   54,    0,   54,    0,    0,   54,    0,
    0,    0,    0,   54,    0,    0,    0,   54,    0,    0,
    0,    0,    0,    0,    0,    0,   54,    0,    0,    0,
    0,  173,    0,   54,    0,   92,    0,   94,   54,   54,
   95,    0,   54,    0,   54,   99,   54,    0,    0,  103,
    0,   54,    0,    0,   54,    0,   54,    0,  106,    0,
   54,    0,    0,   54,    0,  111,    0,    0,   54,   54,
  113,    0,   54,    0,  116,   54,  535,    0,    0,   54,
    0,    0,    0,  536,    0,    0,  118,    0,  119,   92,
    0,   94,  121,    0,   95,  537, 1094,    0,    0,   99,
  128,  129,    0,  103,  132,    0,   92,  538,   94,    0,
    0,   95,  106,    0,    0,    0,   99,    0,    0,  111,
  103,    0,    0,    0,  113,    0, 1095,    0,  116,  106,
    0,    0,    0,    0,    0,    0,  111,    0,    0,    0,
  118,  113,  119,    0,    0,  116,  121, 1096,    0,    0,
    0,    0,   54,    0,  128,  129,    0,  118,  132,  119,
   92,  251,   94,  121,    0,   95,    0,    0,    0,    0,
   99,  128,  129,    0,  103,  132,    0,  502,  251,  502,
    0,    0,  502,  106,  539,    0,    0,  502,    0,    0,
  111,  502,    0,    0,    0,  113,    0,    0,    0,  116,
  502,    0,    0,    0,    0,    0,    0,  502,    0,    0,
    0,  118,  502,  119,    0,    0,  502,  121,    0,    0,
    0,    0,    0,    0,    0,  128,  129,    0,  502,  132,
  502,  192,  538,  192,  502,    0,  192,    0,  248,    0,
    0,  192,  502,  502,    0,  192,  502,    0,  202,  502,
  202,    0,    0,  202,  192,  605,    0,    0,  202,    0,
    0,  192,  202,    0,    0,    0,  192,    0,    0,    0,
  192,  202,    0,    0,    0,    0,    0,    0,  202,    0,
    0,    0,  192,  202,  192,    0,    0,  202,  192,    0,
    0,    0,    0,    0,    0,    0,  192,  192,    0,  202,
  192,  202,  193,  192,  193,  202,    0,  193,    0,  248,
    0,    0,  193,  202,  202,    0,  193,  202,    0,    0,
  202,    0,    0,    0,    0,  193,  502,    0,    0,    0,
    0,    0,  193,    0,    0,    0,    0,  193,    0,    0,
    0,  193,    0,    0,    0,   39,    0,    0,    0,    0,
   39,    0,    0,  193,    0,  193,    0,    0,    0,  193,
    0,   39,    0,    0,    0,    0,   39,  193,  193,    0,
   39,  193,    0,   39,  193,    0,    0,    0,    0,    0,
  192,    0,    0,    0,    0,   39,   39,    0,    0,    0,
   39,   39,    0,    0,    0,    0,   39,  202,   39,   39,
   39,   39,    0,    0,    0,    0,   39,    0,    0,    0,
   39,    0,   39,    0,    0,    0,   40,    0,    0,    0,
    0,   40,   39,    0,   39,   39,    0,   39,    0,    0,
    0,   39,   40,    0,    0,    0,    0,   40,    0,    0,
    0,   40,    0,    0,   40,    0,    0,    0,   39,    0,
    0,  193,    0,   39,   39,    0,   40,   40,    0,    0,
    0,   40,   40,    0,    0,    0,    0,   40,    0,   40,
   40,   40,   40,    0,    0,    0,    0,   40,    0,    0,
    0,   40,    0,   40,    0,    0,    0,   37,    0,    0,
    0,    0,   37,   40,    0,   40,   40,    0,   40,    0,
    0,    0,   40,   37,    0,    0,    0,    0,   37,    0,
    0,    0,   37,    0,    0,   37,    0,    0,    0,   40,
    0,    0,    0,    0,   40,   40,    0,   37,   37,    0,
    0,    0,   37,   37,    0,    0,    0,    0,   37,    0,
   37,   37,   37,   37,    0,    0,    0,    0,   37,    0,
    0,    0,   37,    0,   37,    0,    0,    0,   38,    0,
    0,    0,    0,   38,   37,    0,    0,   37,    0,   37,
    0,    0,    0,   37,   38,    0,    0,    0,    0,   38,
    0,    0,    0,   38,    0,    0,   38,    0,    0,    0,
   37,    0,    0,    0,    0,   37,   37,    0,   38,   38,
    0,    0,    0,   38,   38,    0,    0,    0,    0,   38,
    0,   38,   38,   38,   38,    0,    0,    0,    0,   38,
    0,    0,   30,   38,    0,   38,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,    0,    0,   38,    0,
   38,    0,    0,    0,   38,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
    0,   38,    0,   30,    0,    0,   38,   38,   30,    0,
   30,   30,   30,   30,    0,    0,   30,    0,   30,    0,
    0,    0,   30,    0,    0,    0,    0,   54,    0,    0,
    0,    0,    0,    0,   30,    0,    0,   30,   54,   30,
    0,    0,    0,   54,    0,    0,    0,   54,    0,    0,
   54,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   30,    0,   54,   54,    0,   30,   30,   54,   54,    0,
    0,    0,    0,   54,    0,   54,   54,   54,   54,    0,
    0,    0,    0,   54,    0,    0,    0,   54,    0,   54,
    0,    0,    0,    0,    0,    0,   54,    0,    0,   54,
    0,    0,   54,    0,   54,    0,    0,   54,   54,    0,
    0,    0,   54,    0,    0,    0,   54,    0,    0,   54,
    0,    0,    0,    0,    0,   54,    0,    0,    0,    0,
   41,   54,   54,    0,    0,    0,   54,   54,    0,    0,
    0,    0,   54,    0,   54,   54,   54,   54,    0,    0,
    0,    0,   54,    0,    0,   54,   54,    0,   54,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   54,    0,
    0,   54,    0,   54,    0,    0,    0,   54,   54,    0,
    0,    0,    0,    0,    0,   54,    0,   54,    0,    0,
    0,   54,    0,    0,   54,    0,   54,    0,    0,   42,
    0,   54,    0,   54,   54,   54,   54,    0,   54,   54,
    0,   54,    0,    0,    0,   54,    0,    0,    0,    0,
    0,   54,    0,    0,    0,   52,   54,   54,    0,    0,
   54,   54,   54,   54,   54,   54,   54,    0,    0,   54,
    0,   54,    0,    0,    0,   54,    0,    0,   53,    0,
    0,    0,    0,   54,    0,    0,    0,   54,  316,    0,
   54,   54,   54,    0,    0,   55,   56,    0,    0,    0,
    0,   57,    0,   58,   59,   60,   61,    0,    0,    0,
    0,   62,    0,   54,    0,   63,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   64,    0,    0,
   65,    0,   66,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   67,
  };
  protected static readonly short [] yyCheck = {             3,
    0,   41,   69,    8,  495,   41,   41,    7,  497,   41,
   10,  315,  307,  243,  316,  233,   28,   41,   78,   97,
  134,  339,  256,  524,    3,  267,  616,  471,   97,  334,
  312,  202,  842,  534,  863,   39,  491,  953,  954,    0,
 1018,   46,   42,  157,  541,  256,  160,  124,   41,  256,
  643,  268,   41,  244,  256,  268,   96,  294,  256,  256,
   39,  256,  256, 1101,  335,  294,  256,   41,   72,   41,
   74,  268,   41,   97,  256,  256,  256,  256,  102, 1117,
  314,  117,  256,  942,   41,   41,  126,   41,  124,   41,
  130,  151,   41,   72,   41,  627,  256, 1130,  256,  368,
  364,  256,  256,  268,  140,  272,  349,  350,  364,  294,
    0,  276,  372,  387,  256,  264,   74,    7,  664,  665,
   10,  306,  282,  306,  366,  355,  357, 1160,  256,  296,
  313, 1047,  339,  137,  138,  256,  410,  344,  252,  346,
  999,  339,  325,  257,  758,  352,  353,  364,  257,  153,
  387,  382,   42,  424,  314,  424,  323,  689,  339,  705,
  424,  707,  202,  344,  424,  346,  202,  202,  424,  294,
  202,  352,  353,  410,  408,  377,  325,  666,  202,  137,
  138,  424,  377,  256,  363,  414,  365,  780,  367,  782,
  494,  371,  100,  325,  823,  153,  370,  105,  258,  107,
  108,  418,  110,  414,  112,  418,  524,  256,  257,  202,
  294,  453,  120,  202,  122,  275,  534,  424,   97,  333,
  414,  418,  130,  365,  414,  133,  304,  135,  202,  414,
  202,  267,  414,  202,  312,  304,  272,  416,  366,  243,
  419,  432,  370,  424,  365,  202,  202,  861,  202,  414,
  202,  159,  335,  202,  414,  202,  414,  317,  262,  414,
  414,  330,  387,  142,  143,  144,  145,  146,  147,  148,
  149,  307,  294,  350,  310,  311,  280,  262, 1316,  266,
  304,  511,  414,  262,  781,  410,  335,  323,  369,  329,
  363,  256,  328,  922,  330,  924,  257,  357,  334,  372,
  364,  372,  306,  387,  339, 1343,  330,  339,  256,  358,
  364,  541,  316,  298,  350,  339,  365, 1355,  322, 1357,
  157,  256,  280,  160,  368,  814,  410,  314,  256,  256,
  366,  367, 1310,  256,  256,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,  381,  802,  652,  306,  793,
  370,  355,  807,  424,  256,  364,  343,  813,  904,  277,
  424, 1171,  263,  281,  322,  387,  274,  403,  276,  256,
  424,  420,  421,  422,  339,  363,  370,  365,  349,  350,
  424,  385,  386,  897,  371,  368,  668,  370,  410,  374,
  375,  257,  412,  387,  388,  637,  456,  457,  363, 1228,
  387,  367,  471,  349,  350,  365,  314,  896,  335,  413,
  414,  925,  414,  256,  315,  424,  364,  453,  326,  341,
  257,  481,  370,  410,  342,  304,  466,  385,  386,  364,
  621,  358,  623,  312,  625,  370,  423,  365,  365,  368,
  444,  424,  365,  365,  256,  257,  450,  471, 1277, 1278,
  416, 1280,  339,  424,  968,  413,  414,  493,  368,  495,
 1376,  497, 1291,  365,  256, 1294, 1295,  507,  508,  343,
  364,  450,  369,  372,  778,  372,  363, 1393,  424,  368,
 1309,  370,  518, 1029,  520, 1075,  444,  792,  548,  524,
  550,  370,  524,  533,  724,  424,  339,  371,  740,  534,
  524,  368,  534,  382,  383,  384,  677,  511,  387,  388,
  534, 1345, 1346,  387,  424, 1061, 1062,  363,  554,  555,
  363,  367, 1068,  335,  367,  969,  269,  370,  371,  372,
  424,  773,  511,  261,  377,  424,  410,  541, 1080,  263,
  842, 1131,  410,  286,  365,  364,  358,  414,  369,  423,
  364,  781,  370,  365,  256,  423,  284,  256,  256,  467,
  390,  391, 1079, 1080, 1065,  365,  602, 1401,  628,  297,
  416,  363,  608,  365,  302,  367,  368,  811,  370,  307,
  372,  309,  310,  311,  312,  699, 1128, 1104, 1130,  317,
  668,  315, 1182,  321,  412,  414, 1186,  325,  419,  507,
  414,  637,  410,  387,  256,  333,  305,  305,  336,  913,
  338, 1128,  672, 1130,  414,  619,  652,  369, 1160,   10,
  372,   12,  414,  364,  416,  661,  410,  419, 1080,  370,
  666,  359,  644,  365,  272,  671,  377,  339,  414,  423,
  664,  665,  344, 1160,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  695,    7,   48,  296,   10,
   51,  619,  364, 1080,  366,  343,  368,  546,  370,  371,
  372,  341,  343,  709,  414,  711, 1128, 1080, 1130,  339,
  975,  705,  414,  707,  720,  323,  414,  339,  414,  693,
  365,   42,  344,  368,  346,  365,   10,  423,  414,  735,
  352,  353,  343,  363,  740,  741,  377,  743, 1160,  387,
  272, 1128,  372, 1130, 1018, 1033,  387,  372,  754,  755,
  724,  939,  424,  371,  272, 1128, 1021, 1130,   42,  277,
  371, 1080,  410,  281,  296,  693,  377,  773,  397,  410,
  776,  410,  778, 1160,  363,  423,  387, 1065,  296,  414,
  409,   41,  423,  372,  423, 1080,  792, 1160,  423,  795,
  339,  323,  762,  823, 1059,  344,  802,  346, 1086,  410,
  349,  350, 1080,  352,  353,  323,  812,  781,  814, 1128,
  784, 1130,  423,  372,   74,  306, 1080,  308,  339,  668,
  377,  370,  313,  344,  342,  346,  294, 1092,  349,  350,
  387,  352,  353, 1128,  325, 1130,  365,   97,  306, 1298,
  256, 1160,  102,  849,  256,  851,  387,  853,  377,  265,
 1128,  267, 1130,  410,  270,  306,  784,  269,  357,  275,
  370,  377,  313,  279, 1128, 1160, 1130,  873,  842,  410,
  369,  387,  288,  357,  286,  424,  417,  137,  138,  295,
  363,  365, 1160,  382,  300,  369,  363,  862,  304,  372,
  896, 1193,  922,  153,  410,  372, 1160, 1199,  382, 1171,
  316, 1360,  318,  424, 1206,  372,  322,  423,  357,  368,
  904,  370,  339,  372,  330,  331,  926,  344,  334,  346,
  369,  337,  349,  350,  357,  352,  353,  933,  367,  935,
  414,  937,  365,  382,  410,  368,  369, 1396,  363, 1139,
  339,  417,  202,  370,  366,  344, 1146,  346,  370,  382,
  349,  350,  363,  352,  353,  363, 1417, 1418,  368,  363,
  339,  372,  372,  357,  372,  344,  941,  346,  372,  975,
  349,  350,  942,  352,  353,  369,  382,  951,  948,  339,
  950,  987,  988,  243,  344,  367,  346,  369,  382,  995,
  414,  357,  352,  353,  378,  379,  363,  424,  414,  365,
  354,  355,  368,  369,  370,  372,  388,  389,  392,  393,
  366,  370, 1018,  372,  370, 1021,  382,  368,  377,  370,
  280,  372,  368,  256,  370,  424,  408,  375, 1033,  999,
    0, 1033,  385, 1039,  416, 1029, 1310,  419,  366, 1033,
  368,  380,  370,  363,  304,  424,  306,  367,  414,  369,
  370,  381,  372, 1059,  366,  367,  316,  377,  370,  368,
 1065,  370,  322, 1065,  396, 1071, 1072, 1061, 1062,  363,
  330, 1065,  386,  367, 1068,  369,  370, 1051,  372,  339,
 1050, 1086,  365,  377, 1086,  366, 1092,  368,  414,  370,
  366,  411, 1086,  363,  370,  355,  368,  367,  370,  369,
  370,  366,  372,  369, 1078,  370,  339,  377,  366, 1079,
 1080,  344,  370,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  414,  366,  385,  386, 1133,  370,  354,
  355,  364, 1142,  366, 1104,  368,  366,  370,  371,  372,
  414,  411,  366,  367,  367,  369,  370,  371,  256,  370,
 1078,  372,  414,  413,  414,  382,  383,  384, 1128, 1165,
 1130,  370,  340,  372, 1138, 1139,  366,  372,  368, 1206,
  410,  411, 1146, 1203,  364,  372,  368,  367,  370,  369,
  370,  366,  369,  368,  444,  366,  363,  368, 1218,  372,
 1160,  424,  394,  395, 1168, 1169,  372, 1171,  388,  389,
  366, 1211,  368, 1177,  366, 1235,  368, 1237,  360,  361,
 1138,  471,  391,  392,  393,  394,  349,  350,  408, 1193,
  370, 1195,  372,  414, 1198, 1199,  416,  372,  364,  419,
  414,  367, 1206,  369,  370,  370,  370,  372,  372,  368,
 1168, 1169,  142,  143,  144,  145,  146,  147,  148,  149,
  414,  511,  388,  389,  370,  414,  372,  368,  369,  360,
  361,  870,  871,  414,  524,  389,  390, 1195,  395,  396,
 1198,  363,  408,  371,  534,  256,  256,  368,  368,  372,
  416,  541,  414,  419,    0,  368, 1296,  257,  368,  364,
  368,  261, 1298,  370,  368,  368,  368,  414,  368,  294,
  294,  372,  272,  370, 1310,  414,  368,  277,  367,  256,
  370,  281,  414,  371,  284,  414,  377,  356, 1288,  372,
  367, 1327,  411,  377,  368,  370,  296,  297,  370,  370,
  414,  301,  302,  370,  372, 1305,  294,  307,  424,  309,
  310,  311,  312,  419,  256,  368,  370,  317, 1318, 1319,
  363,  321,  368,  323, 1360,  369,  377,  414,  414,  619,
  343,  370,  294,  333,  294,  370,  336,  358,  338,  366,
  363,  414,  342,  256,  370, 1345, 1346,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  256,  377,  359,
 1396,  368, 1402, 1403,  368,  280,  256,  363,  371, 1409,
 1410,  364,  414,  414,  664,  665,  414,  414,  372,  370,
  414, 1417, 1418,  372,  370,  372,  368,  372,  366,  368,
  419,  347,  351,  377,  368,  417,  414,  339,  256,    0,
  256, 1401,  344,  693,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  705,  377,  707,  368,  377,
  364,  368,  364,  347,  366,  370,  368,  364,  370,  371,
  372,  414,  370,  414,  724,  370,  339,  366,  371,  364,
  370,  368,  363,  366,  386,  371,  363,  363,  348,  363,
  348,  370,  382,  383,  384,  377,  367,  387,  388,  389,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  364,  368,  372,  364,  364,  364,  356,
  337,  305,  424,  414,  367,  367,  414,  365,  363,  363,
  369,  781,  372,    0,  784,  367,  414,  367,  367,  367,
  367,  377,  414,  367,  414,  414,  377,  368,  368,  256,
  256,  257,  365,  414,  363,  370,  370,  369,  264,  265,
  266,  267,  268,  369,  270,  271,  370,  273,  274,  275,
  276,  277,  278,  279,  280,  370,  372,  368,  368,  285,
  366,  287,  288,  289,  290,  291,  292,  372,  414,  295,
  372,  414,  842,  299,  300,  368,  302,  303,  304,  368,
  372,  491,  368,  414,  368,  364,  377,  377,  314,  366,
  316,  364,  318,  319,  315,  263,  322,  367,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  367,  337,  364,  368,  340,  341,    0,    0,  344,  345,
  368,  372,  366,  363,  363,  372,  414,  364,  366,  363,
  372,  414,  368,  414,  904,  364,  546,  363,  364,  372,
  368,  367,  364,  368,  364,  368,  372,  373,  374,  375,
  376,  364,  368,  372,  380,  372,  382,  372,  414,  368,
  364,  363,  388,  389,  364,  368,  364,  368,  364,  363,
  315,  263,  369,  372,    7,  256,  257,  372,  862,  372,
  261,  951,  372,  372,  372,  372,  372,  413,  414,  415,
  416,  272,  418,  372,  262,  773,  277,  450,  424,  773,
  281, 1104, 1160,  284, 1350, 1313,  243, 1366, 1301, 1296,
 1330, 1177, 1193,  786, 1116,  296,  297, 1410, 1128, 1404,
  301,  302,  780, 1323,  786,  786,  307, 1319,  309,  310,
  311,  312, 1318, 1403, 1050, 1237,  317, 1177, 1051,  948,
  321,  735,  323,  511,  740,  671,  555,  807,  366,  637,
  913,  114,  333,  397,  335,  336,  668,  338,  398, 1029,
  399,  342,  400, 1033,  401, 1014,  402,  926,  724, 1086,
  257, 1138, 1033,  202,  261,  898,  882,  358,  359,  978,
  988, 1051,    0,  364,  365,  272,  969,  827,  847,  421,
  277, 1061, 1062, 1191,  281, 1065,   -1,  284, 1068,  980,
   -1,  509,   -1, 1072,   -1,   -1,   -1,   -1, 1078,  296,
  297,   -1,   -1,   -1,  301,  302, 1086,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,  323,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1138, 1139,
   -1,   -1,  359,  256,  257,   -1, 1146,    0,   -1,   -1,
   -1,  264,  265,  266,  267,  268,   -1,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,  807, 1168, 1169,
   -1, 1171,  285,   -1,  287,  288,  289,  290,  291,  292,
   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,
  303,  304,   -1,   -1,   -1, 1195,   -1,   -1, 1198,   -1,
    0,  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  363,  364,   -1,   -1,  367,   -1,   -1,   -1,   -1,  372,
  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,
   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  413,  414,  415,  416,   -1,  418,   -1,   -1,  256,  257,
   -1,  424,   -1,  261,   -1,   -1,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,  297,
   -1,   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  333,  334,  335,  336,  337,
  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,  261,   -1,
  358,  359,   -1,   -1,   -1,   -1,  364,  365,   -1,  272,
   -1,   -1,   -1,   -1,  277,  373,   -1,   -1,  281,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,  301,  302,
   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,  261,   -1,   -1,  317,   -1,  414,   -1,  321,   -1,
  323,   -1,  272,   -1,   -1,   -1,   -1,  277,   -1,   -1,
  333,  281,   -1,  336,  284,  338,   -1,   -1,   -1,  342,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,  256,
   -1,  301,  302,   -1,  261,  262,  359,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,  323,   -1,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,  294,  338,   -1,
  297,  298,  342,   -1,   -1,  302,   -1,   -1,  305,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  359,
  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,  359,   -1,   -1,   -1,  363,  364,   -1,  366,
  367,  368,  369,  370,  371,  372,   -1,  374,  375,   -1,
  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
   -1,  388,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,   -1,  412,   -1,  414,  256,  416,
   -1,   -1,  419,  261,  262,   -1,   -1,  424,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,  297,
  298,   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
   -1,  359,   -1,   -1,   -1,  363,  364,  365,  366,  367,
  368,  369,  370,  371,  372,   -1,  374,  375,   -1,   -1,
  378,  379,  380,  381,  382,   -1,   -1,  385,  386,   -1,
   -1,   -1,  390,  391,  392,  393,  394,  395,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  409,   -1,   -1,  412,   -1,  414,   -1,  416,  256,
   -1,  419,   -1,   -1,   -1,   -1,  424,  264,  265,  266,
  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
  287,  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,
   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,   -1,
  337,   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,  261,  262,  363,   -1,   -1,   -1,
  367,   -1,   -1,   -1,   -1,  372,  373,  374,  375,  376,
   -1,   -1,   -1,  380,   -1,  382,   -1,  284,   -1,   -1,
   -1,  388,  389,   -1,   -1,   -1,   -1,  294,   -1,   -1,
  297,  298,   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,
  307,   -1,  309,  310,  311,  312,  413,  414,  415,  416,
  317,   -1,   -1,   -1,  321,   -1,   -1,  424,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,  359,   -1,   -1,   -1,  363,  364,  365,  366,
  367,  368,   -1,  370,  371,  372,   -1,  374,  375,   -1,
   -1,  378,  379,  380,  381,   -1,   -1,   -1,  385,  386,
   -1,   -1,   -1,  390,  391,  392,  393,  394,  395,  396,
  397,  256,   -1,   -1,   -1,   -1,  261,  262,   -1,   -1,
   -1,   -1,  409,   -1,   -1,  412,   -1,  414,   -1,  416,
   -1,   -1,  419,   -1,   -1,   -1,   -1,  424,   -1,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,
   -1,   -1,  297,  298,   -1,   -1,   -1,  302,   -1,   -1,
  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
  256,  336,   -1,  338,  339,   -1,  262,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,  359,   -1,   -1,   -1,  363,  364,
  365,  366,  367,  368,   -1,  370,  371,  372,   -1,  374,
  375,   -1,  298,  378,  379,  380,  381,   -1,   -1,   -1,
  385,  386,   -1,   -1,   -1,  390,  391,  392,  393,  394,
  395,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  409,   -1,   -1,  412,   -1,  414,
   -1,  416,   -1,  339,  419,   -1,   -1,   -1,  344,  424,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,  364,  365,
  366,  367,  368,  369,  370,  371,  372,   -1,  374,  375,
   -1,  377,  378,  379,  380,  381,  382,  383,  384,  385,
  386,  261,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  284,   -1,  256,   -1,  414,   -1,
  416,  261,  262,  419,   -1,   -1,   -1,  297,  424,   -1,
   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,  284,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,  294,  325,   -1,  297,  298,   -1,
   -1,   -1,  302,  333,   -1,  305,  336,  307,  338,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,  359,
   -1,   -1,   -1,  333,   -1,  256,  336,   -1,  338,  339,
   -1,  262,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,  359,
   -1,   -1,   -1,  363,  364,   -1,  366,  367,  368,   -1,
  370,  371,  372,   -1,  374,  375,   -1,  298,  378,  379,
  380,  381,   -1,   -1,  414,  385,  386,   -1,   -1,   -1,
  390,  391,  392,  393,  394,  395,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,
   -1,   -1,  412,   -1,  414,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  424,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,  363,  364,  365,  366,  367,  368,  369,  370,
  371,  372,   -1,  374,  375,   -1,  377,  378,  379,  380,
  381,  382,  383,  384,  385,  386,   -1,  388,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,   -1,
  256,  256,   -1,   -1,   -1,  416,  262,   -1,   -1,   -1,
  265,   -1,  267,  424,   -1,  270,   -1,   -1,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,  298,   -1,   -1,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,  363,  364,   -1,
  366,  367,  368,  369,  370,  371,  372,   -1,  374,  375,
   -1,  377,  378,  379,  380,  381,  382,  383,  384,  385,
  386,   -1,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,   -1,  256,  256,   -1,   -1,  414,
  416,  262,   -1,  419,   -1,  265,   -1,  267,  424,   -1,
  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,  298,   -1,   -1,
  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,  339,   -1,
   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  364,   -1,  366,  367,  368,  369,  370,
  371,  372,   -1,  374,  375,   -1,  377,  378,  379,  380,
  381,  382,  383,  384,  385,  386,   -1,  388,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,   -1,
  256,  256,   -1,   -1,  414,  416,  262,   -1,  419,   -1,
  265,   -1,  267,  424,   -1,  270,   -1,   -1,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,  298,   -1,   -1,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,
  366,  367,  368,  369,  370,  371,  372,   -1,  374,  375,
   -1,  377,  378,  379,  380,  381,  382,  383,  384,  385,
  386,   -1,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,   -1,  256,  256,   -1,   -1,  414,
  416,  262,   -1,  419,   -1,  265,   -1,  267,  424,   -1,
  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,  298,   -1,   -1,
  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,  339,   -1,
   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  364,   -1,  366,  367,  368,  369,  370,
  371,  372,   -1,  374,   -1,   -1,  377,  378,  379,  380,
  381,  382,  383,  384,  385,  386,   -1,  388,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,   -1,
  256,   -1,   -1,  261,  414,  416,  262,   -1,  419,   -1,
   -1,   -1,   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,
   -1,   -1,  298,   -1,  302,   -1,   -1,  305,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  359,   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,  374,  375,
   -1,  377,  378,  379,  380,  381,  382,  383,  384,  385,
  386,  261,   -1,   -1,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  256,  409,  284,   -1,  414,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,  424,   -1,
   -1,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
  294,  321,   -1,   -1,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
   -1,  256,   -1,   -1,   -1,  339,   -1,  262,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  357,   -1,   -1,   -1,   -1,   -1,  363,
  364,  365,  366,  367,  368,  369,  370,  371,  372,  294,
  374,  375,   -1,  298,  378,  379,  380,  381,  382,   -1,
   -1,  385,  386,   -1,  414,   -1,  390,  391,  392,  393,
  394,  395,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  409,   -1,   -1,  412,   -1,
  414,   -1,  416,   -1,  339,  419,   -1,   -1,   -1,  344,
  424,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,  256,   -1,   -1,   -1,  363,  364,
  262,  366,  367,  368,   -1,  370,  371,  372,   -1,  374,
  375,   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,
  385,  386,   -1,   -1,   -1,  390,  391,  392,  393,  394,
  395,  396,  397,   -1,   -1,   -1,  298,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  409,   -1,   -1,  412,   -1,  414,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  424,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
  298,   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,
  372,   -1,  374,  375,   -1,   -1,  378,  379,  380,  381,
  382,  383,  384,  385,  386,   -1,   -1,   -1,  390,  391,
  392,  393,  394,  395,  396,  397,   -1,  256,   -1,   -1,
   -1,  339,   -1,  262,   -1,   -1,  344,  409,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,  366,   -1,
  368,   -1,  370,  371,  372,   -1,  374,  375,   -1,  298,
  378,  379,  380,  381,   -1,   -1,   -1,  385,  386,   -1,
   -1,   -1,  390,  391,  392,  393,  394,  395,  396,  397,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,  409,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  424,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,  298,   -1,  364,   -1,  366,   -1,  368,
   -1,  370,  371,  372,   -1,  374,  375,   -1,   -1,  378,
  379,  380,  381,   -1,   -1,   -1,  385,  386,   -1,   -1,
   -1,  390,  391,  392,  393,  394,  395,  396,  397,   -1,
  256,   -1,   -1,   -1,  339,   -1,  262,   -1,   -1,  344,
  409,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,  364,
   -1,  366,   -1,  368,   -1,  370,  371,  372,   -1,  374,
  375,   -1,  298,  378,  379,  380,  381,   -1,   -1,   -1,
  385,  386,   -1,   -1,   -1,  390,  391,  392,  393,  394,
  395,  396,  397,   -1,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  409,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  424,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,  374,  375,
   -1,   -1,  378,  379,  380,  381,   -1,   -1,  256,  385,
  386,   -1,   -1,   -1,  390,  391,  392,  393,  394,  395,
  396,  397,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  409,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  424,   -1,
   -1,   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,
  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,
   -1,   -1,  256,  385,  386,   -1,   -1,   -1,  390,  391,
  392,  393,  394,  395,  396,  397,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  409,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,  366,   -1,
  368,   -1,  370,  371,  372,   -1,   -1,   -1,   -1,   -1,
  378,  379,  380,  381,   -1,   -1,  256,  385,  386,   -1,
   -1,   -1,  390,  391,  392,  393,  394,  395,  396,  397,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  409,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,
  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,   -1,
   -1,   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,
  256,  385,  386,   -1,   -1,   -1,  390,  391,  392,  393,
  394,  395,  396,  397,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  409,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
  424,   -1,   -1,   -1,  364,   -1,  366,   -1,  368,   -1,
  370,  371,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,
  380,  381,   -1,   -1,  256,  385,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,  394,  395,  396,  397,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  409,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,   -1,   -1,
   -1,   -1,  378,  379,  380,  381,   -1,   -1,  256,  385,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,  394,  395,
  396,  397,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  409,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  424,   -1,
   -1,   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,
  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,
   -1,   -1,  256,  385,  386,   -1,   -1,   -1,   -1,   -1,
  392,  393,  394,  395,  396,  397,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  409,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  256,
   -1,   -1,  424,   -1,   -1,  262,  364,   -1,  366,   -1,
  368,   -1,  370,  371,  372,   -1,   -1,   -1,   -1,   -1,
  378,  379,  380,  381,   -1,   -1,   -1,  385,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,  394,  395,  396,  397,
   -1,  298,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  409,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,
  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,   -1,
  256,   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,
   -1,  385,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
  394,  395,  396,  397,   -1,   -1,   -1,  364,   -1,   -1,
  367,   -1,  369,  370,   -1,  409,   -1,  374,  375,   -1,
   -1,  378,  379,  380,  381,  382,  383,  384,  385,  386,
  424,  388,  389,  390,  391,  392,  393,  394,  395,  396,
  397,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
   -1,  408,  409,   -1,   -1,   -1,   -1,   -1,   -1,  416,
   -1,   -1,  419,  339,   -1,   -1,   -1,  424,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  380,  381,   -1,   -1,  256,  385,
  386,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  394,  395,
  396,  397,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  409,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  424,   -1,
   -1,   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,
  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  380,  381,
   -1,   -1,  256,  385,  386,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  394,  395,  396,  397,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  409,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,  366,   -1,
  368,   -1,  370,  371,  372,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  380,  381,   -1,   -1,  256,  385,  386,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  394,  395,  396,  397,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  409,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,
  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  380,  381,   -1,   -1,
  256,  385,  386,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  409,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
  424,   -1,   -1,   -1,  364,   -1,  366,   -1,  368,   -1,
  370,  371,  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  380,  381,   -1,   -1,  256,  385,  386,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  409,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  381,   -1,   -1,  256,  385,
  386,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  396,  397,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  409,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  424,   -1,
   -1,   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,
  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  381,
   -1,   -1,  256,  385,  386,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  409,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,  366,   -1,
  368,   -1,  370,  371,  372,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  381,   -1,   -1,  256,   -1,  386,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  409,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,
  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  381,   -1,   -1,
  256,   -1,  386,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  409,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
  424,   -1,   -1,   -1,  364,   -1,  366,   -1,  368,   -1,
  370,  371,  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,  386,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  409,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
  386,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  396,  397,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  409,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  424,   -1,
   -1,   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,
  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  386,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  409,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,  298,  424,   -1,   -1,   -1,  364,   -1,  366,   -1,
  368,   -1,  370,  371,  372,   -1,   -1,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  386,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  409,   -1,   -1,  298,   -1,   -1,   -1,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,  424,   -1,  365,   -1,
  367,   -1,  369,   -1,   -1,  372,   -1,  374,  375,  262,
  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
   -1,  388,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,   -1,  298,   -1,  414,   -1,  416,
   -1,  365,  419,  367,  368,  369,  370,  424,  372,   -1,
  374,  375,   -1,  377,  378,  379,  380,  381,   -1,  383,
  384,  385,  386,   -1,  388,  389,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,   -1,   -1,   -1,   -1,
  414,   -1,  416,   -1,   -1,  419,   -1,   -1,   -1,   -1,
  424,   -1,   -1,  366,  367,  368,  369,  370,   -1,   -1,
   -1,  374,  375,   -1,  377,  378,  379,  380,  381,  382,
  383,  384,  385,  386,   -1,  388,  389,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,   -1,   -1,  256,
   -1,   -1,   -1,  416,   -1,   -1,  419,  264,  265,  266,
  267,  424,   -1,  270,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
  287,  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,
   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,   -1,
  337,   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,
  367,   -1,   -1,   -1,   -1,  372,  373,  374,  375,  376,
   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,
   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  413,  414,  415,  416,
  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,  287,  288,  289,  290,  291,  292,   -1,
   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,
   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,  372,  373,
  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  413,
  414,  415,  416,  264,  265,  266,  267,   -1,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,
   -1,  372,  373,  374,  375,  376,   -1,   -1,   -1,  380,
   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  413,  414,  415,  416,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,
   -1,   -1,   -1,   -1,  372,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  413,  414,  415,  416,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,
  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,   -1,   -1,   -1,   -1,  372,  373,  374,
  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,
   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  413,  414,
  415,  416,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,
  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,
   -1,   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  363,  364,   -1,   -1,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  413,  414,  415,  416,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  414,
  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,
   -1,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,
  319,  320,  304,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,
  322,   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,   -1,
   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,
   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,
  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,  413,  414,  415,  416,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  414,  279,   -1,   -1,  265,   -1,  267,  285,
   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,
  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,  316,  334,  318,
   -1,  337,   -1,  322,   -1,  341,   -1,   -1,  344,  345,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,
  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  413,  414,  415,
  416,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  414,  279,   -1,   -1,  265,
   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,
   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,
   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,
  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,
   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  413,  414,  415,  416,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  414,  279,
   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,
   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,
   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,
   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  413,  414,  415,  416,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  414,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,
  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,
   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,
   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,  413,  414,  415,  416,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,  414,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,  364,
   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,
  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,
   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,  413,  414,
  415,  416,  285,   -1,  261,  288,  263,   -1,  423,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
  297,   -1,  325,   -1,  327,  302,  329,  330,  331,  332,
  307,  334,  309,  310,  311,  312,   -1,   -1,  341,   -1,
  317,  344,  345,   -1,  321,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
  363,  338,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,
  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,
   -1,   -1,  359,   -1,   -1,  388,  389,  364,  365,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  413,  414,  415,  416,   -1,  264,  265,   -1,  267,   -1,
  423,  270,  271,   -1,   -1,   -1,  275,  276,  277,  298,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,
  369,  370,   -1,   -1,   -1,  374,  375,   -1,   -1,  378,
  379,  380,  381,  382,  383,  384,  385,  386,  367,  388,
  389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,   -1,   -1,   -1,   -1,   -1,   -1,  416,   -1,   -1,
  419,   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,  263,
   -1,  265,   -1,  267,  413,  414,  270,   -1,  272,  273,
   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
  294,  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,
  304,   -1,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,  325,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,   -1,  373,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,
  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,
  414,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
  261,  336,  337,  338,  265,   -1,  267,  342,   -1,  270,
   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,  284,  359,   -1,  287,  288,   -1,  364,
   -1,   -1,  293,   -1,  295,  296,  297,   -1,  373,  300,
   -1,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,  261,  336,  337,  338,  265,  414,
  267,  342,   -1,  270,   -1,  272,  273,   -1,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,  284,  359,   -1,
  287,  288,   -1,  364,   -1,   -1,  293,   -1,  295,  296,
  297,   -1,  373,  300,   -1,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,  333,  334,  261,  336,
  337,  338,  265,  414,  267,  342,   -1,  270,   -1,  272,
  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,
  283,  284,  359,   -1,  287,  288,   -1,  364,   -1,   -1,
  293,   -1,  295,  296,  297,   -1,  373,  300,   -1,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,  261,  336,  337,  338,  265,  414,  267,  342,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,  282,  283,  284,  359,   -1,  287,  288,
   -1,  364,   -1,   -1,  293,   -1,  295,  296,  297,   -1,
  373,  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,  261,  336,  337,  338,
  265,  414,  267,  342,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,
  359,   -1,  287,  288,   -1,  364,   -1,   -1,  293,   -1,
  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,
  261,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,  284,   -1,  330,  331,   -1,  333,  334,
  261,  336,  337,  338,   -1,  414,  297,  342,   -1,   -1,
   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,
  311,  312,   -1,  284,  359,   -1,  317,   -1,   -1,  364,
  321,   -1,   -1,   -1,  325,   -1,  297,   -1,   -1,   -1,
   -1,  302,  333,   -1,   -1,  336,  307,  338,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,   -1,   -1,   -1,  357,   -1,  359,   -1,
   -1,   -1,  333,   -1,  365,  336,  367,  338,  369,  414,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,  382,   -1,  275,  276,  277,   -1,  279,  359,  360,
  361,   -1,   -1,  285,   -1,  261,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,  414,  306,   -1,   -1,   -1,  284,   -1,
   -1,  313,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,  297,   -1,  325,   -1,  327,  302,  329,  330,  331,
  332,  307,  334,  309,  310,  311,  312,   -1,   -1,  341,
   -1,  317,  344,  345,   -1,  321,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,   -1,   -1,  367,  368,   -1,  370,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,  359,  360,  361,  388,  389,  364,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  413,  414,  415,  416,  285,   -1,  261,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,  306,   -1,   -1,   -1,
  284,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,  297,   -1,  325,   -1,  327,  302,  329,
  330,  331,  332,  307,  334,  309,  310,  311,  312,   -1,
   -1,  341,   -1,  317,  344,  345,   -1,  321,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,   -1,   -1,  367,   -1,   -1,
  370,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,  359,  360,  361,  388,  389,
  364,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  413,  414,  415,  416,  285,   -1,  261,
  288,  263,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,  306,   -1,
   -1,   -1,  284,   -1,   -1,  313,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,  297,   -1,  325,   -1,  327,
  302,  329,  330,  331,  332,  307,  334,  309,  310,  311,
  312,   -1,   -1,  341,   -1,  317,  344,  345,   -1,  321,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,   -1,   -1,  367,
   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,  359,   -1,   -1,
  388,  389,  364,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  413,  414,  415,  416,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,
  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  413,  414,  415,
  416,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  364,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  413,
  414,  415,  416,  285,   -1,  261,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,  284,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,  297,   -1,  325,   -1,  327,  302,  329,  330,  331,
  332,  307,  334,  309,  310,  311,  312,   -1,   -1,  341,
   -1,  317,  344,  345,   -1,  321,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,  363,  338,   -1,   -1,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,  359,   -1,   -1,  388,  389,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  413,  414,  415,  416,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  413,  414,  415,  416,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  413,  414,  415,  416,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,
  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  413,  414,  415,
  416,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  413,
  414,  415,  416,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  413,  414,  415,  416,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,  285,
  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  413,  414,  415,  416,  285,   -1,   -1,
  288,  327,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,  373,  374,  375,
  376,   -1,  378,  379,  380,  381,  382,  383,  384,  385,
   -1,   -1,  388,  389,  390,  391,  392,  393,  394,  395,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  263,   -1,  265,   -1,  267,  413,  414,  270,  416,  272,
  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,
  283,   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,  296,   -1,   -1,   -1,  300,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,  316,   -1,  318,   -1,   -1,   -1,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,  264,
  265,  334,  267,   -1,  337,  270,  271,   -1,   -1,  342,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,  288,   -1,   -1,   -1,  360,  361,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
  373,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,  265,  334,
  267,   -1,  337,  270,   -1,  272,  273,   -1,  275,   -1,
  277,  414,  279,   -1,  281,  282,  283,   -1,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
   -1,   -1,  367,  300,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,  342,   -1,   -1,  413,  414,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,
   -1,   -1,  287,  288,   -1,   -1,  373,   -1,  293,   -1,
  295,  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,  414,  265,  334,
  267,   -1,  337,  270,   -1,   -1,  273,  342,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,
  265,   -1,  267,  300,   -1,  270,   -1,  304,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,  316,
   -1,  318,  287,  288,   -1,  322,   -1,   -1,  293,   -1,
  295,   -1,   -1,  330,  331,  300,   -1,  334,   -1,  304,
  337,   -1,   -1,   -1,   -1,  342,   -1,   -1,   -1,  414,
  265,  316,  267,  318,   -1,  270,   -1,  322,   -1,   -1,
  275,   -1,   -1,   -1,  279,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,  288,   -1,   -1,  373,  342,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,
  265,  306,  267,  308,   -1,  270,   -1,   -1,  313,   -1,
  275,  316,   -1,  318,  279,   -1,   -1,  322,   -1,   -1,
  325,   -1,   -1,  288,   -1,  330,  331,  414,   -1,  334,
  295,   -1,  337,   -1,   -1,  300,   -1,   -1,   -1,  304,
   -1,  306,   -1,  308,   -1,   -1,   -1,   -1,  313,   -1,
   -1,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,  414,
  325,   -1,   -1,  368,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,  265,   -1,  267,   -1,   -1,  270,   -1,
   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,
   -1,  366,   -1,  295,   -1,  265,   -1,  267,  300,  414,
  270,   -1,  304,   -1,  306,  275,  308,   -1,   -1,  279,
   -1,  313,   -1,   -1,  316,   -1,  318,   -1,  288,   -1,
  322,   -1,   -1,  325,   -1,  295,   -1,   -1,  330,  331,
  300,   -1,  334,   -1,  304,  337,  306,   -1,   -1,  414,
   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  265,
   -1,  267,  322,   -1,  270,  325,  272,   -1,   -1,  275,
  330,  331,   -1,  279,  334,   -1,  265,  337,  267,   -1,
   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,
  279,   -1,   -1,   -1,  300,   -1,  302,   -1,  304,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  316,  300,  318,   -1,   -1,  304,  322,  323,   -1,   -1,
   -1,   -1,  414,   -1,  330,  331,   -1,  316,  334,  318,
  265,  337,  267,  322,   -1,  270,   -1,   -1,   -1,   -1,
  275,  330,  331,   -1,  279,  334,   -1,  265,  337,  267,
   -1,   -1,  270,  288,  414,   -1,   -1,  275,   -1,   -1,
  295,  279,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  316,  300,  318,   -1,   -1,  304,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  316,  334,
  318,  265,  337,  267,  322,   -1,  270,   -1,  414,   -1,
   -1,  275,  330,  331,   -1,  279,  334,   -1,  265,  337,
  267,   -1,   -1,  270,  288,  414,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,   -1,   -1,
  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  316,  300,  318,   -1,   -1,  304,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  316,
  334,  318,  265,  337,  267,  322,   -1,  270,   -1,  414,
   -1,   -1,  275,  330,  331,   -1,  279,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,  288,  414,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,
   -1,  304,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
  261,   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,
   -1,  272,   -1,   -1,   -1,   -1,  277,  330,  331,   -1,
  281,  334,   -1,  284,  337,   -1,   -1,   -1,   -1,   -1,
  414,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,
  301,  302,   -1,   -1,   -1,   -1,  307,  414,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,  323,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,  261,  333,   -1,  335,  336,   -1,  338,   -1,   -1,
   -1,  342,  272,   -1,   -1,   -1,   -1,  277,   -1,   -1,
   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,  359,   -1,
   -1,  414,   -1,  364,  365,   -1,  296,  297,   -1,   -1,
   -1,  301,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,  323,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,  261,  333,   -1,  335,  336,   -1,  338,   -1,
   -1,   -1,  342,  272,   -1,   -1,   -1,   -1,  277,   -1,
   -1,   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,  359,
   -1,   -1,   -1,   -1,  364,  365,   -1,  296,  297,   -1,
   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,  323,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,  261,  333,   -1,   -1,  336,   -1,  338,
   -1,   -1,   -1,  342,  272,   -1,   -1,   -1,   -1,  277,
   -1,   -1,   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,
  359,   -1,   -1,   -1,   -1,  364,  365,   -1,  296,  297,
   -1,   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,  261,  321,   -1,  323,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,   -1,   -1,   -1,  342,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,
   -1,  359,   -1,  302,   -1,   -1,  364,  365,  307,   -1,
  309,  310,  311,  312,   -1,   -1,  315,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,   -1,  261,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,  272,  338,
   -1,   -1,   -1,  277,   -1,   -1,   -1,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,   -1,  296,  297,   -1,  364,  365,  301,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,   -1,   -1,  272,  342,   -1,
   -1,   -1,  277,   -1,   -1,   -1,  281,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,  359,   -1,   -1,   -1,   -1,
  364,  296,  297,   -1,   -1,   -1,  301,  302,   -1,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,  261,  321,   -1,  323,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,   -1,   -1,   -1,  342,  284,   -1,
   -1,   -1,   -1,   -1,   -1,  261,   -1,  263,   -1,   -1,
   -1,  297,   -1,   -1,  359,   -1,  302,   -1,   -1,  364,
   -1,  307,   -1,  309,  310,  311,  312,   -1,  284,  315,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,
   -1,  297,   -1,   -1,   -1,  261,  302,  333,   -1,   -1,
  336,  307,  338,  309,  310,  311,  312,   -1,   -1,  315,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,  284,   -1,
   -1,   -1,   -1,  359,   -1,   -1,   -1,  333,  364,   -1,
  336,  297,  338,   -1,   -1,  301,  302,   -1,   -1,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,  359,   -1,  321,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,
  };

#line 6048 "cs-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		Report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (Report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	Report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	Report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	Report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	Report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	Report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	Report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void push_current_class (TypeContainer tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();
		undo.AddTypeContainer (current_container, tc);
	}

	if (partial_token != null)
		current_container = current_container.AddPartial (tc);
	else
		current_container = current_container.AddTypeContainer (tc);

	++lexer.parsing_declaration;
	current_class = tc;
	ubag.PushTypeDeclaration (tc);
}

DeclSpace pop_current_class ()
{
	DeclSpace retval = current_class;

	current_class = current_class.Parent;
	current_container = current_class.PartialContainer;
	ubag.PopTypeDeclaration ();
	
	return retval;
}

// <summary>
//   Given the @class_name name, it creates a fully qualified name
//   based on the containing declaration space
// </summary>
MemberName
MakeName (MemberName class_name)
{
	Namespace ns = current_namespace.NS;

	if (current_container == module) {
		if (ns.Name.Length != 0)
			return new MemberName (ns.MemberName, class_name);
		else
			return class_name;
	} else {
		return new MemberName (current_container.MemberName, class_name);
	}
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

List<Tuple<Modifiers, Location>> GetModifierLocations ()
{
	var result = mod_locations;
	mod_locations = null;
	return result;
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	Report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	Report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static CSharpParser ()
{
	oob_stack = new Stack<object> ();
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file)
{
	this.file = file;
	current_namespace = file.NamespaceContainer;
	
	this.module = current_namespace.Module;
	this.compiler = module.Compiler;
	this.settings = compiler.Settings;
	lang_version = settings.Version;
	doc_support = settings.Documentation != null;
	current_class = current_namespace.SlaveDeclSpace;
	current_container = current_class.PartialContainer; // == RootContest.ToplevelTypes
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file, compiler);
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			Report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0)
				throw;
		
			Report.Error (589, lexer.Location, "Internal compiler error during parsing");
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		Report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		Report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	compiler.Report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

Report Report {
	get { return compiler.Report; }
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
	set {
		lbag = value;
	}
}

public UsingsBag UsingsBag {
	get {
		return ubag;
	}
	set {
		ubag = value;
	}
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool lambda, ParametersCompiled parameters, Location loc)
{
	if (lang_version == LanguageVersion.ISO_1){
		FeatureIsNotAvailable (loc, "anonymous methods");
	}

	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);

	current_local_parameters = parameters;

	current_anonymous_method = lambda 
		? new LambdaExpression (loc) 
		: new AnonymousMethodExpression (loc);

	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

public NamespaceEntry CurrentNamespace {
       get { 
       	   return current_namespace;
       }
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				Report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		Report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		Report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int ASYNC = 359;
  public const int GET = 360;
  public const int SET = 361;
  public const int LAST_KEYWORD = 362;
  public const int OPEN_BRACE = 363;
  public const int CLOSE_BRACE = 364;
  public const int OPEN_BRACKET = 365;
  public const int CLOSE_BRACKET = 366;
  public const int OPEN_PARENS = 367;
  public const int CLOSE_PARENS = 368;
  public const int DOT = 369;
  public const int COMMA = 370;
  public const int COLON = 371;
  public const int SEMICOLON = 372;
  public const int TILDE = 373;
  public const int PLUS = 374;
  public const int MINUS = 375;
  public const int BANG = 376;
  public const int ASSIGN = 377;
  public const int OP_LT = 378;
  public const int OP_GT = 379;
  public const int BITWISE_AND = 380;
  public const int BITWISE_OR = 381;
  public const int STAR = 382;
  public const int PERCENT = 383;
  public const int DIV = 384;
  public const int CARRET = 385;
  public const int INTERR = 386;
  public const int DOUBLE_COLON = 387;
  public const int OP_INC = 388;
  public const int OP_DEC = 389;
  public const int OP_SHIFT_LEFT = 390;
  public const int OP_SHIFT_RIGHT = 391;
  public const int OP_LE = 392;
  public const int OP_GE = 393;
  public const int OP_EQ = 394;
  public const int OP_NE = 395;
  public const int OP_AND = 396;
  public const int OP_OR = 397;
  public const int OP_MULT_ASSIGN = 398;
  public const int OP_DIV_ASSIGN = 399;
  public const int OP_MOD_ASSIGN = 400;
  public const int OP_ADD_ASSIGN = 401;
  public const int OP_SUB_ASSIGN = 402;
  public const int OP_SHIFT_LEFT_ASSIGN = 403;
  public const int OP_SHIFT_RIGHT_ASSIGN = 404;
  public const int OP_AND_ASSIGN = 405;
  public const int OP_XOR_ASSIGN = 406;
  public const int OP_OR_ASSIGN = 407;
  public const int OP_PTR = 408;
  public const int OP_COALESCING = 409;
  public const int OP_GENERICS_LT = 410;
  public const int OP_GENERICS_LT_DECL = 411;
  public const int OP_GENERICS_GT = 412;
  public const int LITERAL = 413;
  public const int IDENTIFIER = 414;
  public const int OPEN_PARENS_LAMBDA = 415;
  public const int OPEN_PARENS_CAST = 416;
  public const int GENERIC_DIMENSION = 417;
  public const int DEFAULT_COLON = 418;
  public const int OPEN_BRACKET_EXPR = 419;
  public const int EVAL_STATEMENT_PARSER = 420;
  public const int EVAL_COMPILATION_UNIT_PARSER = 421;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 422;
  public const int GENERATE_COMPLETION = 423;
  public const int COMPLETE_COMPLETION = 424;
  public const int UMINUS = 425;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
