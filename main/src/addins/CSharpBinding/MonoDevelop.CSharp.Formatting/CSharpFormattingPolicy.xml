<CodeStyle version="1.0" mimeType="text/x-csharp">

	<Type name = "BraceStyle">
<!--		<Value _displayName="Do not change">DoNotChange</Value> -->
		<Value _displayName="End of line">EndOfLine</Value>
		<Value _displayName="End of line without space">EndOfLineWithoutSpace</Value>
		<Value _displayName="Next line">NextLine</Value>
		<Value _displayName="Next line shifted">NextLineShifted</Value>
		<Value _displayName="Next line shifted2">NextLineShifted2</Value>
		<Value _displayName="Banner Style">BannerStyle</Value>
	</Type>
	
	<Type name = "Wrapping">
		<Value _displayName="Do not change">DoNotChange</Value>
		<Value _displayName="Do not wrap">DoNotWrap</Value>
		<Value _displayName="Wrap always">WrapAlways</Value>
		<Value _displayName="Wrap if too long">WrapIfTooLong</Value>
	</Type>
	
	<Type name = "NewLinePlacement">
		<Value _displayName="Allow both">DoNotCare</Value>
		<Value _displayName="Always new line">NewLine</Value>
		<Value _displayName="Always same line">SameLine</Value>
	</Type>
	
	<Example name = "event"><![CDATA[
	class ClassDeclaration { 
		EventHandler<EventArgs> onAction;
		public event EventHandler<EventArgs> Action {
			add { onAction = (EventHandler<EventArgs>)Delegate.Combine(onAction, value); }
			remove { onAction = (EventHandler<EventArgs>)Delegate.Remove(onAction, value);}
		}
		EventHandler<EventArgs> onAnotherAction;
		public event EventHandler<EventArgs> AnotherAction {
			add { if (value != null) 
					onAnotherAction = (EventHandler<EventArgs>)Delegate.Combine(onAnotherAction, value); }
			remove { if (value != null) 
					onAnotherAction = (EventHandler<EventArgs>)Delegate.Remove(onAnotherAction, value);}
		}
	}
]]></Example>
	
	<Example name = "property"><![CDATA[
	class ClassDeclaration { 
		int myProperty;
		int MyProperty { 
			get { return myProperty;} 
			set { myProperty = value;} 
		}
		
		int myOtherProperty;
		int MyOtherProperty { 
			get { 
				Console.WriteLine ("get myOtherProperty");
				return myOtherProperty;
			} 
			set { 
				if (myOtherProperty != value)
					myOtherProperty = value;
			} 
		}
	}
]]></Example>
	
	<Example name = "methodSpaceExample"><![CDATA[
	class ClassDeclaration { 
		public static void Main (string[] args)
		{
			Console.WriteLine ("Hello World!");
		}
	}
]]></Example>
	
	<Example name = "constructorCallExample"><![CDATA[
	class ClassDeclaration {
		public ClassDeclaration ()
		{
		}
		
		public static ClassDeclaration Foo ()
		{
			return new ClassDeclaration();
		}
	}
]]></Example>

<Example name = "delegateExample"><![CDATA[
	delegate void FooBar (int x, int y);
]]></Example>

	<Example name = "spaceExample"><![CDATA[
	class ClassDeclaration { 
		public void TestMethod ()
		{
			try {
				TestMethod ("");
			} catch (Exception e) {
				// Do something
			} finally {
				// Do something
			}
		}
		
		public void TestMethod (string test)
		{
			lock (this) {
				switch (test) {
					case "A":
						Console.WriteLine ("was A");
						break;
					case "B":
						Console.WriteLine ("was B");
						break;
				}
			}
		}
		
		public void Calculate (int a, int b)
		{
			if (a < b) {
				for (int i = a; i < b; i++) {
					Console.WriteLine (i);
				}
			} else {
				using (object o = new object ()) {
					while (b < a) {
						Console.WriteLine (b++);
					}
				}
			}
		}
	}
		
]]></Example>

	<Example name = "operatorExample"><![CDATA[
	class ClassDeclaration { 
		public void TestMethod ()
		{
			int a = 5 << 5;
			int b = (a + 5 - 3) * 6 / 2;
			a += b;
			a = a & ~255;
			if (a == b || b < a >> 1) {
				b -= a;
			}
		}
	}
]]></Example>

	<Example name = "condOpExample"><![CDATA[
	class ClassDeclaration { 
		public string GetSign (int i)
		{
			return i < 0 ? "-" : "+";
		}
	}
]]></Example>

	<Example name = "switchExample"><![CDATA[
	class ClassDeclaration { 
		public void Test (int i)
		{
			switch (i) {
				case 0:
					Console.WriteLine ("was zero");
					break;
				case 1:
					Console.WriteLine ("was one");
					break;
				default:
					Console.WriteLine ("was " + i);
					break;
			}
		}
	}
]]></Example>

	<Example name="simpleIf"><![CDATA[
class ClassDeclaration { 
		public void Test (int i)
		{
			if (i == 5) {
				Console.WriteLine ("== 5");
			} else if (i > 0) {
				Console.WriteLine (">0");
			} else if (i < 0) {
				Console.WriteLine ("<0");
			} else {
				Console.WriteLine ("== 0");
			}
		}
	}
]]></Example>

	<Example name="simpleWhile"><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			while (true) {
				Console.WriteLine ("Hello World!");
			}
		}
	}
]]></Example>

	<Example name="simpleDoWhile"><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			int i = 0;
			do {
				Console.WriteLine ("Hello World!");
			} while (i++ < 10);
		}
	}
]]></Example>

	<Example name="simpleFor"><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			for (int i = 0; i < 10; i++) {
				Console.WriteLine ("Hello World!");
			}
		}
	}
]]></Example>

	<Example name="simpleForeach"><![CDATA[
class ClassDeclaration : ArrayList { 
		public void Test ()
		{
			foreach (object o in this) {
				Console.WriteLine ("Hello World!");
			}
		}
	}
]]></Example>

	<Example name="simpleCatch"><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			try {
				Console.WriteLine ("Hello World!");
			} catch (Exception) {
				Console.WriteLine ("Got exception!!");
			} finally {
				Console.WriteLine ("finally done.");
			}
		}
	}
]]></Example>

	<Example name="simpleSwitch"><![CDATA[
class ClassDeclaration { 
		public void Test (string a)
		{
			switch (a) {
			case "silent":
			break;
			default:
				Console.WriteLine ("Hello World!");
				break;
			}
		}
	}
]]></Example>

	<Example name="simpleLock"><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			lock (this) {
				Console.WriteLine ("Hello World!");
			}
		}
	}
]]></Example>

	<Example name="simpleUsingStatement"><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			using (object o = new object ()) {
				Console.WriteLine ("Hello World!");
			}
		}
	}
]]></Example>

	<Example name="simpleFixedStatement"><![CDATA[
class ClassDeclaration { 
		public void Test (Point pt)
		{
			fixed (int* p = &pt.x) {
				*p = 10; 
			}
		}
	}
]]></Example>

	<Example name="simpleTypeCast"><![CDATA[
class ClassDeclaration { 
		public void Test (object o)
		{
			int i = (int)o;
		}
	}
]]></Example>

	m<Example name="simpleArrayInitializer"><![CDATA[
class ClassDeclaration { 
		public void Test (object o)
		{
			int[] i = new int[] { 1, 3, 3, 7 };
		}
	}
]]></Example>


	<Category _displayName="Indentation">
		<Category _displayName="Declarations">
			<Option name="IndentNamespaceBody" _displayName="within namespaces"><Example><![CDATA[namespace Test { class AClass {} }]]></Example></Option>
			
			<OptionCategory _displayName="within types">
				<Option name="IndentClassBody" _displayName="within classes"><Example><![CDATA[class AClass { int aField; void AMethod () {}}]]></Example></Option>
				<Option name="IndentInterfaceBody" _displayName="within interfaces"><Example><![CDATA[interface IAInterfaces { int AProperty {get;set;} void AMethod ();}]]></Example></Option>
				<Option name="IndentStructBody" _displayName="within structs"><Example><![CDATA[struct AStruct { int aField; void AMethod () {}}]]></Example></Option>
				<Option name="IndentEnumBody" _displayName="within enums"><Example><![CDATA[enum AEnum { A, B, C }]]></Example></Option>
			</OptionCategory>
			
			<Option name="IndentMethodBody" _displayName="within methods" example="methodSpaceExample"/>
			<Option name="IndentPropertyBody" _displayName="within properties" example="property"/>
			<Option name="IndentEventBody" _displayName="within events" example="event"/>
		</Category>
		
		<Category _displayName="Statements">
			<Option name="IndentBlocks" _displayName="within blocks" example="spaceExample"/>
			<Option name="IndentSwitchBody" _displayName="Indent 'switch' body" example="switchExample"/>
			<Option name="IndentCaseBody" _displayName="Indent 'case' body" example="switchExample"/>
			<Option name="IndentBreakStatements" _displayName="Indent 'break' statements" example="switchExample"/>
			
			<Option name="AlignEmbeddedIfStatements" _displayName="Align embedded 'if' statements"><Example><![CDATA[class AClass { void AMethod () { if (a) if (b) { int c; } } } ]]></Example></Option>
			<Option name="AlignEmbeddedUsingStatements" _displayName="Align embedded 'using' statements"><Example><![CDATA[class AClass { void AMethod () {using (IDisposable a = null) using (IDisposable b = null) { int c; } } } ]]></Example></Option>
		</Category>
	</Category>
	
	<Category _displayName="Braces">
		<Category _displayName="Declarations">
			<Option name="NamespaceBraceStyle" _displayName="Namespace declaration"><Example>namespace TestNameSpace {}</Example></Option>
			
			<OptionCategory _displayName="Type declaration">
				<Option name="ClassBraceStyle" _displayName="Class declaration"><Example>class ClassDeclaration {}</Example></Option>
				<Option name="InterfaceBraceStyle" _displayName="Interface declaration"><Example><![CDATA[interface InterfaceDeclaraction {}]]></Example></Option>
				<Option name="StructBraceStyle" _displayName="Struct declaration"><Example><![CDATA[struct StructDeclaration {}]]></Example></Option>
				<Option name="EnumBraceStyle" _displayName="Enum declaration"><Example><![CDATA[enum EnumDeclaration { A, B, C}]]></Example></Option>
			</OptionCategory>
			
			<OptionCategory _displayName="Method declaration">
				<Option name="MethodBraceStyle" _displayName="Method declaration"><Example><![CDATA[class ClassDeclaration { void MyMethod () {} }]]></Example></Option>
				<Option name="AnonymousMethodBraceStyle" _displayName="Anonymous methods"><Example><![CDATA[class ClassDeclaration { void MyMethod () { MyEvent += delegate (object sender, EventArgs e) { if (true) Console.WriteLine ("Hello World"); }; } }]]></Example></Option>
				<Option name="ConstructorBraceStyle" _displayName="Constructor declaration"><Example><![CDATA[class ClassDeclaration { public ClassDeclaration () {} }]]></Example></Option>
				<Option name="DestructorBraceStyle" _displayName="Destructor declaration"><Example><![CDATA[class ClassDeclaration { ~ClassDeclaration () {} }]]></Example></Option>
			</OptionCategory>
			
			<Category _displayName="Property Declaration">
				<Option name="PropertyBraceStyle" _displayName="Property declaration" example="property"/>
				
				<OptionCategory _displayName="Accessor declaration">
					<Option name="PropertyGetBraceStyle" _displayName="Get declaration" example="property"/>
					<Option name="PropertySetBraceStyle" _displayName="Set declaration" example="property"/>
				</OptionCategory>
				
				<OptionCategory _displayName="Allow one line accessors">
					<Option name="AllowPropertyGetBlockInline" _displayName="Allow one line get" example="property"/>
					<Option name="AllowPropertySetBlockInline" _displayName="Allow one line set" example="property"/>
				</OptionCategory>
			</Category>
			
			<Category _displayName="Event Declaration">
				<Option name="EventBraceStyle" _displayName="Event declaration" example="event"/>
				<OptionCategory _displayName="Accessor declaration">
					<Option name="EventAddBraceStyle" _displayName="Add declaration" example="event"/>
					<Option name="EventRemoveBraceStyle" _displayName="Remove declaration" example="event"/>
				</OptionCategory>
				<OptionCategory _displayName="Allow one line accessors">
					<Option name="AllowEventAddBlockInline" _displayName="Allow one line add" example="event"/>
					<Option name="AllowEventRemoveBlockInline" _displayName="Allow one line remove" example="event"/>
				</OptionCategory>
			</Category>
		</Category>
		
		<Category _displayName="Blocks">
			<Option name="StatementBraceStyle" _displayName="Statements" example="spaceExample"/>
		</Category>
	</Category>
	
	<Category _displayName="New Lines">
<!--		<OptionCategory _displayName="Allow one line embedded statements">
			<Option name="AllowIfBlockInline" _displayName="'if'"><Example><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			if (true) { Console.WriteLine ("Hello World!"); }
			if (true) Console.WriteLine ("Hello World!");
			if (true) { Foo (); Bar (); }
		}
	}
]]></Example></Option>
		</OptionCategory>-->
	
		<Category _displayName="Place on new line">
			<Option name="PlaceElseOnNewLine" _displayName="'else'" example="simpleIf"/>
			<Option name="PlaceElseIfOnNewLine" _displayName="'else if'" example="simpleIf"/>
			<Option name="PlaceCatchOnNewLine" _displayName="'catch'" example="simpleCatch"/>
			<Option name="PlaceFinallyOnNewLine" _displayName="'finally'" example="simpleCatch"/>
			<Option name="PlaceWhileOnNewLine" _displayName="'while'" example="simpleDoWhile"/>
		</Category>
	</Category>
	
	<Category _displayName="Spaces">
		<Category _displayName="Before Parentheses">
<!--		<Option name="BeforeMethodCallParentheses" _displayName="Method call" example ="methodSpaceExample"/>
			
			<Option name="BeforeDelegateDeclarationParentheses" _displayName="Delegate declaration" example ="delegateExample"/>
			<Option name="BeforeConstructorDeclarationParentheses" _displayName="Constructor declaration" example ="constructorCallExample"/>
		-->	
			<Option name="NewParentheses" _displayName="Constructor call" example ="constructorCallExample"/>
		<!--	
			<OptionCategory _displayName="Statements">
				<Option name="IfParentheses" _displayName="'if' statement" example="simpleIf"/>
				<Option name="WhileParentheses" _displayName="'while' statement" example="simpleWhile"/>
				<Option name="ForParentheses" _displayName="'for' statement" example="simpleFor"/>
				<Option name="ForeachParentheses" _displayName="'foreach' statement" example="simpleForeach"/>
				<Option name="CatchParentheses" _displayName="'catch' statement" example="simpleCatch"/>
				<Option name="SwitchParentheses" _displayName="'switch' statement" example="simpleSwitch"/>
				<Option name="LockParentheses" _displayName="'lock' statement" example="simpleLock"/>
				<Option name="UsingParentheses" _displayName="'using' statement" example="simpleUsingStatement"/>
			</OptionCategory>-->
		</Category>
		<!--
		<OptionCategory _displayName="Around Operators">
			<Option name="AroundAssignmentParentheses" _displayName="Assignment (=, -=, ...)" example="operatorExample"/>
			<Option name="AroundLogicalOperatorParentheses" _displayName="Logical (&amp;&amp;,||) operators" example="operatorExample"/>
			<Option name="AroundEqualityOperatorParentheses" _displayName="Equality (==, !=) operators" example="operatorExample"/>
			<Option name="AroundRelationalOperatorParentheses" _displayName="Relational (&lt;,&gt;,&lt;=,&gt;=) operators" example="operatorExample"/>
			<Option name="AroundBitwiseOperatorParentheses" _displayName="Bitwise (&amp;,|,^) operators" example="operatorExample"/>
			<Option name="AroundAdditiveOperatorParentheses" _displayName="Additive (+,-) operators" example="operatorExample"/>
			<Option name="AroundMultiplicativeOperatorParentheses" _displayName="Multiplicative (*,/,%) operators" example="operatorExample"/>
			<Option name="AroundShiftOperatorParentheses" _displayName="Shift (&lt;&lt;,&gt;&gt;) operators" example="operatorExample"/>
		</OptionCategory>
		-->
		<Category _displayName="Within Parentheses">
	<!--			<Option name="WithinParentheses" _displayName="Parentheses" example="operatorExample"/>
			<Option name="WithinMethodCallParentheses" _displayName="Method call" example="methodSpaceExample"/>
			<OptionCategory _displayName="Statements">
				<Option name="WithinIfParentheses" _displayName="'if' statement" example="simpleIf"/>
				<Option name="WithinWhileParentheses" _displayName="'while' statement" example="simpleWhile"/>
				<Option name="WithinForParentheses" _displayName="'for' statement" example="simpleFor"/>
				<Option name="WithinForEachParentheses" _displayName="'foreach' statement" example="simpleForeach"/>
				<Option name="WithinCatchParentheses" _displayName="'catch' statement" example="simpleCatch"/>
				<Option name="WithinSwitchParentheses" _displayName="'switch' statement" example="simpleSwitch"/>
				<Option name="WithinLockParentheses" _displayName="'lock' statement" example="simpleLock"/>
				<Option name="WithinUsingParentheses" _displayName="'using' statement" example="simpleUsingStatement"/>
			</OptionCategory> -->
			
			<OptionCategory _displayName="Expressions">
<!--				<Option name="WithinCastParentheses" _displayName="Type cast" example="simpleTypeCast"/>
				<Option name="WithinSizeOfParentheses" _displayName="'sizeof' expression"><Example><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			int i = sizeof (ClassDeclaration);
		}
	}
]]></Example>
				</Option>
				<Option name="WithinTypeOfParentheses" _displayName="'typeof' expression"><Example><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			Type t = typeof (ClassDeclaration);
		}
	}
]]></Example>
				</Option>-->
				<Option name="WithinCheckedExpressionParantheses" _displayName="'checked'/'fixed' expression"><Example><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			int i = checked(5 + 3);
			fixed (int* p1 = &i) {
				*p1 = 5;
			}
		}
	}
]]></Example>
				</Option>
			</OptionCategory>
		</Category>
		<!--
		<Category _displayName="Conditional Operator (?:)">
			<Option name="ConditionalOperatorBeforeConditionSpace" _displayName="before '?'" example="condOpExample"/>
			<Option name="ConditionalOperatorAfterConditionSpace" _displayName="after '?'" example="condOpExample"/>
			<Option name="ConditionalOperatorBeforeSeparatorSpace" _displayName="before ':'" example="condOpExample"/>
			<Option name="ConditionalOperatorAfterSeparatorSpace" _displayName="after ':'" example="condOpExample"/>
		</Category>-->
		
		<Category _displayName="Other">
			<Option name="SpacesWithinBrackets" _displayName="Within brackets"><Example><![CDATA[
class ClassDeclaration { 
		public void Test ()
		{
			string[] hello = new string[] { "Hello", "World" };
			Console.WriteLine (hello [0] + hello [1]);
		}
	}
]]></Example>
</Option>
<!--			<Option name="SpacesAfterComma" _displayName="After comma" example="simpleArrayInitializer"/>
			<Option name="SpacesBeforeComma" _displayName="Before comma" example="simpleArrayInitializer"/>
			<Option name="SpacesAfterSemicolon" _displayName="After semicolon" example="simpleFor"/>
			<Option name="SpacesAfterTypecast" _displayName="After type cast" example="simpleTypeCast"/>-->
		</Category>
	</Category>
</CodeStyle>