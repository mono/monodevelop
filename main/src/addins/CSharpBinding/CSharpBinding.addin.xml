<Addin id          = "CSharpBinding"
       namespace   = "MonoDevelop"
       name        = "CSharp Language Binding"
       author      = "Todd Berman"
       copyright   = "MIT X11"
       url         = "http://www.monodevelop.com/"
       description = "CSharp Language Binding"
       category    = "Language bindings"
       version     = "4.1.7">
	
	<Dependencies>
		<Addin id="Core" version="4.1.7"/>
		<Addin id="Ide" version="4.1.7"/>
		<Addin id="SourceEditor2" version="4.1.7"/>
		<Addin id="Refactoring" version="4.1.7"/>
	</Dependencies>

	<ConditionType id="MSBuildTargetIsAvailable" type="MonoDevelop.Projects.Formats.MSBuild.TargetsAvailableCondition" />

	<Extension path = "/MonoDevelop/Ide/Commands">
		<Command id = "MonoDevelop.CodeGeneration.CodeGenerationCommands.ShowCodeGenerationWindow"
				_label = "S_how Code Generation Window"
				shortcut = "Alt|Insert" />
		<Command id="MonoDevelop.CSharp.SplitProject.SplitProjectCommands.SplitProject"
				_label="Split Project..."
				_description="Split the current project"
				defaultHandler="MonoDevelop.CSharp.SplitProject.SplitProjectHandler" />
	</Extension>
	
	<Extension path = "/MonoDevelop/Ide/ContextMenu/ProjectPad">
		<CommandItem id="MonoDevelop.CSharp.SplitProject.SplitProjectCommands.SplitProject" />
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/MSBuildItemTypes">
		<DotNetProject
			language="C#"
			extension="csproj"
			guid="{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"
			import="$(MSBuildBinPath)\Microsoft.CSharp.targets"
			resourceHandler="MonoDevelop.CSharp.Project.CSharpResourceIdBuilder"
			/>
		<Condition id="MSBuildTargetIsAvailable" target="$(MSBuildExtensionsPath)\Microsoft\Portable\v4.0\Microsoft.Portable.CSharp.targets">
			<DotNetProjectSubtype
				guid="{786C830F-07A1-408B-BD7F-6EE04809D6DB}"
				type="MonoDevelop.Projects.PortableDotNetProject"
				useXBuild="true">
				<AddImport language="C#" projects="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets" />
				<RemoveImport language="C#" projects="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
			</DotNetProjectSubtype>
		</Condition>
	</Extension>

	<Extension path = "/MonoDevelop/Ide/FileTemplates">
		<FileTemplate id = "CSharpEmptyFile" resource = "EmptyCSharpFile.xft.xml"/>
		<FileTemplate id = "CSharpAssemblyInfo" resource = "AssemblyInfo.xft.xml"/>
	</Extension>

	<Extension path = "/MonoDevelop/Ide/ProjectTemplates">
		<ProjectTemplate id = "CSharpConsoleProject" resource = "ConsoleProject.xpt.xml"/>
		<ProjectTemplate id = "CSharpEmptyProject" resource = "EmptyProject.xpt.xml"/>
		<ProjectTemplate id = "CSharpGtkSharp2Project" resource = "GtkSharp2Project.xpt.xml"/>
		<ProjectTemplate id = "CSharpLibrary" resource = "Library.xpt.xml"/>
		<Condition id="MSBuildTargetIsAvailable" target="$(MSBuildExtensionsPath)\Microsoft\Portable\v4.0\Microsoft.Portable.CSharp.targets">
			<ProjectTemplate id = "CSharpPortableLibrary" resource = "PortableLibrary.xpt.xml" />
		</Condition>
	</Extension>

	<Extension path = "/MonoDevelop/Ide/FileFilters">
		<FileFilter id = "CSharp"
		            insertbefore = "Assemblies"
		            _label = "C# Files"
		            extensions = "*.cs"/>
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/Build/General">
		<Condition id="ActiveLanguage" value="C#">
			<Panel id = "CSharpCompilerOptionsPanel"
			             _label = "C#"
			             class = "MonoDevelop.CSharp.Project.CompilerOptionsPanel"/>
		</Condition>
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/Build/Compiler">
		<Condition id="ActiveLanguage" value="C#">
			<Panel id = "CSharpCodeGenerationPanel"
			             _label = "Compiler"
			             class = "MonoDevelop.CSharp.Project.CodeGenerationPanel"/>
		</Condition>
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/LanguageBindings">
		<LanguageBinding id    = "CSharp"
		                 supportedextensions = ".cs"
		                 class = "MonoDevelop.CSharp.CSharpLanguageBinding" />
	</Extension>

	<Extension path = "/MonoDevelop/Ide/ReferenceFinder">
		<ReferenceFinder supportedmimetypes = "text/x-csharp"
		                 class = "MonoDevelop.CSharp.Refactoring.CSharpReferenceFinder" />
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/SerializableClasses">
		<DataType class = "MonoDevelop.CSharp.Project.CSharpCompilerParameters" />
		<DataType class = "MonoDevelop.CSharp.Project.CSharpProjectParameters" />
	</Extension>

	<Extension path = "/MonoDevelop/Ide/TextEditorExtensions">
		<!-- indent engine must be before the completion text editor engine,
		otherwise stuff like

		int Foo {
		         get;private set';'

		will end up as

		int Foo {
		         get;
		         privaet;

		-->
		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.Formatting.CSharpTextEditorIndentation" />
		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.Completion.CSharpCompletionTextEditorExtension" />
		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.Highlighting.HighlightUsagesExtension" />
		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.PathedDocumentTextEditorExtension" />
		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.UnitTestTextEditorExtension" />
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/MD1SerializationMaps">
		<SerializationMap resource="md1format.xml" />
	</Extension>

	<Extension path = "/MonoDevelop/Core/StockIcons">
		<StockIcon stockid = "md-csharp-file" resource = "C#.FileIcon" size="Menu" />
		<StockIcon stockid = "md-csharp-project" resource = "csharp-project-16.png" size="Menu"/>
	</Extension>

	<Extension path = "/MonoDevelop/Core/MimeTypes">
		<MimeType id="text/x-csharp" _description="C# source code" icon="md-csharp-file" isText="true">
			<File pattern="*.cs" />
		</MimeType>
		<MimeType id="application/csproject+xml" _description="C# project file" baseType="application/xml">
			<File pattern="*.csproj" />
		</MimeType>
	</Extension>

	<Extension path = "/MonoDevelop/Ide/CodeFormatters">
		<Formatter mimeType="text/x-csharp" class="MonoDevelop.CSharp.Formatting.CSharpFormatter" />
	</Extension>

	<Extension path = "/MonoDevelop/TypeSystem/Ambiences">
		<Ambience mimeType="text/x-csharp" class = "MonoDevelop.CSharp.CSharpAmbience" />
	</Extension>

	<Extension path = "/MonoDevelop/TypeSystem/Parser">
		<Parser class="MonoDevelop.CSharp.Parser.TypeSystemParser" mimeType = "text/x-csharp" />
	</Extension>

	<Extension path = "/MonoDevelop/TypeSystem/FoldingParser">
		<Parser class = "MonoDevelop.CSharp.Parser.CSharpFoldingParser" mimeType="text/x-csharp" />
	</Extension>

	<Extension path = "/MonoDevelop/TypeSystem/CodeGenerators">
		<Generator class="MonoDevelop.CSharp.Refactoring.CSharpCodeGenerator" mimeType = "text/x-csharp" />
	</Extension>
	
	<Extension path = "/MonoDevelop/ProjectModel/PolicySets/Mono" >
		<Policies resource="MonoCSharpPolicy.xml" />
		<Policies resource="MonoNameConventionPolicy.xml" />
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/PolicySets" >
		<PolicySet id="KR" _name="K&amp;R style" allowDiffSerialize="false">
			<Policies resource="KRCSharpPolicy.xml" />
			<Policies resource="InvariantTextStylePolicy.xml" />
		</PolicySet>
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/PolicySets" >
		<PolicySet id="1TBS" _name="SharpDevelop style (1TBS)" allowDiffSerialize="false">
			<Policies resource="SharpDevelopCSharpPolicy.xml" />
			<Policies resource="InvariantTextStylePolicy.xml" />
		</PolicySet>
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/PolicySets/VisualStudio" >
		<Policies resource="AllmanCSharpPolicy.xml" />
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/PolicySets" >
		<PolicySet id="Whitesmiths" _name="Whitesmiths style" allowDiffSerialize="false">
			<Policies resource="WhitesmithsCSharpPolicy.xml" />
			<Policies resource="InvariantTextStylePolicy.xml" />
		</PolicySet>
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/PolicySets" >
		<PolicySet id="GNU" _name="GNU style" allowDiffSerialize="false">
			<Policies resource="GNUCSharpPolicy.xml" />
			<Policies resource="GNUTextStylePolicy.xml" />
		</PolicySet>
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/Gui/MimeTypePolicyPanels">
		<Panel id = "CSharpFormatting" _label = "C# Format" mimeType="text/x-csharp" class = "MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanel" />
	</Extension>

	<Extension path = "/MonoDevelop/Refactoring/CodeActions">
		<Action mimeType="text/x-csharp"
			_title = "Move type to another file"
			_description = "Moves current type to another file that matches the name of the type."
			class = "MonoDevelop.CSharp.Refactoring.CodeActions.MoveTypeToFile" />
		<Action mimeType="text/x-csharp"
			_title = "Convert to enum"
			_description = "Converts constant fields to enumeration"
			class = "MonoDevelop.CSharp.Refactoring.CodeActions.ConvertToEnumAction" />
	</Extension>

	<Extension path = "/MonoDevelop/Ide/TextEditorResolver">
		<Resolver class = "MonoDevelop.CSharp.Resolver.TextEditorResolverProvider" mimeType="text/x-csharp" />
	</Extension>

	<Extension path = "/MonoDevelop/Ide/Commands/TextEditor">
		<Command id = "MonoDevelop.CSharp.Highlighting.MoveToUsagesCommand.PrevUsage"
		         defaultHandler = "MonoDevelop.CSharp.Highlighting.MoveToPrevUsageHandler"
		         shortcut = "Ctrl|Shift|Up"
		         macShortcut = "Meta|Shift|Up"
		         _label = "_Move to prev usage"/>
		<Command id = "MonoDevelop.CSharp.Highlighting.MoveToUsagesCommand.NextUsage"
		         defaultHandler = "MonoDevelop.CSharp.Highlighting.MoveToNextUsageHandler"
		         shortcut = "Ctrl|Shift|Down"
		         macShortcut = "Meta|Shift|Down"
		         _label = "_Move to next usage"/>

		<Command id = "MonoDevelop.CSharp.ExpandCommands.ExpandSelection"
		         defaultHandler = "MonoDevelop.CSharp.ExpandSelectionHandler"
		         shortcut = "Alt|Shift|Up"
		         macShortcut = "Alt|Shift|Up"
		         _label = "_Expand selection"/>

		<Command id = "MonoDevelop.CSharp.ExpandCommands.ShrinkSelection"
		         defaultHandler = "MonoDevelop.CSharp.ShrinkSelectionHandler"
		         shortcut = "Alt|Shift|Down"
		         macShortcut = "Alt|Shift|Down"
		         _label = "_Shrink selection"/>
	</Extension>

	<Extension path = "/MonoDevelop/Refactoring/CodeGenerators">
		<Class class = "MonoDevelop.CodeGeneration.CreateConstructorGenerator" />
		<Class class = "MonoDevelop.CodeGeneration.ReadonlyPropertyGenerator" />
		<Class class = "MonoDevelop.CodeGeneration.PropertyGenerator" />
		<Class class = "MonoDevelop.CodeGeneration.ImplementInterfaceMembersGenerator" />
		<Class class = "MonoDevelop.CodeGeneration.PartialGenerator" />
		<Class class = "MonoDevelop.CodeGeneration.OverrideMembersGenerator" />
		<Class class = "MonoDevelop.CodeGeneration.ToStringGenerator" />
		<Class class = "MonoDevelop.CodeGeneration.RaiseEventMethodGenerator" />
		<Class class = "MonoDevelop.CodeGeneration.EqualityMembersGenerator" />
		<Class class = "MonoDevelop.CodeGeneration.WriteLineGenerator" />
	</Extension>

	<Extension path = "/MonoDevelop/Refactoring/CodeActionSource">
		<Source class ="MonoDevelop.CSharp.Refactoring.CodeActions.NRefactoryCodeActionSource"/>
	</Extension>

	<Extension path = "/MonoDevelop/Refactoring/CodeIssueSource">
		<Source class ="MonoDevelop.CSharp.Refactoring.CodeIssues.NRefactoryCodeIssueSource"/>
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/Gui/DefaultPolicyPanels/SourceCode">
		<Section id="NameConventions" _label="Name Conventions" fill = "true" class="MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanel" />
	</Extension>
	<Extension path = "/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/SourceCode">
		<Section id="NameConventions" _label="Name Conventions" fill = "true" class="MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanel" />
	</Extension>
	<Extension path = "/MonoDevelop/Ide/GlobalOptionsDialog/SourceCode">
		<Section id="NameConventions" _label="Name Conventions" fill = "true" class="MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanel" />
	</Extension>

	<Extension path = "/MonoDevelop/SourceEditor2/TooltipProviders">
		<Class id="LanguageItem" class="MonoDevelop.SourceEditor.LanguageItemTooltipProvider" />
	</Extension>
	
	<Extension path = "/MonoDevelop/Ide/CompletionCharacters">
		<Complete id="C#" insertbefore="Html" language="C#" commitOnSpace="True" commitChars="{}[]().,:;+-*/%&amp;|^!~=&lt;&gt;?@#'&quot;\"/>
	</Extension>


	<Module>
	    <Runtime>
	        <Import assembly="MonoDevelop.CSharpBinding.Autotools.dll"/>
	    </Runtime>
		<Dependencies>
			<Addin id="Autotools" version="4.1.7"/>
		</Dependencies>
		<Extension path = "/MonoDevelop/Autotools/SimpleSetups">
			<Class class="CSharpBinding.Autotools.CSharpAutotoolsSetup" />
		</Extension>
	</Module>

	<Module>
		<Runtime>
			<Import assembly="MonoDevelop.CSharpBinding.AspNet.dll"/>
		</Runtime>
		<Dependencies>
			<Addin id="AspNet" version="4.1.7"/>
		</Dependencies>
		<Extension path = "/MonoDevelop/Asp/CompletionBuilders">
			<Class class = "MonoDevelop.CSharp.Completion.AspLanguageBuilder" />
		</Extension>
		<Extension path = "/MonoDevelop/Ide/ReferenceFinder">
			<ReferenceFinder supportedmimetypes = "application/x-aspx,application/x-ascx,application/x-asax,application/x-ashx,application/x-asmx,application/x-asix"
			                 class = "MonoDevelop.CSharp.Refactoring.ASPNetReferenceFinder" />
		</Extension>
	</Module>
</Addin>
